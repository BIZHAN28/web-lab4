{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token-storage.service\";\nconst TOKEN_HEADER_KEY = 'Authorization';\nexport class TokenInjector {\n  constructor(token) {\n    this.token = token;\n  }\n  intercept(req, next) {\n    let authReq = req;\n    let token = null;\n    if (this.token.getToken()) {\n      token = \"Bearer \" + this.token.getToken();\n    }\n    console.log(\"token info:\" + token);\n    if (token != null) {\n      authReq = req.clone({\n        headers: req.headers.set(TOKEN_HEADER_KEY, token)\n      });\n    }\n    return next.handle(authReq);\n  }\n  static #_ = this.ɵfac = function TokenInjector_Factory(t) {\n    return new (t || TokenInjector)(i0.ɵɵinject(i1.TokenStorageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInjector,\n    factory: TokenInjector.ɵfac\n  });\n}\nexport const httpInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: TokenInjector,\n  multi: true\n}];","map":{"version":3,"names":["HTTP_INTERCEPTORS","TOKEN_HEADER_KEY","TokenInjector","constructor","token","intercept","req","next","authReq","getToken","console","log","clone","headers","set","handle","_","i0","ɵɵinject","i1","TokenStorageService","_2","factory","ɵfac","httpInterceptorProviders","provide","useClass","multi"],"sources":["D:\\study things\\web\\weblab4-main\\frontend\\src\\app\\auth\\token-injector.ts"],"sourcesContent":["import {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {HttpInterceptor, HttpHandler, HttpRequest} from '@angular/common/http';\n\nimport {TokenStorageService} from './token-storage.service';\n\nconst TOKEN_HEADER_KEY = 'Authorization';\n\n@Injectable()\nexport class TokenInjector implements HttpInterceptor {\n\n  constructor(private token: TokenStorageService) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    let authReq = req;\n    let token = null;\n    if (this.token.getToken()) {\n      token = \"Bearer \" + this.token.getToken();\n    }\n\n    console.log(\"token info:\" + token);\n    if (token != null) {\n      authReq = req.clone({headers: req.headers.set(TOKEN_HEADER_KEY, token)});\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const httpInterceptorProviders = [\n  {provide: HTTP_INTERCEPTORS, useClass: TokenInjector, multi: true}\n];\n"],"mappings":"AAAA,SAAQA,iBAAiB,QAAO,sBAAsB;;;AAMtD,MAAMC,gBAAgB,GAAG,eAAe;AAGxC,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,KAA0B;IAA1B,KAAAA,KAAK,GAALA,KAAK;EACzB;EAEAC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,OAAO,GAAGF,GAAG;IACjB,IAAIF,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAACA,KAAK,CAACK,QAAQ,EAAE,EAAE;MACzBL,KAAK,GAAG,SAAS,GAAG,IAAI,CAACA,KAAK,CAACK,QAAQ,EAAE;IAC3C;IAEAC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGP,KAAK,CAAC;IAClC,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjBI,OAAO,GAAGF,GAAG,CAACM,KAAK,CAAC;QAACC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAACb,gBAAgB,EAAEG,KAAK;MAAC,CAAC,CAAC;IAC1E;IACA,OAAOG,IAAI,CAACQ,MAAM,CAACP,OAAO,CAAC;EAC7B;EAAC,QAAAQ,CAAA,G;qBAjBUd,aAAa,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbnB,aAAa;IAAAoB,OAAA,EAAbpB,aAAa,CAAAqB;EAAA;;AAoB1B,OAAO,MAAMC,wBAAwB,GAAG,CACtC;EAACC,OAAO,EAAEzB,iBAAiB;EAAE0B,QAAQ,EAAExB,aAAa;EAAEyB,KAAK,EAAE;AAAI,CAAC,CACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}