{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n\n\n    Metapost/Hobby curves, see e.g. https://bosker.wordpress.com/2013/11/13/beyond-bezier-curves/\n\n    * Ported to Python for the project PyX. Copyright (C) 2011 Michael Schindler <m-schindler@users.sourceforge.net>\n    * Ported to javascript from the PyX implementation (https://pyx-project.org/) by Vlad-X.\n    * Adapted to JSXGraph and some code changes by Alfred Wassermann 2020.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\n    Internal functions of MetaPost\n    This file re-implements some of the functionality of MetaPost\n    (https://tug.org/metapost.html). MetaPost was developed by John D. Hobby and\n    others. The code of Metapost is in the public domain, which we understand as\n    an implicit permission to reuse the code here (see the comment at\n    https://www.gnu.org/licenses/license-list.html)\n\n    This file is based on the MetaPost version distributed by TeXLive:\n    svn://tug.org/texlive/trunk/Build/source/texk/web2c/mplibdir revision 22737 #\n    (2011-05-31)\n*/\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview In this file the namespace Math.Metapost is defined which holds algorithms translated from Metapost\n * by D.E. Knuth and J.D. Hobby.\n */\n\nimport Type from \"../utils/type\";\nimport Mat from \"./math\";\n\n/**\n * The JXG.Math.Metapost namespace holds algorithms translated from Metapost\n * by D.E. Knuth and J.D. Hobby.\n *\n * @name JXG.Math.Metapost\n * @exports Mat.Metapost as JXG.Math.Metapost\n * @namespace\n */\nMat.Metapost = {\n  MP_ENDPOINT: 0,\n  MP_EXPLICIT: 1,\n  MP_GIVEN: 2,\n  MP_CURL: 3,\n  MP_OPEN: 4,\n  MP_END_CYCLE: 5,\n  UNITY: 1.0,\n  // two: 2,\n  // fraction_half: 0.5,\n  FRACTION_ONE: 1.0,\n  FRACTION_THREE: 3.0,\n  ONE_EIGHTY_DEG: Math.PI,\n  THREE_SIXTY_DEG: 2 * Math.PI,\n  // EPSILON: 1e-5,\n  EPS_SQ: 1e-5 * 1e-5,\n  /**\n   * @private\n   */\n  make_choices: function (knots) {\n    var dely,\n      h,\n      k,\n      delx,\n      n,\n      q,\n      p,\n      s,\n      cosine,\n      t,\n      sine,\n      delta_x,\n      delta_y,\n      delta,\n      psi,\n      endless = true;\n    p = knots[0];\n    do {\n      if (!p) {\n        break;\n      }\n      q = p.next;\n\n      // Join two identical knots by setting the control points to the same\n      // coordinates.\n      // MP 291\n      if (p.rtype > this.MP_EXPLICIT && (p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y) < this.EPS_SQ) {\n        p.rtype = this.MP_EXPLICIT;\n        if (p.ltype === this.MP_OPEN) {\n          p.ltype = this.MP_CURL;\n          p.set_left_curl(this.UNITY);\n        }\n        q.ltype = this.MP_EXPLICIT;\n        if (q.rtype === this.MP_OPEN) {\n          q.rtype = this.MP_CURL;\n          q.set_right_curl(this.UNITY);\n        }\n        p.rx = p.x;\n        q.lx = p.x;\n        p.ry = p.y;\n        q.ly = p.y;\n      }\n      p = q;\n    } while (p !== knots[0]);\n\n    // Find the first breakpoint, h, on the path\n    // MP 292\n    h = knots[0];\n    while (endless) {\n      if (h.ltype !== this.MP_OPEN || h.rtype !== this.MP_OPEN) {\n        break;\n      }\n      h = h.next;\n      if (h === knots[0]) {\n        h.ltype = this.MP_END_CYCLE;\n        break;\n      }\n    }\n    p = h;\n    while (endless) {\n      if (!p) {\n        break;\n      }\n\n      // Fill in the control points between p and the next breakpoint,\n      // then advance p to that breakpoint\n      // MP 299\n      q = p.next;\n      if (p.rtype >= this.MP_GIVEN) {\n        while (q.ltype === this.MP_OPEN && q.rtype === this.MP_OPEN) {\n          q = q.next;\n        }\n\n        // Calculate the turning angles psi_ k and the distances d_{k,k+1};\n        // set n to the length of the path\n        // MP 302\n        k = 0;\n        s = p;\n        n = knots.length;\n        delta_x = [];\n        delta_y = [];\n        delta = [];\n        psi = [null];\n\n        // tuple([]) = tuple([[], [], [], [null]]);\n        while (endless) {\n          t = s.next;\n          // None;\n          delta_x.push(t.x - s.x);\n          delta_y.push(t.y - s.y);\n          delta.push(this.mp_pyth_add(delta_x[k], delta_y[k]));\n          if (k > 0) {\n            sine = delta_y[k - 1] / delta[k - 1];\n            cosine = delta_x[k - 1] / delta[k - 1];\n            psi.push(Math.atan2(delta_y[k] * cosine - delta_x[k] * sine, delta_x[k] * cosine + delta_y[k] * sine));\n          }\n          k++;\n          s = t;\n          if (s === q) {\n            n = k;\n          }\n          if (k >= n && s.ltype !== this.MP_END_CYCLE) {\n            break;\n          }\n        }\n        if (k === n) {\n          psi.push(0);\n        } else {\n          psi.push(psi[1]);\n        }\n\n        // Remove open types at the breakpoints\n        // MP 303\n        if (q.ltype === this.MP_OPEN) {\n          delx = q.rx - q.x;\n          dely = q.ry - q.y;\n          if (delx * delx + dely * dely < this.EPS_SQ) {\n            q.ltype = this.MP_CURL;\n            q.set_left_curl(this.UNITY);\n          } else {\n            q.ltype = this.MP_GIVEN;\n            q.set_left_given(Math.atan2(dely, delx));\n          }\n        }\n        if (p.rtype === this.MP_OPEN && p.ltype === this.MP_EXPLICIT) {\n          delx = p.x - p.lx;\n          dely = p.y - p.ly;\n          if (delx * delx + dely * dely < this.EPS_SQ) {\n            p.rtype = this.MP_CURL;\n            p.set_right_curl(this.UNITY);\n          } else {\n            p.rtype = this.MP_GIVEN;\n            p.set_right_given(Math.atan2(dely, delx));\n          }\n        }\n        this.mp_solve_choices(p, q, n, delta_x, delta_y, delta, psi);\n      } else if (p.rtype === this.MP_ENDPOINT) {\n        // MP 294\n        p.rx = p.x;\n        p.ry = p.y;\n        q.lx = q.x;\n        q.ly = q.y;\n      }\n      p = q;\n      if (p === h) {\n        break;\n      }\n    }\n  },\n  /**\n   * Implements solve_choices form metapost\n   * MP 305\n   * @private\n   */\n  mp_solve_choices: function (p, q, n, delta_x, delta_y, delta, psi) {\n    var aa,\n      acc,\n      vv,\n      bb,\n      ldelta,\n      ee,\n      k,\n      s,\n      ww,\n      uu,\n      lt,\n      r,\n      t,\n      ff,\n      theta,\n      rt,\n      dd,\n      cc,\n      ct_st,\n      ct,\n      st,\n      cf_sf,\n      cf,\n      sf,\n      i,\n      k_idx,\n      endless = true;\n    ldelta = delta.length + 1;\n    uu = new Array(ldelta);\n    ww = new Array(ldelta);\n    vv = new Array(ldelta);\n    theta = new Array(ldelta);\n    for (i = 0; i < ldelta; i++) {\n      theta[i] = vv[i] = ww[i] = uu[i] = 0;\n    }\n    k = 0;\n    s = p;\n    r = 0;\n    while (endless) {\n      t = s.next;\n      if (k === 0) {\n        // MP 306\n        if (s.rtype === this.MP_GIVEN) {\n          // MP 314\n          if (t.ltype === this.MP_GIVEN) {\n            aa = Math.atan2(delta_y[0], delta_x[0]);\n            ct_st = this.mp_n_sin_cos(p.right_given() - aa);\n            ct = ct_st[0];\n            st = ct_st[1];\n            cf_sf = this.mp_n_sin_cos(q.left_given() - aa);\n            cf = cf_sf[0];\n            sf = cf_sf[1];\n            this.mp_set_controls(p, q, delta_x[0], delta_y[0], st, ct, -sf, cf);\n            return;\n          }\n          vv[0] = s.right_given() - Math.atan2(delta_y[0], delta_x[0]);\n          vv[0] = this.reduce_angle(vv[0]);\n          uu[0] = 0;\n          ww[0] = 0;\n        } else if (s.rtype === this.MP_CURL) {\n          // MP 315\n          if (t.ltype === this.MP_CURL) {\n            p.rtype = this.MP_EXPLICIT;\n            q.ltype = this.MP_EXPLICIT;\n            lt = Math.abs(q.left_tension());\n            rt = Math.abs(p.right_tension());\n            ff = this.UNITY / (3.0 * rt);\n            p.rx = p.x + delta_x[0] * ff;\n            p.ry = p.y + delta_y[0] * ff;\n            ff = this.UNITY / (3.0 * lt);\n            q.lx = q.x - delta_x[0] * ff;\n            q.ly = q.y - delta_y[0] * ff;\n            return;\n          }\n          cc = s.right_curl();\n          lt = Math.abs(t.left_tension());\n          rt = Math.abs(s.right_tension());\n          uu[0] = this.mp_curl_ratio(cc, rt, lt);\n          vv[0] = -psi[1] * uu[0];\n          ww[0] = 0;\n        } else {\n          if (s.rtype === this.MP_OPEN) {\n            uu[0] = 0;\n            vv[0] = 0;\n            ww[0] = this.FRACTION_ONE;\n          }\n        }\n      } else {\n        if (s.ltype === this.MP_END_CYCLE || s.ltype === this.MP_OPEN) {\n          // MP 308\n          aa = this.UNITY / (3.0 * Math.abs(r.right_tension()) - this.UNITY);\n          dd = delta[k] * (this.FRACTION_THREE - this.UNITY / Math.abs(r.right_tension()));\n          bb = this.UNITY / (3 * Math.abs(t.left_tension()) - this.UNITY);\n          ee = delta[k - 1] * (this.FRACTION_THREE - this.UNITY / Math.abs(t.left_tension()));\n          cc = this.FRACTION_ONE - uu[k - 1] * aa;\n          dd = dd * cc;\n          lt = Math.abs(s.left_tension());\n          rt = Math.abs(s.right_tension());\n          if (lt < rt) {\n            dd *= Math.pow(lt / rt, 2);\n          } else {\n            if (lt > rt) {\n              ee *= Math.pow(rt / lt, 2);\n            }\n          }\n          ff = ee / (ee + dd);\n          uu[k] = ff * bb;\n          acc = -psi[k + 1] * uu[k];\n          if (r.rtype === this.MP_CURL) {\n            ww[k] = 0;\n            vv[k] = acc - psi[1] * (this.FRACTION_ONE - ff);\n          } else {\n            ff = (this.FRACTION_ONE - ff) / cc;\n            acc = acc - psi[k] * ff;\n            ff = ff * aa;\n            vv[k] = acc - vv[k - 1] * ff;\n            ww[k] = -ww[k - 1] * ff;\n          }\n          if (s.ltype === this.MP_END_CYCLE) {\n            aa = 0;\n            bb = this.FRACTION_ONE;\n            while (endless) {\n              k -= 1;\n              if (k === 0) {\n                k = n;\n              }\n              aa = vv[k] - aa * uu[k];\n              bb = ww[k] - bb * uu[k];\n              if (k === n) {\n                break;\n              }\n            }\n            aa = aa / (this.FRACTION_ONE - bb);\n            theta[n] = aa;\n            vv[0] = aa;\n            // k_val = range(1, n);\n            // for (k_idx in k_val) {\n            // k = k_val[k_idx];\n            for (k_idx = 1; k_idx < n; k_idx++) {\n              vv[k_idx] = vv[k_idx] + aa * ww[k_idx];\n            }\n            break;\n          }\n        } else {\n          if (s.ltype === this.MP_CURL) {\n            cc = s.left_curl();\n            lt = Math.abs(s.left_tension());\n            rt = Math.abs(r.right_tension());\n            ff = this.mp_curl_ratio(cc, lt, rt);\n            theta[n] = -(vv[n - 1] * ff) / (this.FRACTION_ONE - ff * uu[n - 1]);\n            break;\n          }\n          if (s.ltype === this.MP_GIVEN) {\n            theta[n] = s.left_given() - Math.atan2(delta_y[n - 1], delta_x[n - 1]);\n            theta[n] = this.reduce_angle(theta[n]);\n            break;\n          }\n        }\n      }\n      r = s;\n      s = t;\n      k += 1;\n    }\n\n    // MP 318\n    for (k = n - 1; k > -1; k--) {\n      theta[k] = vv[k] - theta[k + 1] * uu[k];\n    }\n    s = p;\n    k = 0;\n    while (endless) {\n      t = s.next;\n      ct_st = this.mp_n_sin_cos(theta[k]);\n      ct = ct_st[0];\n      st = ct_st[1];\n      cf_sf = this.mp_n_sin_cos(-psi[k + 1] - theta[k + 1]);\n      cf = cf_sf[0];\n      sf = cf_sf[1];\n      this.mp_set_controls(s, t, delta_x[k], delta_y[k], st, ct, sf, cf);\n      k++;\n      s = t;\n      if (k === n) {\n        break;\n      }\n    }\n  },\n  /**\n   * @private\n   */\n  mp_n_sin_cos: function (z) {\n    return [Math.cos(z), Math.sin(z)];\n  },\n  /**\n   * @private\n   */\n  mp_set_controls: function (p, q, delta_x, delta_y, st, ct, sf, cf) {\n    var rt, ss, lt, sine, rr;\n    lt = Math.abs(q.left_tension());\n    rt = Math.abs(p.right_tension());\n    rr = this.mp_velocity(st, ct, sf, cf, rt);\n    ss = this.mp_velocity(sf, cf, st, ct, lt);\n\n    // console.log('lt rt rr ss', lt, rt, rr, ss);\n    if (p.right_tension() < 0 || q.left_tension() < 0) {\n      if (st >= 0 && sf >= 0 || st <= 0 && sf <= 0) {\n        sine = Math.abs(st) * cf + Math.abs(sf) * ct;\n        if (sine > 0) {\n          sine *= 1.00024414062;\n          if (p.right_tension() < 0) {\n            if (this.mp_ab_vs_cd(Math.abs(sf), this.FRACTION_ONE, rr, sine) < 0) {\n              rr = Math.abs(sf) / sine;\n            }\n          }\n          if (q.left_tension() < 0) {\n            if (this.mp_ab_vs_cd(Math.abs(st), this.FRACTION_ONE, ss, sine) < 0) {\n              ss = Math.abs(st) / sine;\n            }\n          }\n        }\n      }\n    }\n    p.rx = p.x + (delta_x * ct - delta_y * st) * rr;\n    p.ry = p.y + (delta_y * ct + delta_x * st) * rr;\n    q.lx = q.x - (delta_x * cf + delta_y * sf) * ss;\n    q.ly = q.y - (delta_y * cf - delta_x * sf) * ss;\n    p.rtype = this.MP_EXPLICIT;\n    q.ltype = this.MP_EXPLICIT;\n  },\n  /**\n   * @private\n   */\n  mp_pyth_add: function (a, b) {\n    return Mat.hypot(a, b);\n  },\n  /**\n   *\n   * @private\n   */\n  mp_curl_ratio: function (gamma, a_tension, b_tension) {\n    var alpha = 1.0 / a_tension,\n      beta = 1.0 / b_tension;\n    return Math.min(4.0, ((3.0 - alpha) * alpha * alpha * gamma + beta * beta * beta) / (alpha * alpha * alpha * gamma + (3.0 - beta) * beta * beta));\n  },\n  /**\n   * @private\n   */\n  mp_ab_vs_cd: function (a, b, c, d) {\n    if (a * b === c * d) {\n      return 0;\n    }\n    if (a * b > c * d) {\n      return 1;\n    }\n    return -1;\n  },\n  /**\n   * @private\n   */\n  mp_velocity: function (st, ct, sf, cf, t) {\n    return Math.min(4.0, (2.0 + Math.sqrt(2) * (st - sf / 16.0) * (sf - st / 16.0) * (ct - cf)) / (1.5 * t * (2 + (Math.sqrt(5) - 1) * ct + (3 - Math.sqrt(5)) * cf)));\n  },\n  /**\n   * @private\n   * @param {Number} A\n   */\n  reduce_angle: function (A) {\n    if (Math.abs(A) > this.ONE_EIGHTY_DEG) {\n      if (A > 0) {\n        A -= this.THREE_SIXTY_DEG;\n      } else {\n        A += this.THREE_SIXTY_DEG;\n      }\n    }\n    return A;\n  },\n  /**\n   *\n   * @private\n   * @param {Array} p\n   * @param {Number} tension\n   * @param {Boolean} cycle\n   */\n  makeknots: function (p, tension) {\n    var i,\n      len,\n      knots = [];\n    len = p.length;\n    for (i = 0; i < len; i++) {\n      knots.push({\n        x: p[i][0],\n        y: p[i][1],\n        ltype: this.MP_OPEN,\n        rtype: this.MP_OPEN,\n        lx: false,\n        rx: false,\n        ly: tension,\n        ry: tension,\n        left_curl: function () {\n          return this.lx || 0;\n        },\n        right_curl: function () {\n          return this.rx || 0;\n        },\n        left_tension: function () {\n          return this.ly || 1;\n        },\n        right_tension: function () {\n          return this.ry || 1;\n        },\n        set_right_curl: function (v) {\n          this.rx = v || 0;\n        },\n        set_left_curl: function (v) {\n          this.lx = v || 0;\n        }\n      });\n    }\n    len = knots.length;\n    for (i = 0; i < len; i++) {\n      knots[i].next = knots[i + 1] || knots[i];\n      knots[i].set_right_given = knots[i].set_right_curl;\n      knots[i].set_left_given = knots[i].set_left_curl;\n      knots[i].right_given = knots[i].right_curl;\n      knots[i].left_given = knots[i].left_curl;\n    }\n    knots[len - 1].next = knots[0];\n    return knots;\n  },\n  /**\n   *\n   * @param {Array} point_list\n   * @param {Object} controls\n   *\n   * @returns {Array}\n   */\n  curve: function (point_list, controls) {\n    var knots,\n      len,\n      i,\n      ii,\n      val,\n      obj,\n      isClosed = false,\n      x = [],\n      y = [];\n    controls = controls || {\n      tension: 1,\n      direction: {},\n      curl: {},\n      isClosed: false\n    };\n\n    // Change default tension\n    val = 1;\n    if (controls.hasOwnProperty('tension')) {\n      val = Type.evaluate(controls.tension);\n    }\n    knots = this.makeknots(point_list, val);\n    len = knots.length;\n    if (Type.exists(controls.isClosed) && Type.evaluate(controls.isClosed)) {\n      isClosed = true;\n    }\n    if (!isClosed) {\n      knots[0].ltype = this.MP_ENDPOINT;\n      knots[0].rtype = this.MP_CURL;\n      knots[len - 1].rtype = this.MP_ENDPOINT;\n      knots[len - 1].ltype = this.MP_CURL;\n    }\n\n    // for (i in controls.direction) {\n    //     if (controls.direction.hasOwnProperty(i)) {\n    //         val = Type.evaluate(controls.direction[i]);\n    //         if (Type.isArray(val)) {\n    //             if (val[0] !== false) {\n    //                 knots[i].lx = (val[0] * Math.PI) / 180;\n    //                 knots[i].ltype = this.MP_GIVEN;\n    //             }\n    //             if (val[1] !== false) {\n    //                 knots[i].rx = (val[1] * Math.PI) / 180;\n    //                 knots[i].rtype = this.MP_GIVEN;\n    //             }\n    //         } else {\n    //             knots[i].lx = (val * Math.PI) / 180;\n    //             knots[i].rx = (val * Math.PI) / 180;\n    //             knots[i].ltype = knots[i].rtype = this.MP_GIVEN;\n    //         }\n    //     }\n    // }\n\n    // for (i in controls.curl) {\n    //     if (controls.curl.hasOwnProperty(i)) {\n    //         val = Type.evaluate(controls.curl[i]);\n    //         if (parseInt(i, 10) === 0) {\n    //             knots[i].rtype = this.MP_CURL;\n    //             knots[i].set_right_curl(val);\n    //         } else if (parseInt(i, 10) === len - 1) {\n    //             knots[i].ltype = this.MP_CURL;\n    //             knots[i].set_left_curl(val);\n    //         }\n    //     }\n    // }\n\n    // Set individual point control values\n    for (ii in controls) {\n      if (controls.hasOwnProperty(ii)) {\n        i = parseInt(ii, 10);\n        if (isNaN(i) || i < 0 || i >= len) {\n          continue;\n        }\n\n        // Handle individual curl\n        obj = controls[i];\n        if (Type.exists(obj.type)) {\n          switch (obj.type) {\n            case 'curl':\n              val = Type.evaluate(obj.curl);\n              if (i === 0) {\n                knots[i].rtype = this.MP_CURL;\n                knots[i].set_right_curl(val);\n              } else if (i === len - 1) {\n                knots[i].ltype = this.MP_CURL;\n                knots[i].set_left_curl(val);\n              } else {\n                knots[i].ltype = this.MP_CURL;\n                knots[i].rtype = this.MP_CURL;\n                knots[i].lx = val;\n                knots[i].rx = val;\n              }\n              break;\n          }\n        }\n\n        // Handle individual directions\n        if (Type.exists(obj.direction)) {\n          val = Type.evaluate(obj.direction);\n          if (Type.isArray(val)) {\n            if (val[0] !== false) {\n              knots[i].lx = val[0] * Math.PI / 180;\n              knots[i].ltype = this.MP_GIVEN;\n            }\n            if (val[1] !== false) {\n              knots[i].rx = val[1] * Math.PI / 180;\n              knots[i].rtype = this.MP_GIVEN;\n            }\n          } else {\n            knots[i].lx = val * Math.PI / 180;\n            knots[i].rx = val * Math.PI / 180;\n            knots[i].ltype = knots[i].rtype = this.MP_GIVEN;\n          }\n        }\n\n        // Handle individual tension\n        if (Type.exists(obj.tension)) {\n          val = Type.evaluate(obj.tension);\n          if (Type.isArray(val)) {\n            if (val[0] !== false) {\n              knots[i].ly = Type.evaluate(val[0]);\n            }\n            if (val[1] !== false) {\n              knots[i].ry = Type.evaluate(val[1]);\n            }\n          } else {\n            knots[i].ly = val;\n            knots[i].ry = val;\n          }\n        }\n      }\n    }\n\n    // Generate ths Bezier curve\n    this.make_choices(knots);\n\n    // Return the coordinates\n    for (i = 0; i < len - 1; i++) {\n      x.push(knots[i].x);\n      x.push(knots[i].rx);\n      x.push(knots[i + 1].lx);\n      y.push(knots[i].y);\n      y.push(knots[i].ry);\n      y.push(knots[i + 1].ly);\n    }\n    x.push(knots[len - 1].x);\n    y.push(knots[len - 1].y);\n    if (isClosed) {\n      x.push(knots[len - 1].rx);\n      y.push(knots[len - 1].ry);\n      x.push(knots[0].lx);\n      y.push(knots[0].ly);\n      x.push(knots[0].x);\n      y.push(knots[0].y);\n    }\n    return [x, y];\n  }\n};\nexport default Mat.Metapost;","map":{"version":3,"names":["Type","Mat","Metapost","MP_ENDPOINT","MP_EXPLICIT","MP_GIVEN","MP_CURL","MP_OPEN","MP_END_CYCLE","UNITY","FRACTION_ONE","FRACTION_THREE","ONE_EIGHTY_DEG","Math","PI","THREE_SIXTY_DEG","EPS_SQ","make_choices","knots","dely","h","k","delx","n","q","p","s","cosine","t","sine","delta_x","delta_y","delta","psi","endless","next","rtype","x","y","ltype","set_left_curl","set_right_curl","rx","lx","ry","ly","length","push","mp_pyth_add","atan2","set_left_given","set_right_given","mp_solve_choices","aa","acc","vv","bb","ldelta","ee","ww","uu","lt","r","ff","theta","rt","dd","cc","ct_st","ct","st","cf_sf","cf","sf","i","k_idx","Array","mp_n_sin_cos","right_given","left_given","mp_set_controls","reduce_angle","abs","left_tension","right_tension","right_curl","mp_curl_ratio","pow","left_curl","z","cos","sin","ss","rr","mp_velocity","mp_ab_vs_cd","a","b","hypot","gamma","a_tension","b_tension","alpha","beta","min","c","d","sqrt","A","makeknots","tension","len","v","curve","point_list","controls","ii","val","obj","isClosed","direction","curl","hasOwnProperty","evaluate","exists","parseInt","isNaN","type","isArray"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/math/metapost.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n\n\n    Metapost/Hobby curves, see e.g. https://bosker.wordpress.com/2013/11/13/beyond-bezier-curves/\n\n    * Ported to Python for the project PyX. Copyright (C) 2011 Michael Schindler <m-schindler@users.sourceforge.net>\n    * Ported to javascript from the PyX implementation (https://pyx-project.org/) by Vlad-X.\n    * Adapted to JSXGraph and some code changes by Alfred Wassermann 2020.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\n    Internal functions of MetaPost\n    This file re-implements some of the functionality of MetaPost\n    (https://tug.org/metapost.html). MetaPost was developed by John D. Hobby and\n    others. The code of Metapost is in the public domain, which we understand as\n    an implicit permission to reuse the code here (see the comment at\n    https://www.gnu.org/licenses/license-list.html)\n\n    This file is based on the MetaPost version distributed by TeXLive:\n    svn://tug.org/texlive/trunk/Build/source/texk/web2c/mplibdir revision 22737 #\n    (2011-05-31)\n*/\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview In this file the namespace Math.Metapost is defined which holds algorithms translated from Metapost\n * by D.E. Knuth and J.D. Hobby.\n */\n\nimport Type from \"../utils/type\";\nimport Mat from \"./math\";\n\n/**\n * The JXG.Math.Metapost namespace holds algorithms translated from Metapost\n * by D.E. Knuth and J.D. Hobby.\n *\n * @name JXG.Math.Metapost\n * @exports Mat.Metapost as JXG.Math.Metapost\n * @namespace\n */\nMat.Metapost = {\n    MP_ENDPOINT: 0,\n    MP_EXPLICIT: 1,\n    MP_GIVEN: 2,\n    MP_CURL: 3,\n    MP_OPEN: 4,\n    MP_END_CYCLE: 5,\n\n    UNITY: 1.0,\n    // two: 2,\n    // fraction_half: 0.5,\n    FRACTION_ONE: 1.0,\n    FRACTION_THREE: 3.0,\n    ONE_EIGHTY_DEG: Math.PI,\n    THREE_SIXTY_DEG: 2 * Math.PI,\n    // EPSILON: 1e-5,\n    EPS_SQ: 1e-5 * 1e-5,\n\n    /**\n     * @private\n     */\n    make_choices: function (knots) {\n        var dely, h, k, delx, n, q, p, s, cosine, t, sine, delta_x, delta_y, delta, psi,\n            endless = true;\n\n        p = knots[0];\n        do {\n            if (!p) {\n                break;\n            }\n            q = p.next;\n\n            // Join two identical knots by setting the control points to the same\n            // coordinates.\n            // MP 291\n            if (\n                p.rtype > this.MP_EXPLICIT &&\n                (p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y) < this.EPS_SQ\n            ) {\n                p.rtype = this.MP_EXPLICIT;\n                if (p.ltype === this.MP_OPEN) {\n                    p.ltype = this.MP_CURL;\n                    p.set_left_curl(this.UNITY);\n                }\n\n                q.ltype = this.MP_EXPLICIT;\n                if (q.rtype === this.MP_OPEN) {\n                    q.rtype = this.MP_CURL;\n                    q.set_right_curl(this.UNITY);\n                }\n\n                p.rx = p.x;\n                q.lx = p.x;\n                p.ry = p.y;\n                q.ly = p.y;\n            }\n            p = q;\n        } while (p !== knots[0]);\n\n        // Find the first breakpoint, h, on the path\n        // MP 292\n        h = knots[0];\n        while (endless) {\n            if (h.ltype !== this.MP_OPEN || h.rtype !== this.MP_OPEN) {\n                break;\n            }\n            h = h.next;\n            if (h === knots[0]) {\n                h.ltype = this.MP_END_CYCLE;\n                break;\n            }\n        }\n\n        p = h;\n        while (endless) {\n            if (!p) {\n                break;\n            }\n\n            // Fill in the control points between p and the next breakpoint,\n            // then advance p to that breakpoint\n            // MP 299\n            q = p.next;\n            if (p.rtype >= this.MP_GIVEN) {\n                while (q.ltype === this.MP_OPEN && q.rtype === this.MP_OPEN) {\n                    q = q.next;\n                }\n\n                // Calculate the turning angles psi_ k and the distances d_{k,k+1};\n                // set n to the length of the path\n                // MP 302\n                k = 0;\n                s = p;\n                n = knots.length;\n\n                delta_x = [];\n                delta_y = [];\n                delta = [];\n                psi = [null];\n\n                // tuple([]) = tuple([[], [], [], [null]]);\n                while (endless) {\n                    t = s.next;\n                    // None;\n                    delta_x.push(t.x - s.x);\n                    delta_y.push(t.y - s.y);\n                    delta.push(this.mp_pyth_add(delta_x[k], delta_y[k]));\n                    if (k > 0) {\n                        sine = delta_y[k - 1] / delta[k - 1];\n                        cosine = delta_x[k - 1] / delta[k - 1];\n                        psi.push(\n                            Math.atan2(\n                                delta_y[k] * cosine - delta_x[k] * sine,\n                                delta_x[k] * cosine + delta_y[k] * sine\n                            )\n                        );\n                    }\n                    k++;\n                    s = t;\n                    if (s === q) {\n                        n = k;\n                    }\n                    if (k >= n && s.ltype !== this.MP_END_CYCLE) {\n                        break;\n                    }\n                }\n                if (k === n) {\n                    psi.push(0);\n                } else {\n                    psi.push(psi[1]);\n                }\n\n                // Remove open types at the breakpoints\n                // MP 303\n                if (q.ltype === this.MP_OPEN) {\n                    delx = q.rx - q.x;\n                    dely = q.ry - q.y;\n                    if (delx * delx + dely * dely < this.EPS_SQ) {\n                        q.ltype = this.MP_CURL;\n                        q.set_left_curl(this.UNITY);\n                    } else {\n                        q.ltype = this.MP_GIVEN;\n                        q.set_left_given(Math.atan2(dely, delx));\n                    }\n                }\n                if (p.rtype === this.MP_OPEN && p.ltype === this.MP_EXPLICIT) {\n                    delx = p.x - p.lx;\n                    dely = p.y - p.ly;\n                    if (delx * delx + dely * dely < this.EPS_SQ) {\n                        p.rtype = this.MP_CURL;\n                        p.set_right_curl(this.UNITY);\n                    } else {\n                        p.rtype = this.MP_GIVEN;\n                        p.set_right_given(Math.atan2(dely, delx));\n                    }\n                }\n                this.mp_solve_choices(p, q, n, delta_x, delta_y, delta, psi);\n            } else if (p.rtype === this.MP_ENDPOINT) {\n                // MP 294\n                p.rx = p.x;\n                p.ry = p.y;\n                q.lx = q.x;\n                q.ly = q.y;\n            }\n            p = q;\n\n            if (p === h) {\n                break;\n            }\n        }\n    },\n\n    /**\n     * Implements solve_choices form metapost\n     * MP 305\n     * @private\n     */\n    mp_solve_choices: function (p, q, n, delta_x, delta_y, delta, psi) {\n        var aa, acc, vv, bb, ldelta, ee, k,\n            s, ww, uu, lt, r, t, ff,\n            theta, rt, dd, cc, ct_st,\n            ct, st, cf_sf, cf, sf, i, k_idx,\n            endless = true;\n\n        ldelta = delta.length + 1;\n        uu = new Array(ldelta);\n        ww = new Array(ldelta);\n        vv = new Array(ldelta);\n        theta = new Array(ldelta);\n        for (i = 0; i < ldelta; i++) {\n            theta[i] = vv[i] = ww[i] = uu[i] = 0;\n        }\n        k = 0;\n        s = p;\n        r = 0;\n        while (endless) {\n            t = s.next;\n            if (k === 0) {\n                // MP 306\n                if (s.rtype === this.MP_GIVEN) {\n                    // MP 314\n                    if (t.ltype === this.MP_GIVEN) {\n                        aa = Math.atan2(delta_y[0], delta_x[0]);\n                        ct_st = this.mp_n_sin_cos(p.right_given() - aa);\n                        ct = ct_st[0];\n                        st = ct_st[1];\n                        cf_sf = this.mp_n_sin_cos(q.left_given() - aa);\n                        cf = cf_sf[0];\n                        sf = cf_sf[1];\n                        this.mp_set_controls(p, q, delta_x[0], delta_y[0], st, ct, -sf, cf);\n                        return;\n                    }\n                    vv[0] = s.right_given() - Math.atan2(delta_y[0], delta_x[0]);\n                    vv[0] = this.reduce_angle(vv[0]);\n                    uu[0] = 0;\n                    ww[0] = 0;\n                } else if (s.rtype === this.MP_CURL) {\n                    // MP 315\n                    if (t.ltype === this.MP_CURL) {\n                        p.rtype = this.MP_EXPLICIT;\n                        q.ltype = this.MP_EXPLICIT;\n                        lt = Math.abs(q.left_tension());\n                        rt = Math.abs(p.right_tension());\n                        ff = this.UNITY / (3.0 * rt);\n                        p.rx = p.x + delta_x[0] * ff;\n                        p.ry = p.y + delta_y[0] * ff;\n                        ff = this.UNITY / (3.0 * lt);\n                        q.lx = q.x - delta_x[0] * ff;\n                        q.ly = q.y - delta_y[0] * ff;\n                        return;\n                    }\n                    cc = s.right_curl();\n                    lt = Math.abs(t.left_tension());\n                    rt = Math.abs(s.right_tension());\n                    uu[0] = this.mp_curl_ratio(cc, rt, lt);\n                    vv[0] = -psi[1] * uu[0];\n                    ww[0] = 0;\n                } else {\n                    if (s.rtype === this.MP_OPEN) {\n                        uu[0] = 0;\n                        vv[0] = 0;\n                        ww[0] = this.FRACTION_ONE;\n                    }\n                }\n            } else {\n                if (s.ltype === this.MP_END_CYCLE || s.ltype === this.MP_OPEN) {\n                    // MP 308\n                    aa = this.UNITY / (3.0 * Math.abs(r.right_tension()) - this.UNITY);\n                    dd =\n                        delta[k] *\n                        (this.FRACTION_THREE - this.UNITY / Math.abs(r.right_tension()));\n                    bb = this.UNITY / (3 * Math.abs(t.left_tension()) - this.UNITY);\n                    ee =\n                        delta[k - 1] *\n                        (this.FRACTION_THREE - this.UNITY / Math.abs(t.left_tension()));\n                    cc = this.FRACTION_ONE - uu[k - 1] * aa;\n                    dd = dd * cc;\n                    lt = Math.abs(s.left_tension());\n                    rt = Math.abs(s.right_tension());\n                    if (lt < rt) {\n                        dd *= Math.pow(lt / rt, 2);\n                    } else {\n                        if (lt > rt) {\n                            ee *= Math.pow(rt / lt, 2);\n                        }\n                    }\n                    ff = ee / (ee + dd);\n                    uu[k] = ff * bb;\n                    acc = -psi[k + 1] * uu[k];\n                    if (r.rtype === this.MP_CURL) {\n                        ww[k] = 0;\n                        vv[k] = acc - psi[1] * (this.FRACTION_ONE - ff);\n                    } else {\n                        ff = (this.FRACTION_ONE - ff) / cc;\n                        acc = acc - psi[k] * ff;\n                        ff = ff * aa;\n                        vv[k] = acc - vv[k - 1] * ff;\n                        ww[k] = -ww[k - 1] * ff;\n                    }\n                    if (s.ltype === this.MP_END_CYCLE) {\n                        aa = 0;\n                        bb = this.FRACTION_ONE;\n                        while (endless) {\n                            k -= 1;\n                            if (k === 0) {\n                                k = n;\n                            }\n                            aa = vv[k] - aa * uu[k];\n                            bb = ww[k] - bb * uu[k];\n                            if (k === n) {\n                                break;\n                            }\n                        }\n                        aa = aa / (this.FRACTION_ONE - bb);\n                        theta[n] = aa;\n                        vv[0] = aa;\n                        // k_val = range(1, n);\n                        // for (k_idx in k_val) {\n                        // k = k_val[k_idx];\n                        for (k_idx = 1; k_idx < n; k_idx++) {\n                            vv[k_idx] = vv[k_idx] + aa * ww[k_idx];\n                        }\n                        break;\n                    }\n                } else {\n                    if (s.ltype === this.MP_CURL) {\n                        cc = s.left_curl();\n                        lt = Math.abs(s.left_tension());\n                        rt = Math.abs(r.right_tension());\n                        ff = this.mp_curl_ratio(cc, lt, rt);\n                        theta[n] = -(vv[n - 1] * ff) / (this.FRACTION_ONE - ff * uu[n - 1]);\n                        break;\n                    }\n                    if (s.ltype === this.MP_GIVEN) {\n                        theta[n] = s.left_given() - Math.atan2(delta_y[n - 1], delta_x[n - 1]);\n                        theta[n] = this.reduce_angle(theta[n]);\n                        break;\n                    }\n                }\n            }\n            r = s;\n            s = t;\n            k += 1;\n        }\n\n        // MP 318\n        for (k = n - 1; k > -1; k--) {\n            theta[k] = vv[k] - theta[k + 1] * uu[k];\n        }\n\n        s = p;\n        k = 0;\n        while (endless) {\n            t = s.next;\n            ct_st = this.mp_n_sin_cos(theta[k]);\n            ct = ct_st[0];\n            st = ct_st[1];\n            cf_sf = this.mp_n_sin_cos(-psi[k + 1] - theta[k + 1]);\n            cf = cf_sf[0];\n            sf = cf_sf[1];\n            this.mp_set_controls(s, t, delta_x[k], delta_y[k], st, ct, sf, cf);\n            k++;\n            s = t;\n            if (k === n) {\n                break;\n            }\n        }\n    },\n\n    /**\n     * @private\n     */\n    mp_n_sin_cos: function (z) {\n        return [Math.cos(z), Math.sin(z)];\n    },\n\n    /**\n     * @private\n     */\n    mp_set_controls: function (p, q, delta_x, delta_y, st, ct, sf, cf) {\n        var rt, ss, lt, sine, rr;\n        lt = Math.abs(q.left_tension());\n        rt = Math.abs(p.right_tension());\n        rr = this.mp_velocity(st, ct, sf, cf, rt);\n        ss = this.mp_velocity(sf, cf, st, ct, lt);\n\n        // console.log('lt rt rr ss', lt, rt, rr, ss);\n        if (p.right_tension() < 0 || q.left_tension() < 0) {\n            if ((st >= 0 && sf >= 0) || (st <= 0 && sf <= 0)) {\n                sine = Math.abs(st) * cf + Math.abs(sf) * ct;\n                if (sine > 0) {\n                    sine *= 1.00024414062;\n                    if (p.right_tension() < 0) {\n                        if (this.mp_ab_vs_cd(Math.abs(sf), this.FRACTION_ONE, rr, sine) < 0) {\n                            rr = Math.abs(sf) / sine;\n                        }\n                    }\n                    if (q.left_tension() < 0) {\n                        if (this.mp_ab_vs_cd(Math.abs(st), this.FRACTION_ONE, ss, sine) < 0) {\n                            ss = Math.abs(st) / sine;\n                        }\n                    }\n                }\n            }\n        }\n        p.rx = p.x + (delta_x * ct - delta_y * st) * rr;\n        p.ry = p.y + (delta_y * ct + delta_x * st) * rr;\n        q.lx = q.x - (delta_x * cf + delta_y * sf) * ss;\n        q.ly = q.y - (delta_y * cf - delta_x * sf) * ss;\n        p.rtype = this.MP_EXPLICIT;\n        q.ltype = this.MP_EXPLICIT;\n    },\n\n    /**\n     * @private\n     */\n    mp_pyth_add: function (a, b) {\n        return Mat.hypot(a, b);\n    },\n\n    /**\n     *\n     * @private\n     */\n    mp_curl_ratio: function (gamma, a_tension, b_tension) {\n        var alpha = 1.0 / a_tension,\n            beta = 1.0 / b_tension;\n\n        return Math.min(\n            4.0,\n            ((3.0 - alpha) * alpha * alpha * gamma + beta * beta * beta) /\n            (alpha * alpha * alpha * gamma + (3.0 - beta) * beta * beta)\n        );\n    },\n\n    /**\n     * @private\n     */\n    mp_ab_vs_cd: function (a, b, c, d) {\n        if (a * b === c * d) {\n            return 0;\n        }\n        if (a * b > c * d) {\n            return 1;\n        }\n        return -1;\n    },\n\n    /**\n     * @private\n     */\n    mp_velocity: function (st, ct, sf, cf, t) {\n        return Math.min(\n            4.0,\n            (2.0 + Math.sqrt(2) * (st - sf / 16.0) * (sf - st / 16.0) * (ct - cf)) /\n            (1.5 * t * (2 + (Math.sqrt(5) - 1) * ct + (3 - Math.sqrt(5)) * cf))\n        );\n    },\n\n    /**\n     * @private\n     * @param {Number} A\n     */\n    reduce_angle: function (A) {\n        if (Math.abs(A) > this.ONE_EIGHTY_DEG) {\n            if (A > 0) {\n                A -= this.THREE_SIXTY_DEG;\n            } else {\n                A += this.THREE_SIXTY_DEG;\n            }\n        }\n        return A;\n    },\n\n    /**\n     *\n     * @private\n     * @param {Array} p\n     * @param {Number} tension\n     * @param {Boolean} cycle\n     */\n    makeknots: function (p, tension) {\n        var i, len,\n            knots = [];\n\n        len = p.length;\n        for (i = 0; i < len; i++) {\n            knots.push({\n                x: p[i][0],\n                y: p[i][1],\n                ltype: this.MP_OPEN,\n                rtype: this.MP_OPEN,\n                lx: false,\n                rx: false,\n                ly: tension,\n                ry: tension,\n                left_curl: function () {\n                    return this.lx || 0;\n                },\n                right_curl: function () {\n                    return this.rx || 0;\n                },\n                left_tension: function () {\n                    return this.ly || 1;\n                },\n                right_tension: function () {\n                    return this.ry || 1;\n                },\n                set_right_curl: function (v) {\n                    this.rx = v || 0;\n                },\n                set_left_curl: function (v) {\n                    this.lx = v || 0;\n                }\n            });\n        }\n\n        len = knots.length;\n        for (i = 0; i < len; i++) {\n            knots[i].next = knots[i + 1] || knots[i];\n            knots[i].set_right_given = knots[i].set_right_curl;\n            knots[i].set_left_given = knots[i].set_left_curl;\n            knots[i].right_given = knots[i].right_curl;\n            knots[i].left_given = knots[i].left_curl;\n        }\n        knots[len - 1].next = knots[0];\n\n        return knots;\n    },\n\n    /**\n     *\n     * @param {Array} point_list\n     * @param {Object} controls\n     *\n     * @returns {Array}\n     */\n    curve: function (point_list, controls) {\n        var knots, len, i, ii,\n            val, obj,\n            isClosed = false,\n            x = [],\n            y = [];\n\n        controls = controls || {\n            tension: 1,\n            direction: {},\n            curl: {},\n            isClosed: false\n        };\n\n        // Change default tension\n        val = 1;\n        if (controls.hasOwnProperty('tension')) {\n            val = Type.evaluate(controls.tension);\n        }\n\n        knots = this.makeknots(point_list, val);\n\n        len = knots.length;\n        if (Type.exists(controls.isClosed) && Type.evaluate(controls.isClosed)) {\n            isClosed = true;\n        }\n\n        if (!isClosed) {\n            knots[0].ltype = this.MP_ENDPOINT;\n            knots[0].rtype = this.MP_CURL;\n            knots[len - 1].rtype = this.MP_ENDPOINT;\n            knots[len - 1].ltype = this.MP_CURL;\n        }\n\n        // for (i in controls.direction) {\n        //     if (controls.direction.hasOwnProperty(i)) {\n        //         val = Type.evaluate(controls.direction[i]);\n        //         if (Type.isArray(val)) {\n        //             if (val[0] !== false) {\n        //                 knots[i].lx = (val[0] * Math.PI) / 180;\n        //                 knots[i].ltype = this.MP_GIVEN;\n        //             }\n        //             if (val[1] !== false) {\n        //                 knots[i].rx = (val[1] * Math.PI) / 180;\n        //                 knots[i].rtype = this.MP_GIVEN;\n        //             }\n        //         } else {\n        //             knots[i].lx = (val * Math.PI) / 180;\n        //             knots[i].rx = (val * Math.PI) / 180;\n        //             knots[i].ltype = knots[i].rtype = this.MP_GIVEN;\n        //         }\n        //     }\n        // }\n\n        // for (i in controls.curl) {\n        //     if (controls.curl.hasOwnProperty(i)) {\n        //         val = Type.evaluate(controls.curl[i]);\n        //         if (parseInt(i, 10) === 0) {\n        //             knots[i].rtype = this.MP_CURL;\n        //             knots[i].set_right_curl(val);\n        //         } else if (parseInt(i, 10) === len - 1) {\n        //             knots[i].ltype = this.MP_CURL;\n        //             knots[i].set_left_curl(val);\n        //         }\n        //     }\n        // }\n\n        // Set individual point control values\n        for (ii in controls) {\n            if (controls.hasOwnProperty(ii)) {\n                i = parseInt(ii, 10);\n                if (isNaN(i) || i < 0 || i >= len) {\n                    continue;\n                }\n\n                // Handle individual curl\n                obj = controls[i];\n                if (Type.exists(obj.type)) {\n                    switch (obj.type) {\n                        case 'curl':\n                            val = Type.evaluate(obj.curl);\n                            if (i === 0) {\n                                knots[i].rtype = this.MP_CURL;\n                                knots[i].set_right_curl(val);\n                            } else if (i === len - 1) {\n                                knots[i].ltype = this.MP_CURL;\n                                knots[i].set_left_curl(val);\n                            } else {\n                                knots[i].ltype = this.MP_CURL;\n                                knots[i].rtype = this.MP_CURL;\n                                knots[i].lx = val;\n                                knots[i].rx = val;\n                            }\n                            break;\n                        }\n                    }\n\n                    // Handle individual directions\n                    if (Type.exists(obj.direction)) {\n                        val = Type.evaluate(obj.direction);\n                        if (Type.isArray(val)) {\n                            if (val[0] !== false) {\n                                knots[i].lx = (val[0] * Math.PI) / 180;\n                                knots[i].ltype = this.MP_GIVEN;\n                            }\n                            if (val[1] !== false) {\n                                knots[i].rx = (val[1] * Math.PI) / 180;\n                                knots[i].rtype = this.MP_GIVEN;\n                            }\n                        } else {\n                            knots[i].lx = (val * Math.PI) / 180;\n                            knots[i].rx = (val * Math.PI) / 180;\n                            knots[i].ltype = knots[i].rtype = this.MP_GIVEN;\n                        }\n                    }\n\n                    // Handle individual tension\n                    if (Type.exists(obj.tension)) {\n                        val = Type.evaluate(obj.tension);\n                        if (Type.isArray(val)) {\n                            if (val[0] !== false) {\n                                knots[i].ly = Type.evaluate(val[0]);\n                            }\n                            if (val[1] !== false) {\n                                knots[i].ry = Type.evaluate(val[1]);\n                            }\n                        } else {\n                            knots[i].ly = val;\n                            knots[i].ry = val;\n                        }\n                    }\n                }\n            }\n\n            // Generate ths Bezier curve\n            this.make_choices(knots);\n\n            // Return the coordinates\n            for (i = 0; i < len - 1; i++) {\n                x.push(knots[i].x);\n                x.push(knots[i].rx);\n                x.push(knots[i + 1].lx);\n                y.push(knots[i].y);\n                y.push(knots[i].ry);\n                y.push(knots[i + 1].ly);\n            }\n            x.push(knots[len - 1].x);\n            y.push(knots[len - 1].y);\n\n            if (isClosed) {\n                x.push(knots[len - 1].rx);\n                y.push(knots[len - 1].ry);\n                x.push(knots[0].lx);\n                y.push(knots[0].ly);\n                x.push(knots[0].x);\n                y.push(knots[0].y);\n            }\n\n            return [x, y];\n        }\n    };\n\n    export default Mat.Metapost;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}