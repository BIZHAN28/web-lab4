{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG:true, define: true, ActiveXObject:true, jxgBinFileReader:true, DOMParser:true, XMLHttpRequest:true, document:true, navigator:true*/\n/*jslint nomen: true, plusplus: true*/\n\nimport JXG from \"../jxg\";\nimport Env from \"../utils/env\";\nimport Type from \"../utils/type\";\nimport Encoding from \"../utils/encoding\";\nimport Base64 from \"../utils/base64\";\n\n/**\n * The FileReader object bundles the file input capabilities of JSXGraph.\n */\nJXG.FileReader = {\n  /**\n   *\n   * @param {String} url\n   * @param {JXG.Board} board\n   * @param {String} format\n   * @param {Boolean} async\n   * @param {Function} callback\n   *\n   * @private\n   */\n  handleRemoteFile: function (url, board, format, async, encoding, callback) {\n    var request = false;\n    try {\n      request = new XMLHttpRequest();\n      if (format.toLowerCase() === \"raw\") {\n        request.overrideMimeType(\"text/plain; charset=\" + encoding);\n      } else {\n        request.overrideMimeType(\"text/xml; charset=\" + encoding);\n      }\n    } catch (e) {\n      try {\n        request = new ActiveXObject(\"Msxml2.XMLHTTP\");\n      } catch (ex) {\n        try {\n          request = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        } catch (exc) {\n          request = false;\n        }\n      }\n    }\n    if (!request) {\n      JXG.debug(\"AJAX not activated!\");\n      return;\n    }\n    request.open(\"GET\", url, async);\n    if (format.toLowerCase() === \"raw\") {\n      this.cbp = function () {\n        var req = request;\n        if (req.readyState === 4) {\n          board(req.responseText);\n        }\n      };\n    } else {\n      this.cbp = function () {\n        var req = request,\n          text = \"\";\n        if (req.readyState === 4) {\n          // Hack for ancient IEs:\n          // We use the Visual Basic stuff from below.\n          if (Type.exists(req.responseStream) && (\n          // PK: zip, geogebra\n          // 31: gzip, cinderella\n          req.responseText.slice(0, 2) === \"PK\" || Encoding.asciiCharCodeAt(req.responseText.slice(0, 1), 0) === 31)) {\n            // After this, text contains the binary? zip-compressed string\n            text = Base64.decode(jxgBinFileReader(req));\n          } else {\n            // This is for all browsers except ancient IEs.\n            text = req.responseText;\n            // console.log(text);\n          }\n          this.parseString(text, board, format, callback);\n        }\n      };\n    }\n    this.cb = Type.bind(this.cbp, this);\n    // Old style\n    request.onreadystatechange = this.cb;\n    try {\n      request.send(null);\n    } catch (ex2) {\n      throw new Error(\"JSXGraph: A problem occurred while trying to read remote file '\" + url + \"'.\");\n    }\n  },\n  /**\n   *\n   * @param {Blob} url The Blob or File from which to read\n   * @param {JXG.Board} board\n   * @param {String} format\n   * @param {Boolean} async\n   * @param {Function} callback\n   *\n   * @private\n   */\n  handleLocalFile: function (url, board, format, async, encoding, callback) {\n    if (!Type.exists(async)) {\n      async = true;\n    }\n    if (format.toLowerCase() === \"raw\") {\n      this.cbp = function (e) {\n        board(e.target.result);\n      };\n    } else {\n      this.cbp = function (e) {\n        var text = e.target.result;\n        //console.log(text);\n        this.parseString(text, board, format, callback);\n      };\n    }\n    this.cb = Type.bind(this.cbp, this);\n    var reader = new FileReader();\n    reader.onload = this.cb;\n    if (format.toLowerCase() === \"raw\") {\n      reader.readAsText(url);\n    } else {\n      reader.readAsText(url, encoding);\n    }\n  },\n  /**\n   * Opens a file using the given URL and passes the contents to {@link JXG.FileReader#parseString}\n   * @param {String} url\n   * @param {JXG.Board|function} board Either a board or in case <tt>format</tt> equals 'raw' this has to be a callback function.\n   * @param {String} format The expected file format. Possible values are <dl>\n   * <dt>raw</dt><dd>Raw text file. In this case <tt>board</tt> has to be a callback function.</dd>\n   * <dt>geonext</dt><dd>Geonext File <a href=\"https://www.geonext.de\">https://www.geonext.de</a></dd>\n   * <dt>intergeo</dt><dd>Intergeo file format <a href=\"https://www.i2geo.net\">https://www.i2geo.net</a></dd>\n   * <dt>tracenpoche</dt><dd>Tracenpoche construction <a href=\"https://tracenpoche.sesamath.net/\">https://tracenpoche.sesamath.net/</a></dd>\n   * <dt>graph</dt><dd>Graph file</dd>\n   * <dt>digraph</dt><dd>DiGraph file</dd>\n   * <dt>geogebra</dt><dd>Geogebra File <a href=\"https://www.geogebra.org\">https://www.geogebra.org</a></dd>\n   * <dl><dt>cdy or cinderella</dt><dd>Cinderella (<a href=\"https://www.cinderella.de/\">https://www.cinderella.de</a></dd>\n   * </dl>\n   * @param {Boolean} async Call ajax asynchonously.\n   * @param {function} callback A function that is run when the board is ready.\n   */\n  parseFileContent: function (url, board, format, async, encoding, callback) {\n    if (Type.isString(url) || FileReader === undefined) {\n      this.handleRemoteFile(url, board, format, async, encoding, callback);\n    } else {\n      this.handleLocalFile(url, board, format, async, encoding, callback);\n    }\n  },\n  /**\n   * Parses a given string according to the file format given in format.\n   * @param {String} str Contents of the file.\n   * @param {JXG.Board} board The board the construction in the file should be loaded in.\n   * @param {String} format Possible values are <dl>\n   * <dt>raw</dt><dd>Raw text file. In this case <tt>board</tt> has to be a callback function.</dd>\n   * <dt>geonext</dt><dd>Geonext File <a href=\"https://www.geonext.de\">https://www.geonext.de</a></dd>\n   * <dt>intergeo</dt><dd>Intergeo file format <a href=\"https://www.i2geo.net\">https://www.i2geo.net</a></dd>\n   * <dt>tracenpoche</dt><dd>Tracenpoche construction <a href=\"https://tracenpoche.sesamath.net/\">https://tracenpoche.sesamath.net/</a></dd>\n   * <dt>graph</dt><dd>Graph file</dd>\n   * <dt>digraph</dt><dd>DiGraph file</dd>\n   * <dt>geogebra</dt><dd>Geogebra File <a href=\"https://www.geogebra.org\">https://www.geogebra.org</a></dd>\n   * <dl><dt>cdy or cinderella</dt><dd>Cinderella (<a href=\"https://www.cinderella.de/\">https://www.cinderella.de</a></dd>\n   * </dl>\n   * @param {function} callback\n   */\n  parseString: function (str, board, format, callback) {\n    var Reader, read;\n    format = format.toLowerCase();\n    Reader = JXG.readers[format];\n    if (Type.exists(Reader)) {\n      read = new Reader(board, str);\n      read.read();\n    } else if (format === \"jessiecode\") {} else {\n      throw new Error(\"JSXGraph: There is no reader available for '\" + format + \"'.\");\n    }\n    if (Type.isFunction(callback)) {\n      callback(board);\n    }\n  }\n};\n\n// The following code is vbscript. This is a workaround to enable binary data downloads via AJAX in\n// Microsoft Internet Explorer.\n\n/*jslint evil:true, es5:true, white:true*/\n/*jshint multistr:true*/\nif (!Env.isMetroApp() && Env.isBrowser && typeof navigator === \"object\" && /msie/i.test(navigator.userAgent) && !/opera/i.test(navigator.userAgent) && document && document.write) {\n  document.write('<script type=\"text/vbscript\">\\n\\\nFunction Base64Encode(inData)\\n\\\n  Const Base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\\n\\\n  Dim cOut, sOut, I\\n\\\n  For I = 1 To LenB(inData) Step 3\\n\\\n    Dim nGroup, pOut, sGroup\\n\\\n    nGroup = &H10000 * AscB(MidB(inData, I, 1)) + _\\n\\\n      &H100 * MyASC(MidB(inData, I + 1, 1)) + MyASC(MidB(inData, I + 2, 1))\\n\\\n    nGroup = Oct(nGroup)\\n\\\n    nGroup = String(8 - Len(nGroup), \"0\") & nGroup\\n\\\n    pOut = Mid(Base64, CLng(\"&o\" & Mid(nGroup, 1, 2)) + 1, 1) + _\\n\\\n      Mid(Base64, CLng(\"&o\" & Mid(nGroup, 3, 2)) + 1, 1) + _\\n\\\n      Mid(Base64, CLng(\"&o\" & Mid(nGroup, 5, 2)) + 1, 1) + _\\n\\\n      Mid(Base64, CLng(\"&o\" & Mid(nGroup, 7, 2)) + 1, 1)\\n\\\n    sOut = sOut + pOut\\n\\\n  Next\\n\\\n  Select Case LenB(inData) Mod 3\\n\\\n    Case 1: \\'8 bit final\\n\\\n      sOut = Left(sOut, Len(sOut) - 2) + \"==\"\\n\\\n    Case 2: \\'16 bit final\\n\\\n      sOut = Left(sOut, Len(sOut) - 1) + \"=\"\\n\\\n  End Select\\n\\\n  Base64Encode = sOut\\n\\\nEnd Function\\n\\\n\\n\\\nFunction MyASC(OneChar)\\n\\\n  If OneChar = \"\" Then MyASC = 0 Else MyASC = AscB(OneChar)\\n\\\nEnd Function\\n\\\n\\n\\\nFunction jxgBinFileReader(xhr)\\n\\\n    Dim byteString\\n\\\n    Dim b64String\\n\\\n    Dim i\\n\\\n    byteString = xhr.responseBody\\n\\\n    ReDim byteArray(LenB(byteString))\\n\\\n    For i = 1 To LenB(byteString)\\n\\\n        byteArray(i-1) = AscB(MidB(byteString, i, 1))\\n\\\n    Next\\n\\\n    b64String = Base64Encode(byteString)\\n\\\n    jxgBinFileReader = b64String\\n\\\nEnd Function\\n\\\n</script>\\n');\n}\nexport default JXG.FileReader;","map":{"version":3,"names":["JXG","Env","Type","Encoding","Base64","FileReader","handleRemoteFile","url","board","format","async","encoding","callback","request","XMLHttpRequest","toLowerCase","overrideMimeType","e","ActiveXObject","ex","exc","debug","open","cbp","req","readyState","responseText","text","exists","responseStream","slice","asciiCharCodeAt","decode","jxgBinFileReader","parseString","cb","bind","onreadystatechange","send","ex2","Error","handleLocalFile","target","result","reader","onload","readAsText","parseFileContent","isString","undefined","str","Reader","read","readers","isFunction","isMetroApp","isBrowser","navigator","test","userAgent","document","write"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/reader/file.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG:true, define: true, ActiveXObject:true, jxgBinFileReader:true, DOMParser:true, XMLHttpRequest:true, document:true, navigator:true*/\n/*jslint nomen: true, plusplus: true*/\n\nimport JXG from \"../jxg\";\nimport Env from \"../utils/env\";\nimport Type from \"../utils/type\";\nimport Encoding from \"../utils/encoding\";\nimport Base64 from \"../utils/base64\";\n\n/**\n * The FileReader object bundles the file input capabilities of JSXGraph.\n */\nJXG.FileReader = {\n    /**\n     *\n     * @param {String} url\n     * @param {JXG.Board} board\n     * @param {String} format\n     * @param {Boolean} async\n     * @param {Function} callback\n     *\n     * @private\n     */\n    handleRemoteFile: function (url, board, format, async, encoding, callback) {\n        var request = false;\n\n        try {\n            request = new XMLHttpRequest();\n            if (format.toLowerCase() === \"raw\") {\n                request.overrideMimeType(\"text/plain; charset=\" + encoding);\n            } else {\n                request.overrideMimeType(\"text/xml; charset=\" + encoding);\n            }\n        } catch (e) {\n            try {\n                request = new ActiveXObject(\"Msxml2.XMLHTTP\");\n            } catch (ex) {\n                try {\n                    request = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } catch (exc) {\n                    request = false;\n                }\n            }\n        }\n        if (!request) {\n            JXG.debug(\"AJAX not activated!\");\n            return;\n        }\n\n        request.open(\"GET\", url, async);\n        if (format.toLowerCase() === \"raw\") {\n            this.cbp = function () {\n                var req = request;\n                if (req.readyState === 4) {\n                    board(req.responseText);\n                }\n            };\n        } else {\n            this.cbp = function () {\n                var req = request,\n                    text = \"\";\n\n                if (req.readyState === 4) {\n                    // Hack for ancient IEs:\n                    // We use the Visual Basic stuff from below.\n                    if (\n                        Type.exists(req.responseStream) &&\n                        // PK: zip, geogebra\n                        // 31: gzip, cinderella\n                        (req.responseText.slice(0, 2) === \"PK\" ||\n                            Encoding.asciiCharCodeAt(req.responseText.slice(0, 1), 0) === 31)\n                    ) {\n                        // After this, text contains the binary? zip-compressed string\n                        text = Base64.decode(jxgBinFileReader(req));\n                    } else {\n                        // This is for all browsers except ancient IEs.\n                        text = req.responseText;\n                        // console.log(text);\n                    }\n                    this.parseString(text, board, format, callback);\n                }\n            };\n        }\n\n        this.cb = Type.bind(this.cbp, this);\n        // Old style\n        request.onreadystatechange = this.cb;\n\n        try {\n            request.send(null);\n        } catch (ex2) {\n            throw new Error(\n                \"JSXGraph: A problem occurred while trying to read remote file '\" + url + \"'.\"\n            );\n        }\n    },\n\n    /**\n     *\n     * @param {Blob} url The Blob or File from which to read\n     * @param {JXG.Board} board\n     * @param {String} format\n     * @param {Boolean} async\n     * @param {Function} callback\n     *\n     * @private\n     */\n    handleLocalFile: function (url, board, format, async, encoding, callback) {\n        if (!Type.exists(async)) {\n            async = true;\n        }\n\n        if (format.toLowerCase() === \"raw\") {\n            this.cbp = function (e) {\n                board(e.target.result);\n            };\n        } else {\n            this.cbp = function (e) {\n                var text = e.target.result;\n                //console.log(text);\n                this.parseString(text, board, format, callback);\n            };\n        }\n\n        this.cb = Type.bind(this.cbp, this);\n\n        var reader = new FileReader();\n        reader.onload = this.cb;\n        if (format.toLowerCase() === \"raw\") {\n            reader.readAsText(url);\n        } else {\n            reader.readAsText(url, encoding);\n        }\n    },\n\n    /**\n     * Opens a file using the given URL and passes the contents to {@link JXG.FileReader#parseString}\n     * @param {String} url\n     * @param {JXG.Board|function} board Either a board or in case <tt>format</tt> equals 'raw' this has to be a callback function.\n     * @param {String} format The expected file format. Possible values are <dl>\n     * <dt>raw</dt><dd>Raw text file. In this case <tt>board</tt> has to be a callback function.</dd>\n     * <dt>geonext</dt><dd>Geonext File <a href=\"https://www.geonext.de\">https://www.geonext.de</a></dd>\n     * <dt>intergeo</dt><dd>Intergeo file format <a href=\"https://www.i2geo.net\">https://www.i2geo.net</a></dd>\n     * <dt>tracenpoche</dt><dd>Tracenpoche construction <a href=\"https://tracenpoche.sesamath.net/\">https://tracenpoche.sesamath.net/</a></dd>\n     * <dt>graph</dt><dd>Graph file</dd>\n     * <dt>digraph</dt><dd>DiGraph file</dd>\n     * <dt>geogebra</dt><dd>Geogebra File <a href=\"https://www.geogebra.org\">https://www.geogebra.org</a></dd>\n     * <dl><dt>cdy or cinderella</dt><dd>Cinderella (<a href=\"https://www.cinderella.de/\">https://www.cinderella.de</a></dd>\n     * </dl>\n     * @param {Boolean} async Call ajax asynchonously.\n     * @param {function} callback A function that is run when the board is ready.\n     */\n    parseFileContent: function (url, board, format, async, encoding, callback) {\n        if (Type.isString(url) || FileReader === undefined) {\n            this.handleRemoteFile(url, board, format, async, encoding, callback);\n        } else {\n            this.handleLocalFile(url, board, format, async, encoding, callback);\n        }\n    },\n\n    /**\n     * Parses a given string according to the file format given in format.\n     * @param {String} str Contents of the file.\n     * @param {JXG.Board} board The board the construction in the file should be loaded in.\n     * @param {String} format Possible values are <dl>\n     * <dt>raw</dt><dd>Raw text file. In this case <tt>board</tt> has to be a callback function.</dd>\n     * <dt>geonext</dt><dd>Geonext File <a href=\"https://www.geonext.de\">https://www.geonext.de</a></dd>\n     * <dt>intergeo</dt><dd>Intergeo file format <a href=\"https://www.i2geo.net\">https://www.i2geo.net</a></dd>\n     * <dt>tracenpoche</dt><dd>Tracenpoche construction <a href=\"https://tracenpoche.sesamath.net/\">https://tracenpoche.sesamath.net/</a></dd>\n     * <dt>graph</dt><dd>Graph file</dd>\n     * <dt>digraph</dt><dd>DiGraph file</dd>\n     * <dt>geogebra</dt><dd>Geogebra File <a href=\"https://www.geogebra.org\">https://www.geogebra.org</a></dd>\n     * <dl><dt>cdy or cinderella</dt><dd>Cinderella (<a href=\"https://www.cinderella.de/\">https://www.cinderella.de</a></dd>\n     * </dl>\n     * @param {function} callback\n     */\n    parseString: function (str, board, format, callback) {\n        var Reader, read;\n\n        format = format.toLowerCase();\n        Reader = JXG.readers[format];\n\n        if (Type.exists(Reader)) {\n            read = new Reader(board, str);\n            read.read();\n        } else if (format === \"jessiecode\") {\n        } else {\n            throw new Error(\"JSXGraph: There is no reader available for '\" + format + \"'.\");\n        }\n\n        if (Type.isFunction(callback)) {\n            callback(board);\n        }\n    }\n};\n\n// The following code is vbscript. This is a workaround to enable binary data downloads via AJAX in\n// Microsoft Internet Explorer.\n\n/*jslint evil:true, es5:true, white:true*/\n/*jshint multistr:true*/\nif (\n    !Env.isMetroApp() &&\n    Env.isBrowser &&\n    typeof navigator === \"object\" &&\n    /msie/i.test(navigator.userAgent) &&\n    !/opera/i.test(navigator.userAgent) &&\n    document &&\n    document.write\n) {\n    document.write(\n        '<script type=\"text/vbscript\">\\n\\\nFunction Base64Encode(inData)\\n\\\n  Const Base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\\n\\\n  Dim cOut, sOut, I\\n\\\n  For I = 1 To LenB(inData) Step 3\\n\\\n    Dim nGroup, pOut, sGroup\\n\\\n    nGroup = &H10000 * AscB(MidB(inData, I, 1)) + _\\n\\\n      &H100 * MyASC(MidB(inData, I + 1, 1)) + MyASC(MidB(inData, I + 2, 1))\\n\\\n    nGroup = Oct(nGroup)\\n\\\n    nGroup = String(8 - Len(nGroup), \"0\") & nGroup\\n\\\n    pOut = Mid(Base64, CLng(\"&o\" & Mid(nGroup, 1, 2)) + 1, 1) + _\\n\\\n      Mid(Base64, CLng(\"&o\" & Mid(nGroup, 3, 2)) + 1, 1) + _\\n\\\n      Mid(Base64, CLng(\"&o\" & Mid(nGroup, 5, 2)) + 1, 1) + _\\n\\\n      Mid(Base64, CLng(\"&o\" & Mid(nGroup, 7, 2)) + 1, 1)\\n\\\n    sOut = sOut + pOut\\n\\\n  Next\\n\\\n  Select Case LenB(inData) Mod 3\\n\\\n    Case 1: \\'8 bit final\\n\\\n      sOut = Left(sOut, Len(sOut) - 2) + \"==\"\\n\\\n    Case 2: \\'16 bit final\\n\\\n      sOut = Left(sOut, Len(sOut) - 1) + \"=\"\\n\\\n  End Select\\n\\\n  Base64Encode = sOut\\n\\\nEnd Function\\n\\\n\\n\\\nFunction MyASC(OneChar)\\n\\\n  If OneChar = \"\" Then MyASC = 0 Else MyASC = AscB(OneChar)\\n\\\nEnd Function\\n\\\n\\n\\\nFunction jxgBinFileReader(xhr)\\n\\\n    Dim byteString\\n\\\n    Dim b64String\\n\\\n    Dim i\\n\\\n    byteString = xhr.responseBody\\n\\\n    ReDim byteArray(LenB(byteString))\\n\\\n    For i = 1 To LenB(byteString)\\n\\\n        byteArray(i-1) = AscB(MidB(byteString, i, 1))\\n\\\n    Next\\n\\\n    b64String = Base64Encode(byteString)\\n\\\n    jxgBinFileReader = b64String\\n\\\nEnd Function\\n\\\n</script>\\n'\n    );\n}\n\nexport default JXG.FileReader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}