{"ast":null,"code":"/*global JXG: true, define: true, escape: true, unescape: true*/\n/*jslint nomen: true, plusplus: true, bitwise: true*/\n\nimport JXG from \"../jxg\";\n\n// constants\nvar UTF8_ACCEPT = 0,\n  // UTF8_REJECT = 12,\n  UTF8D = [\n  // The first part of the table maps bytes to character classes that\n  // to reduce the size of the transition table and create bitmasks.\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 11, 6, 6, 6, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  // The second part is a transition table that maps a combination\n  // of a state of the automaton and a character class to a state.\n  0, 12, 24, 36, 60, 96, 84, 12, 12, 12, 48, 72, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 12, 12, 12, 12, 12, 0, 12, 0, 12, 12, 12, 24, 12, 12, 12, 12, 12, 24, 12, 24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 36, 12, 36, 12, 12, 12, 36, 12, 12, 12, 12, 12, 36, 12, 36, 12, 12, 12, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12];\n\n// Util namespace\nJXG.Util = JXG.Util || {};\n\n/**\n * UTF8 encoding routines\n * @namespace\n */\nJXG.Util.UTF8 = {\n  /**\n   * Encode a string to utf-8.\n   * @param {String} string\n   * @returns {String} utf8 encoded string\n   */\n  encode: function (string) {\n    var n,\n      c,\n      utftext = \"\",\n      len = string.length;\n    string = string.replace(/\\r\\n/g, \"\\n\");\n\n    // See\n    // http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html\n    if (typeof unescape === \"function\" && typeof encodeURIComponent === \"function\") {\n      return unescape(encodeURIComponent(string));\n    }\n    for (n = 0; n < len; n++) {\n      c = string.charCodeAt(n);\n      if (c < 128) {\n        utftext += String.fromCharCode(c);\n      } else if (c > 127 && c < 2048) {\n        utftext += String.fromCharCode(c >> 6 | 192);\n        utftext += String.fromCharCode(c & 63 | 128);\n      } else {\n        utftext += String.fromCharCode(c >> 12 | 224);\n        utftext += String.fromCharCode(c >> 6 & 63 | 128);\n        utftext += String.fromCharCode(c & 63 | 128);\n      }\n    }\n    return utftext;\n  },\n  /**\n   * Decode a string from utf-8.\n   * @param {String} utftext to decode\n   * @returns {String} utf8 decoded string\n   */\n  decode: function (utftext) {\n    /*\n             The following code is a translation from C99 to JavaScript.\n              The original C99 code can be found at\n                https://bjoern.hoehrmann.de/utf-8/decoder/dfa/\n              Original copyright note:\n              Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n              License: MIT License (see LICENSE.MIT)\n        */\n\n    var i,\n      charCode,\n      type,\n      j = 0,\n      codepoint = 0,\n      state = UTF8_ACCEPT,\n      chars = [],\n      len = utftext.length,\n      results = [];\n    for (i = 0; i < len; i++) {\n      charCode = utftext.charCodeAt(i);\n      type = UTF8D[charCode];\n      if (state !== UTF8_ACCEPT) {\n        codepoint = charCode & 0x3f | codepoint << 6;\n      } else {\n        codepoint = 0xff >> type & charCode;\n      }\n      state = UTF8D[256 + state + type];\n      if (state === UTF8_ACCEPT) {\n        if (codepoint > 0xffff) {\n          chars.push(0xd7c0 + (codepoint >> 10), 0xdc00 + (codepoint & 0x3ff));\n        } else {\n          chars.push(codepoint);\n        }\n        j++;\n        if (j % 10000 === 0) {\n          results.push(String.fromCharCode.apply(null, chars));\n          chars = [];\n        }\n      }\n    }\n    results.push(String.fromCharCode.apply(null, chars));\n    return results.join(\"\");\n  },\n  /**\n   * Extends the standard charCodeAt() method of the String class to find the ASCII char code of\n   * a character at a given position in a UTF8 encoded string.\n   * @param {String} str\n   * @param {Number} i position of the character\n   * @returns {Number}\n   */\n  asciiCharCodeAt: function (str, i) {\n    var c = str.charCodeAt(i);\n    if (c > 255) {\n      switch (c) {\n        case 8364:\n          c = 128;\n          break;\n        case 8218:\n          c = 130;\n          break;\n        case 402:\n          c = 131;\n          break;\n        case 8222:\n          c = 132;\n          break;\n        case 8230:\n          c = 133;\n          break;\n        case 8224:\n          c = 134;\n          break;\n        case 8225:\n          c = 135;\n          break;\n        case 710:\n          c = 136;\n          break;\n        case 8240:\n          c = 137;\n          break;\n        case 352:\n          c = 138;\n          break;\n        case 8249:\n          c = 139;\n          break;\n        case 338:\n          c = 140;\n          break;\n        case 381:\n          c = 142;\n          break;\n        case 8216:\n          c = 145;\n          break;\n        case 8217:\n          c = 146;\n          break;\n        case 8220:\n          c = 147;\n          break;\n        case 8221:\n          c = 148;\n          break;\n        case 8226:\n          c = 149;\n          break;\n        case 8211:\n          c = 150;\n          break;\n        case 8212:\n          c = 151;\n          break;\n        case 732:\n          c = 152;\n          break;\n        case 8482:\n          c = 153;\n          break;\n        case 353:\n          c = 154;\n          break;\n        case 8250:\n          c = 155;\n          break;\n        case 339:\n          c = 156;\n          break;\n        case 382:\n          c = 158;\n          break;\n        case 376:\n          c = 159;\n          break;\n        default:\n          break;\n      }\n    }\n    return c;\n  }\n};\nexport default JXG.Util.UTF8;","map":{"version":3,"names":["JXG","UTF8_ACCEPT","UTF8D","Util","UTF8","encode","string","n","c","utftext","len","length","replace","unescape","encodeURIComponent","charCodeAt","String","fromCharCode","decode","i","charCode","type","j","codepoint","state","chars","results","push","apply","join","asciiCharCodeAt","str"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/utils/encoding.js"],"sourcesContent":["/*global JXG: true, define: true, escape: true, unescape: true*/\n/*jslint nomen: true, plusplus: true, bitwise: true*/\n\nimport JXG from \"../jxg\";\n\n// constants\nvar UTF8_ACCEPT = 0,\n    // UTF8_REJECT = 12,\n    UTF8D = [\n        // The first part of the table maps bytes to character classes that\n        // to reduce the size of the transition table and create bitmasks.\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9,\n        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 3, 3, 3, 3, 3, 3, 3,\n        3, 3, 3, 3, 3, 4, 3, 3, 11, 6, 6, 6, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n\n        // The second part is a transition table that maps a combination\n        // of a state of the automaton and a character class to a state.\n        0, 12, 24, 36, 60, 96, 84, 12, 12, 12, 48, 72, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n        12, 12, 12, 0, 12, 12, 12, 12, 12, 0, 12, 0, 12, 12, 12, 24, 12, 12, 12, 12, 12, 24, 12,\n        24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12, 24, 12, 12, 12, 12, 12,\n        12, 12, 24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 36, 12, 36, 12, 12, 12, 36, 12, 12, 12,\n        12, 12, 36, 12, 36, 12, 12, 12, 36, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n    ];\n\n// Util namespace\nJXG.Util = JXG.Util || {};\n\n/**\n * UTF8 encoding routines\n * @namespace\n */\nJXG.Util.UTF8 = {\n    /**\n     * Encode a string to utf-8.\n     * @param {String} string\n     * @returns {String} utf8 encoded string\n     */\n    encode: function (string) {\n        var n,\n            c,\n            utftext = \"\",\n            len = string.length;\n\n        string = string.replace(/\\r\\n/g, \"\\n\");\n\n        // See\n        // http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html\n        if (typeof unescape === \"function\" && typeof encodeURIComponent === \"function\") {\n            return unescape(encodeURIComponent(string));\n        }\n\n        for (n = 0; n < len; n++) {\n            c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if (c > 127 && c < 2048) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    },\n\n    /**\n     * Decode a string from utf-8.\n     * @param {String} utftext to decode\n     * @returns {String} utf8 decoded string\n     */\n    decode: function (utftext) {\n        /*\n                 The following code is a translation from C99 to JavaScript.\n\n                 The original C99 code can be found at\n                    https://bjoern.hoehrmann.de/utf-8/decoder/dfa/\n\n                 Original copyright note:\n\n                 Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n\n                 License: MIT License (see LICENSE.MIT)\n            */\n\n        var i,\n            charCode,\n            type,\n            j = 0,\n            codepoint = 0,\n            state = UTF8_ACCEPT,\n            chars = [],\n            len = utftext.length,\n            results = [];\n\n        for (i = 0; i < len; i++) {\n            charCode = utftext.charCodeAt(i);\n            type = UTF8D[charCode];\n\n            if (state !== UTF8_ACCEPT) {\n                codepoint = (charCode & 0x3f) | (codepoint << 6);\n            } else {\n                codepoint = (0xff >> type) & charCode;\n            }\n\n            state = UTF8D[256 + state + type];\n\n            if (state === UTF8_ACCEPT) {\n                if (codepoint > 0xffff) {\n                    chars.push(0xd7c0 + (codepoint >> 10), 0xdc00 + (codepoint & 0x3ff));\n                } else {\n                    chars.push(codepoint);\n                }\n\n                j++;\n\n                if (j % 10000 === 0) {\n                    results.push(String.fromCharCode.apply(null, chars));\n                    chars = [];\n                }\n            }\n        }\n        results.push(String.fromCharCode.apply(null, chars));\n        return results.join(\"\");\n    },\n\n    /**\n     * Extends the standard charCodeAt() method of the String class to find the ASCII char code of\n     * a character at a given position in a UTF8 encoded string.\n     * @param {String} str\n     * @param {Number} i position of the character\n     * @returns {Number}\n     */\n    asciiCharCodeAt: function (str, i) {\n        var c = str.charCodeAt(i);\n\n        if (c > 255) {\n            switch (c) {\n                case 8364:\n                    c = 128;\n                    break;\n                case 8218:\n                    c = 130;\n                    break;\n                case 402:\n                    c = 131;\n                    break;\n                case 8222:\n                    c = 132;\n                    break;\n                case 8230:\n                    c = 133;\n                    break;\n                case 8224:\n                    c = 134;\n                    break;\n                case 8225:\n                    c = 135;\n                    break;\n                case 710:\n                    c = 136;\n                    break;\n                case 8240:\n                    c = 137;\n                    break;\n                case 352:\n                    c = 138;\n                    break;\n                case 8249:\n                    c = 139;\n                    break;\n                case 338:\n                    c = 140;\n                    break;\n                case 381:\n                    c = 142;\n                    break;\n                case 8216:\n                    c = 145;\n                    break;\n                case 8217:\n                    c = 146;\n                    break;\n                case 8220:\n                    c = 147;\n                    break;\n                case 8221:\n                    c = 148;\n                    break;\n                case 8226:\n                    c = 149;\n                    break;\n                case 8211:\n                    c = 150;\n                    break;\n                case 8212:\n                    c = 151;\n                    break;\n                case 732:\n                    c = 152;\n                    break;\n                case 8482:\n                    c = 153;\n                    break;\n                case 353:\n                    c = 154;\n                    break;\n                case 8250:\n                    c = 155;\n                    break;\n                case 339:\n                    c = 156;\n                    break;\n                case 382:\n                    c = 158;\n                    break;\n                case 376:\n                    c = 159;\n                    break;\n                default:\n                    break;\n            }\n        }\n        return c;\n    }\n};\n\nexport default JXG.Util.UTF8;\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,GAAG,MAAM,QAAQ;;AAExB;AACA,IAAIC,WAAW,GAAG,CAAC;EACf;EACAC,KAAK,GAAG;EACJ;EACA;EACA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACrF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EAEvE;EACA;EACA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACrF,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACvF,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtF,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtF,EAAE,EAAE,EAAE,EAAE,E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"},"metadata":{},"sourceType":"module","externalDependencies":[]}