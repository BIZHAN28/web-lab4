{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Carsten Miller,\n        Andreas Walter,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n/*global JXG:true, define: true*/\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\n/**\n * Constructs a new GeometryElement3D object.\n * @class This is the basic class for 3D geometry elements like Point3D and Line3D.\n * @constructor\n * @param {string} elType\n */\nJXG.GeometryElement3D = function (view, elType) {\n  this.elType = elType;\n  this.id = this.board.setId(this, elType);\n\n  /**\n   * Pointer to the view3D in which the element is constructed\n   * @type JXG.View3D\n   * @private\n   */\n  this.view = view;\n\n  /**\n   * Link to the 2D element(s) used to visualize the 3D element\n   * in a view. In case, there are several 2D elements, it is an array.\n   *\n   * @type Array\n   * @description JXG.GeometryElement,Array\n   * @private\n   *\n   * @example\n   *   p.element2D;\n   */\n  this.element2D = null;\n\n  /**\n   * If this property exists (and is true) the element is a 3D element.\n   *\n   * @type Boolean\n   * @private\n   */\n  this.is3D = true;\n  this.view.objects[this.id] = this;\n  if (this.name !== \"\") {\n    this.view.elementsByName[this.name] = this;\n  }\n};\nJXG.extend(JXG.GeometryElement3D.prototype, {\n  setAttr2D: function (attr3D) {\n    var attr2D = attr3D;\n    attr2D.name = this.name;\n    return attr2D;\n  },\n  // Documented in element.js\n  setAttribute: function (attr) {\n    var i,\n      key,\n      value,\n      arg,\n      pair,\n      attributes = {};\n\n    // Normalize the user input\n    for (i = 0; i < arguments.length; i++) {\n      arg = arguments[i];\n      if (Type.isString(arg)) {\n        // pairRaw is string of the form 'key:value'\n        pair = arg.split(\":\");\n        attributes[Type.trim(pair[0])] = Type.trim(pair[1]);\n      } else if (!Type.isArray(arg)) {\n        // pairRaw consists of objects of the form {key1:value1,key2:value2,...}\n        JXG.extend(attributes, arg);\n      } else {\n        // pairRaw consists of array [key,value]\n        attributes[arg[0]] = arg[1];\n      }\n    }\n    for (i in attributes) {\n      if (attributes.hasOwnProperty(i)) {\n        key = i.replace(/\\s+/g, \"\").toLowerCase();\n        value = attributes[i];\n        switch (key) {\n          case \"numberpointshigh\":\n          case \"stepsu\":\n          case \"stepsv\":\n            if (Type.exists(this.visProp[key]) && (!JXG.Validator[key] || JXG.Validator[key] && JXG.Validator[key](value) || JXG.Validator[key] && Type.isFunction(value) && JXG.Validator[key](value()))) {\n              value = value.toLowerCase && value.toLowerCase() === \"false\" ? false : value;\n              this._set(key, value);\n            }\n            break;\n          default:\n            if (Type.exists(this.element2D)) {\n              this.element2D.setAttribute(attributes);\n            }\n        }\n      }\n    }\n  },\n  // Documented in element.js\n  getAttribute: function (key) {\n    var result;\n    key = key.toLowerCase();\n    switch (key) {\n      case \"numberpointshigh\":\n      case \"stepsu\":\n      case \"stepsv\":\n        result = this.visProp[key];\n        break;\n      default:\n        if (Type.exists(this.element2D)) {\n          result = this.element2D.getAttribute(key);\n        }\n        break;\n    }\n    return result;\n  },\n  // Documented in element.js\n  getAttributes: function () {\n    var attr = {},\n      i,\n      key,\n      attr3D = ['numberpointshigh', 'stepsu', 'stepsv'],\n      le = attr3D.length;\n    if (Type.exists(this.element2D)) {\n      attr = Type.merge(this.element2D.getAttributes());\n    }\n    for (i = 0; i < le; i++) {\n      key = attr3D[i];\n      if (Type.exists(this.visProp[key])) {\n        attr[key] = this.visProp[key];\n      }\n    }\n    return attr;\n  },\n  remove: function () {}\n});\nexport default JXG.GeometryElement3D;","map":{"version":3,"names":["JXG","Type","GeometryElement3D","view","elType","id","board","setId","element2D","is3D","objects","name","elementsByName","extend","prototype","setAttr2D","attr3D","attr2D","setAttribute","attr","i","key","value","arg","pair","attributes","arguments","length","isString","split","trim","isArray","hasOwnProperty","replace","toLowerCase","exists","visProp","Validator","isFunction","_set","getAttribute","result","getAttributes","le","merge","remove"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/3d/element3d.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Carsten Miller,\n        Andreas Walter,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n/*global JXG:true, define: true*/\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\n/**\n * Constructs a new GeometryElement3D object.\n * @class This is the basic class for 3D geometry elements like Point3D and Line3D.\n * @constructor\n * @param {string} elType\n */\nJXG.GeometryElement3D = function (view, elType) {\n    this.elType = elType;\n    this.id = this.board.setId(this, elType);\n\n    /**\n     * Pointer to the view3D in which the element is constructed\n     * @type JXG.View3D\n     * @private\n     */\n    this.view = view;\n\n    /**\n     * Link to the 2D element(s) used to visualize the 3D element\n     * in a view. In case, there are several 2D elements, it is an array.\n     *\n     * @type Array\n     * @description JXG.GeometryElement,Array\n     * @private\n     *\n     * @example\n     *   p.element2D;\n     */\n    this.element2D = null;\n\n    /**\n     * If this property exists (and is true) the element is a 3D element.\n     *\n     * @type Boolean\n     * @private\n     */\n    this.is3D = true;\n\n    this.view.objects[this.id] = this;\n\n    if (this.name !== \"\") {\n        this.view.elementsByName[this.name] = this;\n    }\n};\n\nJXG.extend(JXG.GeometryElement3D.prototype, {\n\n    setAttr2D: function(attr3D) {\n        var attr2D = attr3D;\n\n        attr2D.name = this.name;\n\n        return attr2D;\n    },\n\n    // Documented in element.js\n    setAttribute: function(attr) {\n        var i, key, value, arg, pair,\n        attributes = {};\n\n        // Normalize the user input\n        for (i = 0; i < arguments.length; i++) {\n            arg = arguments[i];\n            if (Type.isString(arg)) {\n                // pairRaw is string of the form 'key:value'\n                pair = arg.split(\":\");\n                attributes[Type.trim(pair[0])] = Type.trim(pair[1]);\n            } else if (!Type.isArray(arg)) {\n                // pairRaw consists of objects of the form {key1:value1,key2:value2,...}\n                JXG.extend(attributes, arg);\n            } else {\n                // pairRaw consists of array [key,value]\n                attributes[arg[0]] = arg[1];\n            }\n        }\n\n        for (i in attributes) {\n            if (attributes.hasOwnProperty(i)) {\n                key = i.replace(/\\s+/g, \"\").toLowerCase();\n                value = attributes[i];\n                switch (key) {\n                    case \"numberpointshigh\":\n                    case \"stepsu\":\n                    case \"stepsv\":\n                        if (Type.exists(this.visProp[key]) &&\n                        (!JXG.Validator[key] ||\n                            (JXG.Validator[key] && JXG.Validator[key](value)) ||\n                            (JXG.Validator[key] &&\n                                Type.isFunction(value) &&\n                                JXG.Validator[key](value())))\n                        ) {\n                            value =\n                                value.toLowerCase && value.toLowerCase() === \"false\"\n                                    ? false\n                                    : value;\n                            this._set(key, value);\n                        }\n                    break;\n                    default:\n                        if (Type.exists(this.element2D)) {\n                            this.element2D.setAttribute(attributes);\n                        }\n                }\n            }\n        }\n    },\n\n    // Documented in element.js\n    getAttribute: function(key) {\n        var result;\n        key = key.toLowerCase();\n\n        switch (key) {\n            case \"numberpointshigh\":\n            case \"stepsu\":\n            case \"stepsv\":\n                result = this.visProp[key];\n                break;\n            default:\n                if (Type.exists(this.element2D)) {\n                    result = this.element2D.getAttribute(key);\n                }\n                break;\n        }\n\n        return result;\n    },\n\n    // Documented in element.js\n    getAttributes: function() {\n        var attr = {},\n            i, key,\n            attr3D = ['numberpointshigh', 'stepsu', 'stepsv'],\n            le = attr3D.length;\n\n        if (Type.exists(this.element2D)) {\n            attr = Type.merge(this.element2D.getAttributes());\n        }\n\n        for (i = 0; i < le; i++) {\n            key = attr3D[i];\n            if (Type.exists(this.visProp[key])) {\n                attr[key] = this.visProp[key];\n            }\n        }\n\n        return attr;\n    },\n\n    remove: function() {}\n\n});\n\nexport default JXG.GeometryElement3D;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}