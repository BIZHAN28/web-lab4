{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Carsten Miller,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview Implementation of vector fields and slope fields.\n */\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\n/**\n * @class Vector field.\n * <p>\n * Plot a vector field either given by two functions f1(x, y) and f2(x,y) or by a function f(x, y) returning an array of size 2.\n *\n * @pseudo\n * @name Vectorfield\n * @augments JXG.Curve\n * @constructor\n * @type JXG.Curve\n * @throws {Error} If the element cannot be constructed with the given parent objects an exception is thrown.\n * Parameter options:\n * @param {Array|Function|String} F Either an array containing two functions f1(x, y) and f2(x, y) or function f(x, y) returning an array of length 2.\n * @param {Array} xData Array of length 3 containing start value for x, number of steps, end value of x. The vector field will contain\n * (number of steps) + 1 vectors in direction of x.\n * @param {Array} yData Array of length 3 containing start value for y, number of steps, end value of y. The vector field will contain\n * (number of steps) + 1 vectors in direction of y.\n *\n * @example\n * // Defining functions\n * var fx = (x, y) => Math.sin(y);\n * var fy = (x, y) => Math.cos(x);\n *\n * var field = board.create('vectorfield', [\n *         [fx, fy],    // Defining function\n *         [-6, 25, 6], // Horizontal mesh\n *         [-5, 20, 5], // Vertical mesh\n *     ]);\n *\n * </pre><div id=\"JXGa2040e30-48ea-47d4-9840-bd24cd49150b\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXGa2040e30-48ea-47d4-9840-bd24cd49150b',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     // Defining functions\n *     var fx = (x, y) => Math.sin(y);\n *     var fy = (x, y) => Math.cos(x);\n *\n *     var field = board.create('vectorfield', [\n *             [fx, fy],    // Defining function\n *             [-6, 25, 6], // Horizontal mesh\n *             [-5, 20, 5], // Vertical mesh\n *         ]);\n *\n *     })();\n *\n * </script><pre>\n *\n * @example\n * // Slider to control length of vectors\n * var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n * // Slider to control number of steps\n * var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n * // Defining functions\n * var fx = (x, y) => 0.2 * y;\n * var fy = (x, y) => 0.2 * (Math.cos(x) - 2) * Math.sin(x);\n *\n * var field = board.create('vectorfield', [\n *         [fx, fy],        // Defining function\n *         [-6, () => stepsize.Value(), 6], // Horizontal mesh\n *         [-5, () => stepsize.Value(), 5], // Vertical mesh\n *     ], {\n *         highlightStrokeColor: JXG.palette.blue, // Make highlighting invisible\n *\n *         scale: () => s.Value(), // Scaling of vectors\n *\n *         arrowHead: {\n *             enabled: true,\n *             size: 8,  // Pixel length of arrow head\n *             angle: Math.PI / 16\n *         }\n * });\n *\n * </pre><div id=\"JXG9196337e-66f0-4d09-8065-11d88c4ff140\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG9196337e-66f0-4d09-8065-11d88c4ff140',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     // Slider to control length of vectors\n *     var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n *     // Slider to control number of steps\n *     var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n *     // Defining functions\n *     var fx = (x, y) => 0.2 * y;\n *     var fy = (x, y) => 0.2 * (Math.cos(x) - 2) * Math.sin(x);\n *\n *     var field = board.create('vectorfield', [\n *             [fx, fy],        // Defining function\n *             [-6, () => stepsize.Value(), 6], // Horizontal mesh\n *             [-5, () => stepsize.Value(), 5], // Vertical mesh\n *         ], {\n *             highlightStrokeColor: JXG.palette.blue, // Make highlighting invisible\n *\n *             scale: () => s.Value(), // Scaling of vectors\n *\n *             arrowHead: {\n *                 enabled: true,\n *                 size: 8,  // Pixel length of arrow head\n *                 angle: Math.PI / 16\n *             }\n *     });\n *\n *     })();\n *\n * </script><pre>\n *\n */\nJXG.createVectorField = function (board, parents, attributes) {\n  var el, attr;\n  if (!(parents.length >= 3 && (Type.isArray(parents[0]) || Type.isFunction(parents[0]) || Type.isString(parents[0])) && Type.isArray(parents[1]) && parents[1].length === 3 && Type.isArray(parents[2]) && parents[2].length === 3)) {\n    throw new Error(\"JSXGraph: Can't create vector field with parent types \" + \"'\" + typeof parents[0] + \"', \" + \"'\" + typeof parents[1] + \"', \" + \"'\" + typeof parents[2] + \"'.\");\n  }\n  attr = Type.copyAttributes(attributes, board.options, 'vectorfield');\n\n  /**\n   * @type {JXG.Curve}\n   * @ignore\n   */\n  el = board.create('curve', [[], []], attr);\n  el.elType = 'vectorfield';\n\n  /**\n   * Set the defining functions of vector field.\n   * @memberOf Vectorfield\n   * @name setF\n   * @function\n   * @param {Array|Function} func Either an array containing two functions f1(x, y) and f2(x, y) or function f(x, y) returning an array of length 2.\n   * @returns {Object} Reference to the vector field object.\n   *\n   * @example\n   * field.setF([(x, y) => Math.sin(y), (x, y) => Math.cos(x)]);\n   * board.update();\n   *\n   */\n  el.setF = function (func, varnames) {\n    var f0, f1;\n    if (Type.isArray(func)) {\n      f0 = Type.createFunction(func[0], this.board, varnames);\n      f1 = Type.createFunction(func[1], this.board, varnames);\n      /**\n       * @ignore\n       */\n      this.F = function (x, y) {\n        return [f0(x, y), f1(x, y)];\n      };\n    } else {\n      this.F = Type.createFunction(func, el.board, varnames);\n    }\n    return this;\n  };\n  el.setF(parents[0], 'x, y');\n  el.xData = parents[1];\n  el.yData = parents[2];\n  el.updateDataArray = function () {\n    var x,\n      y,\n      i,\n      j,\n      scale = Type.evaluate(this.visProp.scale),\n      start_x = Type.evaluate(this.xData[0]),\n      steps_x = Type.evaluate(this.xData[1]),\n      end_x = Type.evaluate(this.xData[2]),\n      delta_x = (end_x - start_x) / steps_x,\n      start_y = Type.evaluate(this.yData[0]),\n      steps_y = Type.evaluate(this.yData[1]),\n      end_y = Type.evaluate(this.yData[2]),\n      delta_y = (end_y - start_y) / steps_y,\n      v,\n      theta,\n      phi1,\n      phi2,\n      showArrow = Type.evaluate(this.visProp.arrowhead.enabled),\n      leg,\n      leg_x,\n      leg_y,\n      alpha;\n    if (showArrow) {\n      // Arrow head style\n      leg = Type.evaluate(this.visProp.arrowhead.size);\n      leg_x = leg / board.unitX;\n      leg_y = leg / board.unitY;\n      alpha = Type.evaluate(this.visProp.arrowhead.angle);\n    }\n    this.dataX = [];\n    this.dataY = [];\n    for (i = 0, x = start_x; i <= steps_x; x += delta_x, i++) {\n      for (j = 0, y = start_y; j <= steps_y; y += delta_y, j++) {\n        v = this.F(x, y);\n        v[0] *= scale;\n        v[1] *= scale;\n        this.dataX = this.dataX.concat([x, x + v[0], NaN]);\n        this.dataY = this.dataY.concat([y, y + v[1], NaN]);\n        if (showArrow && Math.abs(v[0]) + Math.abs(v[1]) > 0.0) {\n          // Arrow head\n          theta = Math.atan2(v[1], v[0]);\n          phi1 = theta + alpha;\n          phi2 = theta - alpha;\n          this.dataX = this.dataX.concat([x + v[0] - Math.cos(phi1) * leg_x, x + v[0], x + v[0] - Math.cos(phi2) * leg_x, NaN]);\n          this.dataY = this.dataY.concat([y + v[1] - Math.sin(phi1) * leg_y, y + v[1], y + v[1] - Math.sin(phi2) * leg_y, NaN]);\n        }\n      }\n    }\n  };\n  el.methodMap = Type.deepCopy(el.methodMap, {\n    setF: \"setF\"\n  });\n  return el;\n};\nJXG.registerElement(\"vectorfield\", JXG.createVectorField);\n\n/**\n * @class Slope field.\n * <p>\n * Plot a slope field given by a function f(x, y) returning a number.\n *\n * @pseudo\n * @name Slopefield\n * @augments Vectorfield\n * @constructor\n * @type JXG.Curve\n * @throws {Error} If the element cannot be constructed with the given parent objects an exception is thrown.\n * Parameter options:\n * @param {Function|String} F Function f(x, y) returning a number.\n * @param {Array} xData Array of length 3 containing start value for x, number of steps, end value of x. The slope field will contain\n * (number of steps) + 1 vectors in direction of x.\n * @param {Array} yData Array of length 3 containing start value for y, number of steps, end value of y. The slope field will contain\n * (number of steps) + 1 vectors in direction of y.\n * @example\n * var field = board.create('slopefield', [\n *     (x, y) => x * x - x - 2,\n *     [-6, 25, 6], // Horizontal mesh\n *     [-5, 20, 5]  // Vertical mesh\n * ]);\n *\n * </pre><div id=\"JXG8a2ee562-eea1-4ce0-91ca-46b71fc7543d\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG8a2ee562-eea1-4ce0-91ca-46b71fc7543d',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     var field = board.create('slopefield', [\n *         (x, y) => x * x - x - 2,\n *         [-6, 25, 6], [-5, 20, 5]\n *     ]);\n *\n *     })();\n *\n * </script><pre>\n *\n * @example\n * // Slider to control length of vectors\n * var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n * // Slider to control number of steps\n * var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n * var field = board.create('slopefield', [\n *     (x, y) => x * x - y * y,\n *     [-6, () => stepsize.Value(), 6],\n *     [-5, () => stepsize.Value(), 5]],\n *     {\n *         strokeWidth: 1.5,\n *         highlightStrokeWidth: 0.5,\n *         highlightStrokeColor: JXG.palette.blue,\n *\n *         scale: () => s.Value(),\n *\n *         arrowHead: {\n *             enabled: false,\n *             size: 8,\n *             angle: Math.PI / 16\n *         }\n *     });\n *\n * </pre><div id=\"JXG1ec9e4d7-6094-4d2b-b72f-4efddd514f55\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG1ec9e4d7-6094-4d2b-b72f-4efddd514f55',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     // Slider to control length of vectors\n *     var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n *     // Slider to control number of steps\n *     var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n *     var field = board.create('slopefield', [\n *         (x, y) => x * x - y * y,\n *         [-6, () => stepsize.Value(), 6],\n *         [-5, () => stepsize.Value(), 5]],\n *         {\n *             strokeWidth: 1.5,\n *             highlightStrokeWidth: 0.5,\n *             highlightStrokeColor: JXG.palette.blue,\n *\n *             scale: () => s.Value(),\n *\n *             arrowHead: {\n *                 enabled: false,\n *                 size: 8,\n *                 angle: Math.PI / 16\n *             }\n *         });\n *\n *     })();\n *\n * </script><pre>\n *\n */\nJXG.createSlopeField = function (board, parents, attributes) {\n  var el, f, attr;\n  if (!(parents.length >= 3 && (Type.isFunction(parents[0]) || Type.isString(parents[0])) && Type.isArray(parents[1]) && parents[1].length === 3 && Type.isArray(parents[2]) && parents[2].length === 3)) {\n    throw new Error(\"JSXGraph: Can't create slope field with parent types \" + \"'\" + typeof parents[0] + \"', \" + \"'\" + typeof parents[1] + \"', \" + \"'\" + typeof parents[2] + \"'.\");\n  }\n  f = Type.createFunction(parents[0], board, 'x, y');\n  parents[0] = function (x, y) {\n    var z = f(x, y),\n      nrm = Math.sqrt(1 + z * z);\n    return [1 / nrm, z / nrm];\n  };\n  attr = Type.copyAttributes(attributes, board.options, 'slopefield');\n  /**\n   * @type {JXG.Curve}\n   * @ignore\n   */\n  el = board.create('vectorfield', parents, attr);\n  el.elType = 'slopefield';\n\n  /**\n   * Set the defining functions of slope field.\n   * @name Slopefield#setF\n   * @function\n   * @param {Function} func Function f(x, y) returning a number.\n   * @returns {Object} Reference to the slope field object.\n   *\n   * @example\n   * field.setF((x, y) => x * x + y * y);\n   * board.update();\n   *\n   */\n  el.setF = function (func, varnames) {\n    var f = Type.createFunction(func, el.board, varnames);\n\n    /**\n     * @ignore\n     */\n    this.F = function (x, y) {\n      var z = f(x, y),\n        nrm = Math.sqrt(1 + z * z);\n      return [1 / nrm, z / nrm];\n    };\n  };\n  el.methodMap = Type.deepCopy(el.methodMap, {\n    setF: \"setF\"\n  });\n  return el;\n};\nJXG.registerElement(\"slopefield\", JXG.createSlopeField);","map":{"version":3,"names":["JXG","Type","createVectorField","board","parents","attributes","el","attr","length","isArray","isFunction","isString","Error","copyAttributes","options","create","elType","setF","func","varnames","f0","f1","createFunction","F","x","y","xData","yData","updateDataArray","i","j","scale","evaluate","visProp","start_x","steps_x","end_x","delta_x","start_y","steps_y","end_y","delta_y","v","theta","phi1","phi2","showArrow","arrowhead","enabled","leg","leg_x","leg_y","alpha","size","unitX","unitY","angle","dataX","dataY","concat","NaN","Math","abs","atan2","cos","sin","methodMap","deepCopy","registerElement","createSlopeField","f","z","nrm","sqrt"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/element/vectorfield.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Carsten Miller,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview Implementation of vector fields and slope fields.\n */\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\n/**\n * @class Vector field.\n * <p>\n * Plot a vector field either given by two functions f1(x, y) and f2(x,y) or by a function f(x, y) returning an array of size 2.\n *\n * @pseudo\n * @name Vectorfield\n * @augments JXG.Curve\n * @constructor\n * @type JXG.Curve\n * @throws {Error} If the element cannot be constructed with the given parent objects an exception is thrown.\n * Parameter options:\n * @param {Array|Function|String} F Either an array containing two functions f1(x, y) and f2(x, y) or function f(x, y) returning an array of length 2.\n * @param {Array} xData Array of length 3 containing start value for x, number of steps, end value of x. The vector field will contain\n * (number of steps) + 1 vectors in direction of x.\n * @param {Array} yData Array of length 3 containing start value for y, number of steps, end value of y. The vector field will contain\n * (number of steps) + 1 vectors in direction of y.\n *\n * @example\n * // Defining functions\n * var fx = (x, y) => Math.sin(y);\n * var fy = (x, y) => Math.cos(x);\n *\n * var field = board.create('vectorfield', [\n *         [fx, fy],    // Defining function\n *         [-6, 25, 6], // Horizontal mesh\n *         [-5, 20, 5], // Vertical mesh\n *     ]);\n *\n * </pre><div id=\"JXGa2040e30-48ea-47d4-9840-bd24cd49150b\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXGa2040e30-48ea-47d4-9840-bd24cd49150b',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     // Defining functions\n *     var fx = (x, y) => Math.sin(y);\n *     var fy = (x, y) => Math.cos(x);\n *\n *     var field = board.create('vectorfield', [\n *             [fx, fy],    // Defining function\n *             [-6, 25, 6], // Horizontal mesh\n *             [-5, 20, 5], // Vertical mesh\n *         ]);\n *\n *     })();\n *\n * </script><pre>\n *\n * @example\n * // Slider to control length of vectors\n * var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n * // Slider to control number of steps\n * var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n * // Defining functions\n * var fx = (x, y) => 0.2 * y;\n * var fy = (x, y) => 0.2 * (Math.cos(x) - 2) * Math.sin(x);\n *\n * var field = board.create('vectorfield', [\n *         [fx, fy],        // Defining function\n *         [-6, () => stepsize.Value(), 6], // Horizontal mesh\n *         [-5, () => stepsize.Value(), 5], // Vertical mesh\n *     ], {\n *         highlightStrokeColor: JXG.palette.blue, // Make highlighting invisible\n *\n *         scale: () => s.Value(), // Scaling of vectors\n *\n *         arrowHead: {\n *             enabled: true,\n *             size: 8,  // Pixel length of arrow head\n *             angle: Math.PI / 16\n *         }\n * });\n *\n * </pre><div id=\"JXG9196337e-66f0-4d09-8065-11d88c4ff140\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG9196337e-66f0-4d09-8065-11d88c4ff140',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     // Slider to control length of vectors\n *     var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n *     // Slider to control number of steps\n *     var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n *     // Defining functions\n *     var fx = (x, y) => 0.2 * y;\n *     var fy = (x, y) => 0.2 * (Math.cos(x) - 2) * Math.sin(x);\n *\n *     var field = board.create('vectorfield', [\n *             [fx, fy],        // Defining function\n *             [-6, () => stepsize.Value(), 6], // Horizontal mesh\n *             [-5, () => stepsize.Value(), 5], // Vertical mesh\n *         ], {\n *             highlightStrokeColor: JXG.palette.blue, // Make highlighting invisible\n *\n *             scale: () => s.Value(), // Scaling of vectors\n *\n *             arrowHead: {\n *                 enabled: true,\n *                 size: 8,  // Pixel length of arrow head\n *                 angle: Math.PI / 16\n *             }\n *     });\n *\n *     })();\n *\n * </script><pre>\n *\n */\nJXG.createVectorField = function (board, parents, attributes) {\n    var el, attr;\n\n    if (!(parents.length >= 3 &&\n        (Type.isArray(parents[0]) || Type.isFunction(parents[0]) || Type.isString(parents[0])) &&\n        (Type.isArray(parents[1]) && parents[1].length === 3) &&\n        (Type.isArray(parents[2]) && parents[2].length === 3)\n    )) {\n        throw new Error(\n            \"JSXGraph: Can't create vector field with parent types \" +\n            \"'\" + typeof parents[0] + \"', \" +\n            \"'\" + typeof parents[1] + \"', \" +\n            \"'\" + typeof parents[2] + \"'.\"\n        );\n    }\n\n    attr = Type.copyAttributes(attributes, board.options, 'vectorfield');\n\n    /**\n     * @type {JXG.Curve}\n     * @ignore\n     */\n    el = board.create('curve', [[], []], attr);\n    el.elType = 'vectorfield';\n\n    /**\n     * Set the defining functions of vector field.\n     * @memberOf Vectorfield\n     * @name setF\n     * @function\n     * @param {Array|Function} func Either an array containing two functions f1(x, y) and f2(x, y) or function f(x, y) returning an array of length 2.\n     * @returns {Object} Reference to the vector field object.\n     *\n     * @example\n     * field.setF([(x, y) => Math.sin(y), (x, y) => Math.cos(x)]);\n     * board.update();\n     *\n     */\n    el.setF = function (func, varnames) {\n        var f0, f1;\n        if (Type.isArray(func)) {\n            f0 = Type.createFunction(func[0], this.board, varnames);\n            f1 = Type.createFunction(func[1], this.board, varnames);\n            /**\n             * @ignore\n             */\n            this.F = function (x, y) { return [f0(x, y), f1(x, y)]; };\n        } else {\n            this.F = Type.createFunction(func, el.board, varnames);\n        }\n        return this;\n    };\n\n    el.setF(parents[0], 'x, y');\n    el.xData = parents[1];\n    el.yData = parents[2];\n\n    el.updateDataArray = function () {\n        var x, y, i, j,\n            scale = Type.evaluate(this.visProp.scale),\n            start_x = Type.evaluate(this.xData[0]),\n            steps_x = Type.evaluate(this.xData[1]),\n            end_x = Type.evaluate(this.xData[2]),\n            delta_x = (end_x - start_x) / steps_x,\n\n            start_y = Type.evaluate(this.yData[0]),\n            steps_y = Type.evaluate(this.yData[1]),\n            end_y = Type.evaluate(this.yData[2]),\n            delta_y = (end_y - start_y) / steps_y,\n            v, theta, phi1, phi2,\n\n            showArrow = Type.evaluate(this.visProp.arrowhead.enabled),\n            leg, leg_x, leg_y, alpha;\n\n\n        if (showArrow) {\n            // Arrow head style\n            leg = Type.evaluate(this.visProp.arrowhead.size);\n            leg_x = leg / board.unitX;\n            leg_y = leg / board.unitY;\n            alpha = Type.evaluate(this.visProp.arrowhead.angle);\n        }\n\n        this.dataX = [];\n        this.dataY = [];\n\n        for (i = 0, x = start_x; i <= steps_x; x += delta_x, i++) {\n            for (j = 0, y = start_y; j <= steps_y; y += delta_y, j++) {\n                v = this.F(x, y);\n                v[0] *= scale;\n                v[1] *= scale;\n\n                this.dataX = this.dataX.concat([x, x + v[0], NaN]);\n                this.dataY = this.dataY.concat([y, y + v[1], NaN]);\n\n                if (showArrow && Math.abs(v[0]) + Math.abs(v[1]) > 0.0) {\n                    // Arrow head\n                    theta = Math.atan2(v[1], v[0]);\n                    phi1 = theta + alpha;\n                    phi2 = theta - alpha;\n                    this.dataX = this.dataX.concat([x + v[0] - Math.cos(phi1) * leg_x, x + v[0], x + v[0] - Math.cos(phi2) * leg_x, NaN]);\n                    this.dataY = this.dataY.concat([y + v[1] - Math.sin(phi1) * leg_y, y + v[1], y + v[1] - Math.sin(phi2) * leg_y, NaN]);\n                }\n            }\n        }\n    };\n\n    el.methodMap = Type.deepCopy(el.methodMap, {\n        setF: \"setF\"\n    });\n\n    return el;\n};\n\nJXG.registerElement(\"vectorfield\", JXG.createVectorField);\n\n/**\n * @class Slope field.\n * <p>\n * Plot a slope field given by a function f(x, y) returning a number.\n *\n * @pseudo\n * @name Slopefield\n * @augments Vectorfield\n * @constructor\n * @type JXG.Curve\n * @throws {Error} If the element cannot be constructed with the given parent objects an exception is thrown.\n * Parameter options:\n * @param {Function|String} F Function f(x, y) returning a number.\n * @param {Array} xData Array of length 3 containing start value for x, number of steps, end value of x. The slope field will contain\n * (number of steps) + 1 vectors in direction of x.\n * @param {Array} yData Array of length 3 containing start value for y, number of steps, end value of y. The slope field will contain\n * (number of steps) + 1 vectors in direction of y.\n * @example\n * var field = board.create('slopefield', [\n *     (x, y) => x * x - x - 2,\n *     [-6, 25, 6], // Horizontal mesh\n *     [-5, 20, 5]  // Vertical mesh\n * ]);\n *\n * </pre><div id=\"JXG8a2ee562-eea1-4ce0-91ca-46b71fc7543d\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG8a2ee562-eea1-4ce0-91ca-46b71fc7543d',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     var field = board.create('slopefield', [\n *         (x, y) => x * x - x - 2,\n *         [-6, 25, 6], [-5, 20, 5]\n *     ]);\n *\n *     })();\n *\n * </script><pre>\n *\n * @example\n * // Slider to control length of vectors\n * var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n * // Slider to control number of steps\n * var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n * var field = board.create('slopefield', [\n *     (x, y) => x * x - y * y,\n *     [-6, () => stepsize.Value(), 6],\n *     [-5, () => stepsize.Value(), 5]],\n *     {\n *         strokeWidth: 1.5,\n *         highlightStrokeWidth: 0.5,\n *         highlightStrokeColor: JXG.palette.blue,\n *\n *         scale: () => s.Value(),\n *\n *         arrowHead: {\n *             enabled: false,\n *             size: 8,\n *             angle: Math.PI / 16\n *         }\n *     });\n *\n * </pre><div id=\"JXG1ec9e4d7-6094-4d2b-b72f-4efddd514f55\" class=\"jxgbox\" style=\"width: 500px; height: 500px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG1ec9e4d7-6094-4d2b-b72f-4efddd514f55',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     // Slider to control length of vectors\n *     var s = board.create('slider', [[-3, 7], [3, 7], [0, 0.33, 1]], {name: 'length'});\n *     // Slider to control number of steps\n *     var stepsize = board.create('slider', [[-3, 6], [3, 6], [1, 20, 100]], {name: 'steps', snapWidth: 1});\n *\n *     var field = board.create('slopefield', [\n *         (x, y) => x * x - y * y,\n *         [-6, () => stepsize.Value(), 6],\n *         [-5, () => stepsize.Value(), 5]],\n *         {\n *             strokeWidth: 1.5,\n *             highlightStrokeWidth: 0.5,\n *             highlightStrokeColor: JXG.palette.blue,\n *\n *             scale: () => s.Value(),\n *\n *             arrowHead: {\n *                 enabled: false,\n *                 size: 8,\n *                 angle: Math.PI / 16\n *             }\n *         });\n *\n *     })();\n *\n * </script><pre>\n *\n */\nJXG.createSlopeField = function (board, parents, attributes) {\n    var el, f, attr;\n\n    if (!(parents.length >= 3 &&\n        (Type.isFunction(parents[0]) || Type.isString(parents[0])) &&\n        (Type.isArray(parents[1]) && parents[1].length === 3) &&\n        (Type.isArray(parents[2]) && parents[2].length === 3)\n    )) {\n        throw new Error(\n            \"JSXGraph: Can't create slope field with parent types \" +\n            \"'\" + typeof parents[0] + \"', \" +\n            \"'\" + typeof parents[1] + \"', \" +\n            \"'\" + typeof parents[2] + \"'.\"\n        );\n    }\n\n    f = Type.createFunction(parents[0], board, 'x, y');\n    parents[0] = function (x, y) {\n        var z = f(x, y),\n            nrm = Math.sqrt(1 + z * z);\n        return [1 / nrm, z / nrm];\n    };\n    attr = Type.copyAttributes(attributes, board.options, 'slopefield');\n    /**\n     * @type {JXG.Curve}\n     * @ignore\n     */\n    el = board.create('vectorfield', parents, attr);\n    el.elType = 'slopefield';\n\n    /**\n     * Set the defining functions of slope field.\n     * @name Slopefield#setF\n     * @function\n     * @param {Function} func Function f(x, y) returning a number.\n     * @returns {Object} Reference to the slope field object.\n     *\n     * @example\n     * field.setF((x, y) => x * x + y * y);\n     * board.update();\n     *\n     */\n    el.setF = function (func, varnames) {\n        var f = Type.createFunction(func, el.board, varnames);\n\n        /**\n         * @ignore\n         */\n        this.F = function (x, y) {\n            var z = f(x, y),\n                nrm = Math.sqrt(1 + z * z);\n            return [1 / nrm, z / nrm];\n        };\n    };\n\n    el.methodMap = Type.deepCopy(el.methodMap, {\n        setF: \"setF\"\n    });\n\n    return el;\n};\n\nJXG.registerElement(\"slopefield\", JXG.createSlopeField);\n"],"mappings":"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QACzH;MACJ;IACJ;EACJ,CAAC;EAEDtD,EAAE,CAAC4D,SAAS,GAAGjE,IAAI,CAACkE,QAAQ,CAAC7D,EAAE,CAAC4D,SAAS,EAAE;IACvCjD,IAAI,EAAE;EACV,CAAC,CAAC;EAEF,OAAOX,EAAE;AACb,CAAC;AAEDN,GAAG,CAACoE,eAAe,CAAC,aAAa,EAAEpE,GAAG,CAACE,iBAAiB,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,GAAG,CAACqE,gBAAgB,GAAG,UAAUlE,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAE;EACzD,IAAIC,EAAE,EAAEgE,CAAC,EAAE/D,IAAI;EAEf,IAAI,EAAEH,OAAO,CAACI,MAAM,IAAI,CAAC,KACpBP,IAAI,CAACS,UAAU,CAACN,OAAO,CAAC,CAAC,CAAC,CAAC,IAAIH,IAAI,CAACU,QAAQ,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IACzDH,IAAI,CAACQ,OAAO,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,KAAK,CAAE,IACpDP,IAAI,CAACQ,OAAO,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,KAAK,CAAE,CACxD,EAAE;IACC,MAAM,IAAII,KAAK,CACX,uDAAuD,GACvD,GAAG,GAAG,OAAOR,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,GAC/B,GAAG,GAAG,OAAOA,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,GAC/B,GAAG,GAAG,OAAOA,OAAO,CAAC,CAAC,CAAC,GAAG,IAC9B,CAAC;EACL;EAEAkE,CAAC,GAAGrE,IAAI,CAACqB,cAAc,CAAClB,OAAO,CAAC,CAAC,CAAC,EAAED,KAAK,EAAE,MAAM,CAAC;EAClDC,OAAO,CAAC,CAAC,CAAC,GAAG,UAAUoB,CAAC,EAAEC,CAAC,EAAE;IACzB,IAAI8C,CAAC,GAAGD,CAAC,CAAC9C,CAAC,EAAEC,CAAC,CAAC;MACX+C,GAAG,GAAGX,IAAI,CAACY,IAAI,CAAC,CAAC,GAAGF,CAAC,GAAGA,CAAC,CAAC;IAC9B,OAAO,CAAC,CAAC,GAAGC,GAAG,EAAED,CAAC,GAAGC,GAAG,CAAC;EAC7B,CAAC;EACDjE,IAAI,GAAGN,IAAI,CAACY,cAAc,CAACR,UAAU,EAAEF,KAAK,CAACW,OAAO,EAAE,YAAY,CAAC;EACnE;AACJ;AACA;AACA;EACIR,EAAE,GAAGH,KAAK,CAACY,MAAM,CAAC,aAAa,EAAEX,OAAO,EAAEG,IAAI,CAAC;EAC/CD,EAAE,CAACU,MAAM,GAAG,YAAY;;EAExB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIV,EAAE,CAACW,IAAI,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAE;IAChC,IAAImD,CAAC,GAAGrE,IAAI,CAACqB,cAAc,CAACJ,IAAI,EAAEZ,EAAE,CAACH,KAAK,EAAEgB,QAAQ,CAAC;;IAErD;AACR;AACA;IACQ,IAAI,CAACI,CAAC,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACrB,IAAI8C,CAAC,GAAGD,CAAC,CAAC9C,CAAC,EAAEC,CAAC,CAAC;QACX+C,GAAG,GAAGX,IAAI,CAACY,IAAI,CAAC,CAAC,GAAGF,CAAC,GAAGA,CAAC,CAAC;MAC9B,OAAO,CAAC,CAAC,GAAGC,GAAG,EAAED,CAAC,GAAGC,GAAG,CAAC;IAC7B,CAAC;EACL,CAAC;EAEDlE,EAAE,CAAC4D,SAAS,GAAGjE,IAAI,CAACkE,QAAQ,CAAC7D,EAAE,CAAC4D,SAAS,EAAE;IACvCjD,IAAI,EAAE;EACV,CAAC,CAAC;EAEF,OAAOX,EAAE;AACb,CAAC;AAEDN,GAAG,CAACoE,eAAe,CAAC,YAAY,EAAEpE,GAAG,CAACqE,gBAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}