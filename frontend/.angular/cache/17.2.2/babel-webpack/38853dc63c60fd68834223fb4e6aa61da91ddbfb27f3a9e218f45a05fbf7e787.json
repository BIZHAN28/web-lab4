{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\nimport JXG from \"../jxg\";\nimport Mat from \"./math\";\nimport Type from \"../utils/type\";\nJXG.Math.DoubleBits = function () {\n  var hasTypedArrays = false,\n    DOUBLE_VIEW = new Float64Array(1),\n    UINT_VIEW = new Uint32Array(DOUBLE_VIEW.buffer),\n    doubleBitsLE,\n    toDoubleLE,\n    lowUintLE,\n    highUintLE,\n    doubleBitsBE,\n    toDoubleBE,\n    lowUintBE,\n    highUintBE,\n    doubleBits,\n    toDouble,\n    lowUint,\n    highUint;\n  if (Float64Array !== undefined) {\n    DOUBLE_VIEW[0] = 1.0;\n    hasTypedArrays = true;\n    if (UINT_VIEW[1] === 0x3ff00000) {\n      // Use little endian\n      doubleBitsLE = function (n) {\n        DOUBLE_VIEW[0] = n;\n        return [UINT_VIEW[0], UINT_VIEW[1]];\n      };\n      toDoubleLE = function (lo, hi) {\n        UINT_VIEW[0] = lo;\n        UINT_VIEW[1] = hi;\n        return DOUBLE_VIEW[0];\n      };\n      lowUintLE = function (n) {\n        DOUBLE_VIEW[0] = n;\n        return UINT_VIEW[0];\n      };\n      highUintLE = function (n) {\n        DOUBLE_VIEW[0] = n;\n        return UINT_VIEW[1];\n      };\n      this.doubleBits = doubleBitsLE;\n      this.pack = toDoubleLE;\n      this.lo = lowUintLE;\n      this.hi = highUintLE;\n    } else if (UINT_VIEW[0] === 0x3ff00000) {\n      //Use big endian\n      doubleBitsBE = function (n) {\n        DOUBLE_VIEW[0] = n;\n        return [UINT_VIEW[1], UINT_VIEW[0]];\n      };\n      toDoubleBE = function (lo, hi) {\n        UINT_VIEW[1] = lo;\n        UINT_VIEW[0] = hi;\n        return DOUBLE_VIEW[0];\n      };\n      lowUintBE = function (n) {\n        DOUBLE_VIEW[0] = n;\n        return UINT_VIEW[1];\n      };\n      highUintBE = function (n) {\n        DOUBLE_VIEW[0] = n;\n        return UINT_VIEW[0];\n      };\n      this.doubleBits = doubleBitsBE;\n      this.pack = toDoubleBE;\n      this.lo = lowUintBE;\n      this.hi = highUintBE;\n    } else {\n      hasTypedArrays = false;\n    }\n  }\n\n  // if (!hasTypedArrays) {\n  //     var buffer = new Buffer(8)\n  //     doubleBits = function(n) {\n  //         buffer.writeDoubleLE(n, 0, true);\n  //         return [buffer.readUInt32LE(0, true), buffer.readUInt32LE(4, true)];\n  //     };\n\n  //     toDouble = function(lo, hi) {\n  //         buffer.writeUInt32LE(lo, 0, true);\n  //         buffer.writeUInt32LE(hi, 4, true);\n  //         return buffer.readDoubleLE(0, true);\n  //     };\n  //     lowUint = function(n) {\n  //         buffer.writeDoubleLE(n, 0, true);\n  //         return buffer.readUInt32LE(0, true);\n  //     };\n\n  //     highUint = function(n) {\n  //         buffer.writeDoubleLE(n, 0, true);\n  //         return buffer.readUInt32LE(4, true);\n  //     };\n\n  //     this.doubleBits = doubleBits;\n  //     this.pack = toDouble;\n  //     this.lo = lowUint;\n  //     this.hi = highUint;\n  // }\n};\nJXG.extend(JXG.Math.DoubleBits.prototype, /** @lends JXG.Math.DoubleBits.prototype */{\n  sign: function (n) {\n    return this.hi(n) >>> 31;\n  },\n  exponent: function (n) {\n    var b = this.hi(n);\n    return (b << 1 >>> 21) - 1023;\n  },\n  fraction: function (n) {\n    var lo = this.lo(n),\n      hi = this.hi(n),\n      b = hi & (1 << 20) - 1;\n    if (hi & 0x7ff00000) {\n      b += 1 << 20;\n    }\n    return [lo, b];\n  },\n  denormalized: function (n) {\n    var hi = this.hi(n);\n    return !(hi & 0x7ff00000);\n  }\n});\nvar doubleBits = new JXG.Math.DoubleBits(),\n  /**\n   * Interval for interval arithmetics. Consists of the properties\n   * <ul>\n   *  <li>lo\n   *  <li>hi\n   * </ul>\n   * @name JXG.Math.Interval\n   * @type Object\n   */\n  MatInterval = function (lo, hi) {\n    if (lo !== undefined && hi !== undefined) {\n      // possible cases:\n      // - Interval(1, 2)\n      // - Interval(Interval(1, 1), Interval(2, 2))     // singletons are required\n      if (Mat.IntervalArithmetic.isInterval(lo)) {\n        if (!Mat.IntervalArithmetic.isSingleton(lo)) {\n          throw new TypeError(\"JXG.Math.IntervalArithmetic: interval `lo` must be a singleton\");\n        }\n        this.lo = lo.lo;\n      } else {\n        this.lo = lo;\n      }\n      if (Mat.IntervalArithmetic.isInterval(hi)) {\n        if (!Mat.IntervalArithmetic.isSingleton(hi)) {\n          throw new TypeError(\"JXG.Math.IntervalArithmetic: interval `hi` must be a singleton\");\n        }\n        this.hi = hi.hi;\n      } else {\n        this.hi = hi;\n      }\n    } else if (lo !== undefined) {\n      // possible cases:\n      // - Interval([1, 2])\n      // - Interval([Interval(1, 1), Interval(2, 2)])\n      if (Array.isArray(lo)) {\n        return new MatInterval(lo[0], lo[1]);\n      }\n      // - Interval(1)\n      return new MatInterval(lo, lo);\n    } else {\n      // This else is necessary even if jslint declares it as redundant\n      // possible cases:\n      // - Interval()\n      this.lo = this.hi = 0;\n    }\n  };\nJXG.extend(MatInterval.prototype, {\n  print: function () {\n    console.log(\"[\", this.lo, this.hi, \"]\");\n  },\n  set: function (lo, hi) {\n    this.lo = lo;\n    this.hi = hi;\n    return this;\n  },\n  bounded: function (lo, hi) {\n    return this.set(Mat.IntervalArithmetic.prev(lo), Mat.IntervalArithmetic.next(hi));\n  },\n  boundedSingleton: function (v) {\n    return this.bounded(v, v);\n  },\n  assign: function (lo, hi) {\n    if (typeof lo !== \"number\" || typeof hi !== \"number\") {\n      throw new TypeError(\"JXG.Math.Interval#assign: arguments must be numbers\");\n    }\n    if (isNaN(lo) || isNaN(hi) || lo > hi) {\n      return this.setEmpty();\n    }\n    return this.set(lo, hi);\n  },\n  setEmpty: function () {\n    return this.set(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  },\n  setWhole: function () {\n    return this.set(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n  },\n  open: function (lo, hi) {\n    return this.assign(Mat.IntervalArithmetic.next(lo), Mat.IntervalArithmetic.prev(hi));\n  },\n  halfOpenLeft: function (lo, hi) {\n    return this.assign(Mat.IntervalArithmetic.next(lo), hi);\n  },\n  halfOpenRight: function (lo, hi) {\n    return this.assign(lo, Mat.IntervalArithmetic.prev(hi));\n  },\n  toArray: function () {\n    return [this.lo, this.hi];\n  },\n  clone: function () {\n    return new MatInterval().set(this.lo, this.hi);\n  }\n});\n\n/**\n * Object for interval arithmetics.\n * @name JXG.Math.IntervalArithmetic\n * @namespace\n */\nJXG.Math.IntervalArithmetic = {\n  Interval: function (lo, hi) {\n    return new MatInterval(lo, hi);\n  },\n  isInterval: function (i) {\n    return i !== null && typeof i === \"object\" && typeof i.lo === \"number\" && typeof i.hi === \"number\";\n  },\n  isSingleton: function (i) {\n    return i.lo === i.hi;\n  },\n  /*\n   * Arithmetics\n   */\n\n  /**\n   * Addition\n   *\n   * @param {JXG.Math.Interval|Number} x\n   * @param {JXG.Math.Interval|Number} y\n   * @returns JXG.Math.Interval\n   */\n  add: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    return new MatInterval(this.addLo(x.lo, y.lo), this.addHi(x.hi, y.hi));\n  },\n  /**\n   * Subtraction\n   *\n   * @param {JXG.Math.Interval|Number} x\n   * @param {JXG.Math.Interval|Number} y\n   * @returns JXG.Math.Interval\n   */\n  sub: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    return new MatInterval(this.subLo(x.lo, y.hi), this.subHi(x.hi, y.lo));\n  },\n  /**\n   * Multiplication\n   *\n   * @param {JXG.Math.Interval|Number} x\n   * @param {JXG.Math.Interval|Number} y\n   * @returns JXG.Math.Interval\n   */\n  mul: function (x, y) {\n    var xl, xh, yl, yh, out;\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return this.EMPTY.clone();\n    }\n    xl = x.lo;\n    xh = x.hi;\n    yl = y.lo;\n    yh = y.hi;\n    out = new MatInterval();\n    if (xl < 0) {\n      if (xh > 0) {\n        if (yl < 0) {\n          if (yh > 0) {\n            // mixed * mixed\n            out.lo = Math.min(this.mulLo(xl, yh), this.mulLo(xh, yl));\n            out.hi = Math.max(this.mulHi(xl, yl), this.mulHi(xh, yh));\n          } else {\n            // mixed * negative\n            out.lo = this.mulLo(xh, yl);\n            out.hi = this.mulHi(xl, yl);\n          }\n        } else {\n          if (yh > 0) {\n            // mixed * positive\n            out.lo = this.mulLo(xl, yh);\n            out.hi = this.mulHi(xh, yh);\n          } else {\n            // mixed * zero\n            out.lo = 0;\n            out.hi = 0;\n          }\n        }\n      } else {\n        if (yl < 0) {\n          if (yh > 0) {\n            // negative * mixed\n            out.lo = this.mulLo(xl, yh);\n            out.hi = this.mulHi(xl, yl);\n          } else {\n            // negative * negative\n            out.lo = this.mulLo(xh, yh);\n            out.hi = this.mulHi(xl, yl);\n          }\n        } else {\n          if (yh > 0) {\n            // negative * positive\n            out.lo = this.mulLo(xl, yh);\n            out.hi = this.mulHi(xh, yl);\n          } else {\n            // negative * zero\n            out.lo = 0;\n            out.hi = 0;\n          }\n        }\n      }\n    } else {\n      if (xh > 0) {\n        if (yl < 0) {\n          if (yh > 0) {\n            // positive * mixed\n            out.lo = this.mulLo(xh, yl);\n            out.hi = this.mulHi(xh, yh);\n          } else {\n            // positive * negative\n            out.lo = this.mulLo(xh, yl);\n            out.hi = this.mulHi(xl, yh);\n          }\n        } else {\n          if (yh > 0) {\n            // positive * positive\n            out.lo = this.mulLo(xl, yl);\n            out.hi = this.mulHi(xh, yh);\n          } else {\n            // positive * zero\n            out.lo = 0;\n            out.hi = 0;\n          }\n        }\n      } else {\n        // zero * any other value\n        out.lo = 0;\n        out.hi = 0;\n      }\n    }\n    return out;\n  },\n  /**\n   * Division\n   *\n   * @param {JXG.Math.Interval|Number} x\n   * @param {JXG.Math.Interval|Number} y\n   * @returns JXG.Math.Interval\n   */\n  div: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return this.EMPTY.clone();\n    }\n    if (this.zeroIn(y)) {\n      if (y.lo !== 0) {\n        if (y.hi !== 0) {\n          return this.divZero(x);\n        }\n        return this.divNegative(x, y.lo);\n      }\n      if (y.hi !== 0) {\n        return this.divPositive(x, y.hi);\n      }\n      return this.EMPTY.clone();\n    }\n    return this.divNonZero(x, y);\n  },\n  /**\n   * Return +x (i.e. identity)\n   *\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  positive: function (x) {\n    return new MatInterval(x.lo, x.hi);\n  },\n  /**\n   * Return -x\n   *\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  negative: function (x) {\n    if (Type.isNumber(x)) {\n      return new MatInterval(-x);\n    }\n    return new MatInterval(-x.hi, -x.lo);\n  },\n  /*\n   * Utils\n   */\n\n  /**\n   * Test if interval is empty set.\n   * @param {JXG.Math.Interval} i\n   * @returns Boolean\n   */\n  isEmpty: function (i) {\n    return i.lo > i.hi;\n  },\n  /**\n   * Test if interval is (-Infinity, Infinity).\n   * @param {JXG.Math.Interval} i\n   * @returns Boolean\n   */\n  isWhole: function (i) {\n    return i.lo === -Infinity && i.hi === Infinity;\n  },\n  /**\n   * Test if interval contains 0.\n   * @param {JXG.Math.Interval} i\n   * @returns Boolean\n   */\n  zeroIn: function (i) {\n    return this.hasValue(i, 0);\n  },\n  /**\n   * Test if interval contains a specific value.\n   * @param {JXG.Math.Interval} i\n   * @param {Number} value\n   * @returns Boolean\n   */\n  hasValue: function (i, value) {\n    if (this.isEmpty(i)) {\n      return false;\n    }\n    return i.lo <= value && value <= i.hi;\n  },\n  /**\n   * Test if interval x contains interval y.\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  hasInterval: function (x, y) {\n    if (this.isEmpty(x)) {\n      return true;\n    }\n    return !this.isEmpty(y) && y.lo <= x.lo && x.hi <= y.hi;\n  },\n  /**\n   * Test if intervals x and y have non-zero intersection.\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  intervalsOverlap: function (x, y) {\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return false;\n    }\n    return x.lo <= y.lo && y.lo <= x.hi || y.lo <= x.lo && x.lo <= y.hi;\n  },\n  /*\n   * Division\n   */\n  /**\n   * @private\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  divNonZero: function (x, y) {\n    var xl = x.lo,\n      xh = x.hi,\n      yl = y.lo,\n      yh = y.hi,\n      out = new MatInterval();\n    if (xh < 0) {\n      if (yh < 0) {\n        out.lo = this.divLo(xh, yl);\n        out.hi = this.divHi(xl, yh);\n      } else {\n        out.lo = this.divLo(xl, yl);\n        out.hi = this.divHi(xh, yh);\n      }\n    } else if (xl < 0) {\n      if (yh < 0) {\n        out.lo = this.divLo(xh, yh);\n        out.hi = this.divHi(xl, yh);\n      } else {\n        out.lo = this.divLo(xl, yl);\n        out.hi = this.divHi(xh, yl);\n      }\n    } else {\n      if (yh < 0) {\n        out.lo = this.divLo(xh, yh);\n        out.hi = this.divHi(xl, yl);\n      } else {\n        out.lo = this.divLo(xl, yh);\n        out.hi = this.divHi(xh, yl);\n      }\n    }\n    return out;\n  },\n  /**\n   * @private\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  divPositive: function (x, v) {\n    if (x.lo === 0 && x.hi === 0) {\n      return x;\n    }\n    if (this.zeroIn(x)) {\n      // mixed considering zero in both ends\n      return this.WHOLE;\n    }\n    if (x.hi < 0) {\n      // negative / v\n      return new MatInterval(Number.NEGATIVE_INFINITY, this.divHi(x.hi, v));\n    }\n    // positive / v\n    return new MatInterval(this.divLo(x.lo, v), Number.POSITIVE_INFINITY);\n  },\n  /**\n   * @private\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  divNegative: function (x, v) {\n    if (x.lo === 0 && x.hi === 0) {\n      return x;\n    }\n    if (this.zeroIn(x)) {\n      // mixed considering zero in both ends\n      return this.WHOLE;\n    }\n    if (x.hi < 0) {\n      // negative / v\n      return new MatInterval(this.divLo(x.hi, v), Number.POSITIVE_INFINITY);\n    }\n    // positive / v\n    return new MatInterval(Number.NEGATIVE_INFINITY, this.divHi(x.lo, v));\n  },\n  /**\n   * @private\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  divZero: function (x) {\n    if (x.lo === 0 && x.hi === 0) {\n      return x;\n    }\n    return this.WHOLE;\n  },\n  /*\n   * Algebra\n   */\n  /**\n   * x mod y:  x - n * y\n   * @param {JXG.Math.Interval|Number} x\n   * @param {JXG.Math.Interval|Number} y\n   * @returns JXG.Math.Interval\n   */\n  fmod: function (x, y) {\n    var yb, n;\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return this.EMPTY.clone();\n    }\n    yb = x.lo < 0 ? y.lo : y.hi;\n    n = x.lo / yb;\n    if (n < 0) {\n      n = Math.ceil(n);\n    } else {\n      n = Math.floor(n);\n    }\n    // x mod y = x - n * y\n    return this.sub(x, this.mul(y, new MatInterval(n)));\n  },\n  /**\n   * 1 / x\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  multiplicativeInverse: function (x) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    if (this.zeroIn(x)) {\n      if (x.lo !== 0) {\n        if (x.hi !== 0) {\n          // [negative, positive]\n          return this.WHOLE;\n        }\n        // [negative, zero]\n        return new MatInterval(Number.NEGATIVE_INFINITY, this.divHi(1, x.lo));\n      }\n      if (x.hi !== 0) {\n        // [zero, positive]\n        return new MatInterval(this.divLo(1, x.hi), Number.POSITIVE_INFINITY);\n      }\n      // [zero, zero]\n      return this.EMPTY.clone();\n    }\n    // [positive, positive]\n    return new MatInterval(this.divLo(1, x.hi), this.divHi(1, x.lo));\n  },\n  /**\n   * x<sup>power</sup>\n   * @param {JXG.Math.Interval|Number} x\n   * @param {JXG.Math.Interval|Number} power\n   * @returns JXG.Math.Interval\n   */\n  pow: function (x, power) {\n    var yl, yh;\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    if (this.isInterval(power)) {\n      if (!this.isSingleton(power)) {\n        return this.EMPTY.clone();\n      }\n      power = power.lo;\n    }\n    if (power === 0) {\n      if (x.lo === 0 && x.hi === 0) {\n        // 0^0\n        return this.EMPTY.clone();\n      }\n      // x^0\n      return this.ONE.clone();\n    }\n    if (power < 0) {\n      // compute [1 / x]^-power if power is negative\n      return this.pow(this.multiplicativeInverse(x), -power);\n    }\n\n    // power > 0\n    if (power % 1 === 0) {\n      // isSafeInteger(power) as boolean) {\n      // power is integer\n      if (x.hi < 0) {\n        // [negative, negative]\n        // assume that power is even so the operation will yield a positive interval\n        // if not then just switch the sign and order of the interval bounds\n        yl = this.powLo(-x.hi, power);\n        yh = this.powHi(-x.lo, power);\n        if ((power & 1) === 1) {\n          // odd power\n          return new MatInterval(-yh, -yl);\n        }\n        // even power\n        return new MatInterval(yl, yh);\n      }\n      if (x.lo < 0) {\n        // [negative, positive]\n        if ((power & 1) === 1) {\n          return new MatInterval(-this.powLo(-x.lo, power), this.powHi(x.hi, power));\n        }\n        // even power means that any negative number will be zero (min value = 0)\n        // and the max value will be the max of x.lo^power, x.hi^power\n        return new MatInterval(0, this.powHi(Math.max(-x.lo, x.hi), power));\n      }\n      // [positive, positive]\n      return new MatInterval(this.powLo(x.lo, power), this.powHi(x.hi, power));\n    }\n    console.warn(\"power is not an integer, you should use nth-root instead, returning an empty interval\");\n    return this.EMPTY.clone();\n  },\n  /**\n   * sqrt(x)\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  sqrt: function (x) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    return this.nthRoot(x, 2);\n  },\n  /**\n   * x<sup>1/n</sup>\n   * @param {JXG.Math.Interval|Number} x\n   * @param {Number} n\n   * @returns JXG.Math.Interval\n   */\n  nthRoot: function (x, n) {\n    var power, yl, yh, yp, yn;\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (this.isEmpty(x) || n < 0) {\n      // compute 1 / x^-power if power is negative\n      return this.EMPTY.clone();\n    }\n\n    // singleton interval check\n    if (this.isInterval(n)) {\n      if (!this.isSingleton(n)) {\n        return this.EMPTY.clone();\n      }\n      n = n.lo;\n    }\n    power = 1 / n;\n    if (x.hi < 0) {\n      // [negative, negative]\n      //if ((isSafeInteger(n) as boolean) && (n & 1) === 1) {\n      if (n % 1 === 0 && (n & 1) === 1) {\n        // when n is odd we can always take the nth root\n        yl = this.powHi(-x.lo, power);\n        yh = this.powLo(-x.hi, power);\n        return new MatInterval(-yl, -yh);\n      }\n\n      // n is not odd therefore there's no nth root\n      return this.EMPTY.clone();\n    }\n    if (x.lo < 0) {\n      // [negative, positive]\n      yp = this.powHi(x.hi, power);\n      // if ((isSafeInteger(n) as boolean) && (n & 1) === 1) {\n      if (n % 1 === 0 && (n & 1) === 1) {\n        // nth root of x.lo is possible (n is odd)\n        yn = -this.powHi(-x.lo, power);\n        return new MatInterval(yn, yp);\n      }\n      return new MatInterval(0, yp);\n    }\n    // [positive, positive]\n    return new MatInterval(this.powLo(x.lo, power), this.powHi(x.hi, power));\n  },\n  /*\n   * Misc\n   */\n  /**\n   *\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  exp: function (x) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return new MatInterval(this.expLo(x.lo), this.expHi(x.hi));\n  },\n  /**\n   * Natural log\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  log: function (x) {\n    var l;\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    l = x.lo <= 0 ? Number.NEGATIVE_INFINITY : this.logLo(x.lo);\n    return new MatInterval(l, this.logHi(x.hi));\n  },\n  /**\n   * Natural log, alias for {@link JXG.Math.IntervalArithmetic#log}.\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  ln: function (x) {\n    return this.log(x);\n  },\n  // export const LOG_EXP_10 = this.log(new MatInterval(10, 10))\n  // export const LOG_EXP_2 = log(new MatInterval(2, 2))\n  /**\n   * Logarithm to base 10.\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  log10: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return this.div(this.log(x), this.log(new MatInterval(10, 10)));\n  },\n  /**\n   * Logarithm to base 2.\n   * @param {JXG.Math.Interval|Number} x\n   * @returns JXG.Math.Interval\n   */\n  log2: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return this.div(this.log(x), this.log(new MatInterval(2, 2)));\n  },\n  /**\n   * Hull of intervals x and y\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  hull: function (x, y) {\n    var badX = this.isEmpty(x),\n      badY = this.isEmpty(y);\n    if (badX && badY) {\n      return this.EMPTY.clone();\n    }\n    if (badX) {\n      return y.clone();\n    }\n    if (badY) {\n      return x.clone();\n    }\n    return new MatInterval(Math.min(x.lo, y.lo), Math.max(x.hi, y.hi));\n  },\n  /**\n   * Intersection of intervals x and y\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  intersection: function (x, y) {\n    var lo, hi;\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return this.EMPTY.clone();\n    }\n    lo = Math.max(x.lo, y.lo);\n    hi = Math.min(x.hi, y.hi);\n    if (lo <= hi) {\n      return new MatInterval(lo, hi);\n    }\n    return this.EMPTY.clone();\n  },\n  /**\n   * Union of overlapping intervals x and y\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  union: function (x, y) {\n    if (!this.intervalsOverlap(x, y)) {\n      throw new Error(\"Interval#unions do not overlap\");\n    }\n    return new MatInterval(Math.min(x.lo, y.lo), Math.max(x.hi, y.hi));\n  },\n  /**\n   * Difference of overlapping intervals x and y\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  difference: function (x, y) {\n    if (this.isEmpty(x) || this.isWhole(y)) {\n      return this.EMPTY.clone();\n    }\n    if (this.intervalsOverlap(x, y)) {\n      if (x.lo < y.lo && y.hi < x.hi) {\n        // difference creates multiple subsets\n        throw new Error(\"Interval.difference: difference creates multiple intervals\");\n      }\n\n      // handle corner cases first\n      if (y.lo <= x.lo && y.hi === Infinity || y.hi >= x.hi && y.lo === -Infinity) {\n        return this.EMPTY.clone();\n      }\n\n      // NOTE: empty interval is handled automatically\n      // e.g.\n      //\n      //    n = difference([0,1], [0,1]) // n = Interval(next(1), 1) = EMPTY\n      //    isEmpty(n) === true\n      //\n      if (y.lo <= x.lo) {\n        return new MatInterval().halfOpenLeft(y.hi, x.hi);\n      }\n\n      // y.hi >= x.hi\n      return new MatInterval().halfOpenRight(x.lo, y.lo);\n    }\n    return x.clone();\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  width: function (x) {\n    if (this.isEmpty(x)) {\n      return 0;\n    }\n    return this.subHi(x.hi, x.lo);\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  abs: function (x) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    if (x.lo >= 0) {\n      return x.clone();\n    }\n    if (x.hi <= 0) {\n      return this.negative(x);\n    }\n    return new MatInterval(0, Math.max(-x.lo, x.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  max: function (x, y) {\n    var badX = this.isEmpty(x),\n      badY = this.isEmpty(y);\n    if (badX && badY) {\n      return this.EMPTY.clone();\n    }\n    if (badX) {\n      return y.clone();\n    }\n    if (badY) {\n      return x.clone();\n    }\n    return new MatInterval(Math.max(x.lo, y.lo), Math.max(x.hi, y.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns JXG.Math.Interval\n   */\n  min: function (x, y) {\n    var badX = this.isEmpty(x),\n      badY = this.isEmpty(y);\n    if (badX && badY) {\n      return this.EMPTY.clone();\n    }\n    if (badX) {\n      return y.clone();\n    }\n    if (badY) {\n      return x.clone();\n    }\n    return new MatInterval(Math.min(x.lo, y.lo), Math.min(x.hi, y.hi));\n  },\n  /*\n   * Trigonometric\n   */\n  onlyInfinity: function (x) {\n    return !isFinite(x.lo) && x.lo === x.hi;\n  },\n  _handleNegative: function (interval) {\n    var n;\n    if (interval.lo < 0) {\n      if (interval.lo === -Infinity) {\n        interval.lo = 0;\n        interval.hi = Infinity;\n      } else {\n        n = Math.ceil(-interval.lo / this.piTwiceLow);\n        interval.lo += this.piTwiceLow * n;\n        interval.hi += this.piTwiceLow * n;\n      }\n    }\n    return interval;\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  cos: function (x) {\n    var cache, pi2, t, cosv, lo, hi, rlo, rhi;\n    if (this.isEmpty(x) || this.onlyInfinity(x)) {\n      return this.EMPTY.clone();\n    }\n\n    // create a clone of `x` because the clone is going to be modified\n    cache = new MatInterval().set(x.lo, x.hi);\n    this._handleNegative(cache);\n    pi2 = this.PI_TWICE;\n    t = this.fmod(cache, pi2);\n    if (this.width(t) >= pi2.lo) {\n      return new MatInterval(-1, 1);\n    }\n\n    // when t.lo > pi it's the same as\n    // -cos(t - pi)\n    if (t.lo >= this.piHigh) {\n      cosv = this.cos(this.sub(t, this.PI));\n      return this.negative(cosv);\n    }\n    lo = t.lo;\n    hi = t.hi;\n    rlo = this.cosLo(hi);\n    rhi = this.cosHi(lo);\n    // it's ensured that t.lo < pi and that t.lo >= 0\n    if (hi <= this.piLow) {\n      // when t.hi < pi\n      // [cos(t.lo), cos(t.hi)]\n      return new MatInterval(rlo, rhi);\n    }\n    if (hi <= pi2.lo) {\n      // when t.hi < 2pi\n      // [-1, max(cos(t.lo), cos(t.hi))]\n      return new MatInterval(-1, Math.max(rlo, rhi));\n    }\n    // t.lo < pi and t.hi > 2pi\n    return new MatInterval(-1, 1);\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  sin: function (x) {\n    if (this.isEmpty(x) || this.onlyInfinity(x)) {\n      return this.EMPTY.clone();\n    }\n    return this.cos(this.sub(x, this.PI_HALF));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  tan: function (x) {\n    var cache, t, pi;\n    if (this.isEmpty(x) || this.onlyInfinity(x)) {\n      return this.EMPTY.clone();\n    }\n\n    // create a clone of `x` because the clone is going to be modified\n    cache = new MatInterval().set(x.lo, x.hi);\n    this._handleNegative(cache);\n    pi = this.PI;\n    t = this.fmod(cache, pi);\n    if (t.lo >= this.piHalfLow) {\n      t = this.sub(t, pi);\n    }\n    if (t.lo <= -this.piHalfLow || t.hi >= this.piHalfLow) {\n      return this.WHOLE.clone();\n    }\n    return new MatInterval(this.tanLo(t.lo), this.tanHi(t.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  asin: function (x) {\n    var lo, hi;\n    if (this.isEmpty(x) || x.hi < -1 || x.lo > 1) {\n      return this.EMPTY.clone();\n    }\n    lo = x.lo <= -1 ? -this.piHalfHigh : this.asinLo(x.lo);\n    hi = x.hi >= 1 ? this.piHalfHigh : this.asinHi(x.hi);\n    return new MatInterval(lo, hi);\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  acos: function (x) {\n    var lo, hi;\n    if (this.isEmpty(x) || x.hi < -1 || x.lo > 1) {\n      return this.EMPTY.clone();\n    }\n    lo = x.hi >= 1 ? 0 : this.acosLo(x.hi);\n    hi = x.lo <= -1 ? this.piHigh : this.acosHi(x.lo);\n    return new MatInterval(lo, hi);\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  acot: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return new MatInterval(this.acotLo(x.lo), this.acotHi(x.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  atan: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return new MatInterval(this.atanLo(x.lo), this.atanHi(x.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  sinh: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return new MatInterval(this.sinhLo(x.lo), this.sinhHi(x.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  cosh: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    if (x.hi < 0) {\n      return new MatInterval(this.coshLo(x.hi), this.coshHi(x.lo));\n    }\n    if (x.lo >= 0) {\n      return new MatInterval(this.coshLo(x.lo), this.coshHi(x.hi));\n    }\n    return new MatInterval(1, this.coshHi(-x.lo > x.hi ? x.lo : x.hi));\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @returns JXG.Math.Interval\n   */\n  tanh: function (x) {\n    if (this.isEmpty(x)) {\n      return this.EMPTY.clone();\n    }\n    return new MatInterval(this.tanhLo(x.lo), this.tanhHi(x.hi));\n  },\n  /*\n   * Relational\n   */\n\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  equal: function (x, y) {\n    if (this.isEmpty(x)) {\n      return this.isEmpty(y);\n    }\n    return !this.isEmpty(y) && x.lo === y.lo && x.hi === y.hi;\n  },\n  // almostEqual: function(x, y): void {\n  //     x = Array.isArray(x) ? x : x.toArray();\n  //     y = Array.isArray(y) ? y : y.toArray();\n  //     assertEps(x[0], y[0])\n  //     assertEps(x[1], y[1])\n  // },\n\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  notEqual: function (x, y) {\n    if (this.isEmpty(x)) {\n      return !this.isEmpty(y);\n    }\n    return this.isEmpty(y) || x.hi < y.lo || x.lo > y.hi;\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  lt: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return false;\n    }\n    return x.hi < y.lo;\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  gt: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return false;\n    }\n    return x.lo > y.hi;\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  leq: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return false;\n    }\n    return x.hi <= y.lo;\n  },\n  /**\n   * @param {JXG.Math.Interval} x\n   * @param {JXG.Math.Interval} y\n   * @returns Boolean\n   */\n  geq: function (x, y) {\n    if (Type.isNumber(x)) {\n      x = this.Interval(x);\n    }\n    if (Type.isNumber(y)) {\n      y = this.Interval(y);\n    }\n    if (this.isEmpty(x) || this.isEmpty(y)) {\n      return false;\n    }\n    return x.lo >= y.hi;\n  },\n  /*\n   * Constants\n   */\n  piLow: (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30),\n  piHigh: (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30),\n  piHalfLow: (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30) * 0.5,\n  piHalfHigh: (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30) * 0.5,\n  piTwiceLow: (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30) * 2,\n  piTwiceHigh: (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30) * 2,\n  /*\n   * Round\n   * Rounding functions for numbers\n   */\n  identity: function (v) {\n    return v;\n  },\n  _prev: function (v) {\n    if (v === Infinity) {\n      return v;\n    }\n    return this.nextafter(v, -Infinity);\n  },\n  _next: function (v) {\n    if (v === -Infinity) {\n      return v;\n    }\n    return this.nextafter(v, Infinity);\n  },\n  prev: function (v) {\n    return this._prev(v);\n  },\n  next: function (v) {\n    return this._next(v);\n  },\n  toInteger: function (x) {\n    return x < 0 ? Math.ceil(x) : Math.floor(x);\n  },\n  addLo: function (x, y) {\n    return this.prev(x + y);\n  },\n  addHi: function (x, y) {\n    return this.next(x + y);\n  },\n  subLo: function (x, y) {\n    return this.prev(x - y);\n  },\n  subHi: function (x, y) {\n    return this.next(x - y);\n  },\n  mulLo: function (x, y) {\n    return this.prev(x * y);\n  },\n  mulHi: function (x, y) {\n    return this.next(x * y);\n  },\n  divLo: function (x, y) {\n    return this.prev(x / y);\n  },\n  divHi: function (x, y) {\n    return this.next(x / y);\n  },\n  intLo: function (x) {\n    return this.toInteger(this.prev(x));\n  },\n  intHi: function (x) {\n    return this.toInteger(this.next(x));\n  },\n  logLo: function (x) {\n    return this.prev(Math.log(x));\n  },\n  logHi: function (x) {\n    return this.next(Math.log(x));\n  },\n  expLo: function (x) {\n    return this.prev(Math.exp(x));\n  },\n  expHi: function (x) {\n    return this.next(Math.exp(x));\n  },\n  sinLo: function (x) {\n    return this.prev(Math.sin(x));\n  },\n  sinHi: function (x) {\n    return this.next(Math.sin(x));\n  },\n  cosLo: function (x) {\n    return this.prev(Math.cos(x));\n  },\n  cosHi: function (x) {\n    return this.next(Math.cos(x));\n  },\n  tanLo: function (x) {\n    return this.prev(Math.tan(x));\n  },\n  tanHi: function (x) {\n    return this.next(Math.tan(x));\n  },\n  asinLo: function (x) {\n    return this.prev(Math.asin(x));\n  },\n  asinHi: function (x) {\n    return this.next(Math.asin(x));\n  },\n  acosLo: function (x) {\n    return this.prev(Math.acos(x));\n  },\n  acosHi: function (x) {\n    return this.next(Math.acos(x));\n  },\n  acotLo: function (x) {\n    return this.prev(Mat.acot(x));\n  },\n  acotHi: function (x) {\n    return this.next(Mat.acot(x));\n  },\n  atanLo: function (x) {\n    return this.prev(Math.atan(x));\n  },\n  atanHi: function (x) {\n    return this.next(Math.atan(x));\n  },\n  sinhLo: function (x) {\n    return this.prev(Mat.sinh(x));\n  },\n  sinhHi: function (x) {\n    return this.next(Mat.sinh(x));\n  },\n  coshLo: function (x) {\n    return this.prev(Mat.cosh(x));\n  },\n  coshHi: function (x) {\n    return this.next(Mat.cosh(x));\n  },\n  tanhLo: function (x) {\n    return this.prev(Mat.tanh(x));\n  },\n  tanhHi: function (x) {\n    return this.next(Mat.tanh(x));\n  },\n  sqrtLo: function (x) {\n    return this.prev(Math.sqrt(x));\n  },\n  sqrtHi: function (x) {\n    return this.next(Math.sqrt(x));\n  },\n  powLo: function (x, power) {\n    var y;\n    if (power % 1 !== 0) {\n      // power has decimals\n      return this.prev(Math.pow(x, power));\n    }\n    y = (power & 1) === 1 ? x : 1;\n    power >>= 1;\n    while (power > 0) {\n      x = this.mulLo(x, x);\n      if ((power & 1) === 1) {\n        y = this.mulLo(x, y);\n      }\n      power >>= 1;\n    }\n    return y;\n  },\n  powHi: function (x, power) {\n    var y;\n    if (power % 1 !== 0) {\n      // power has decimals\n      return this.next(Math.pow(x, power));\n    }\n    y = (power & 1) === 1 ? x : 1;\n    power >>= 1;\n    while (power > 0) {\n      x = this.mulHi(x, x);\n      if ((power & 1) === 1) {\n        y = this.mulHi(x, y);\n      }\n      power >>= 1;\n    }\n    return y;\n  },\n  /**\n   * @ignore\n   * @private\n   */\n  disable: function () {\n    this.next = this.prev = this.identity;\n  },\n  /**\n   * @ignore\n   * @private\n   */\n  enable: function () {\n    this.prev = function (v) {\n      return this._prev(v);\n    };\n    this.next = function (v) {\n      return this._next(v);\n    };\n  },\n  /*\n   * nextafter\n   */\n  SMALLEST_DENORM: Math.pow(2, -1074),\n  UINT_MAX: -1 >>> 0,\n  nextafter: function (x, y) {\n    var lo, hi;\n    if (isNaN(x) || isNaN(y)) {\n      return NaN;\n    }\n    if (x === y) {\n      return x;\n    }\n    if (x === 0) {\n      if (y < 0) {\n        return -this.SMALLEST_DENORM;\n      }\n      return this.SMALLEST_DENORM;\n    }\n    hi = doubleBits.hi(x);\n    lo = doubleBits.lo(x);\n    if (y > x === x > 0) {\n      if (lo === this.UINT_MAX) {\n        hi += 1;\n        lo = 0;\n      } else {\n        lo += 1;\n      }\n    } else {\n      if (lo === 0) {\n        lo = this.UINT_MAX;\n        hi -= 1;\n      } else {\n        lo -= 1;\n      }\n    }\n    return doubleBits.pack(lo, hi);\n  }\n};\nJXG.Math.IntervalArithmetic.PI = new MatInterval(Mat.IntervalArithmetic.piLow, Mat.IntervalArithmetic.piHigh);\nJXG.Math.IntervalArithmetic.PI_HALF = new MatInterval(Mat.IntervalArithmetic.piHalfLow, Mat.IntervalArithmetic.piHalfHigh);\nJXG.Math.IntervalArithmetic.PI_TWICE = new MatInterval(Mat.IntervalArithmetic.piTwiceLow, Mat.IntervalArithmetic.piTwiceHigh);\nJXG.Math.IntervalArithmetic.ZERO = new MatInterval(0);\nJXG.Math.IntervalArithmetic.ONE = new MatInterval(1);\nJXG.Math.IntervalArithmetic.WHOLE = new MatInterval().setWhole();\nJXG.Math.IntervalArithmetic.EMPTY = new MatInterval().setEmpty();\nexport default JXG.Math.IntervalArithmetic;","map":{"version":3,"names":["JXG","Mat","Type","Math","DoubleBits","hasTypedArrays","DOUBLE_VIEW","Float64Array","UINT_VIEW","Uint32Array","buffer","doubleBitsLE","toDoubleLE","lowUintLE","highUintLE","doubleBitsBE","toDoubleBE","lowUintBE","highUintBE","doubleBits","toDouble","lowUint","highUint","undefined","n","lo","hi","pack","extend","prototype","sign","exponent","b","fraction","denormalized","MatInterval","IntervalArithmetic","isInterval","isSingleton","TypeError","Array","isArray","print","console","log","set","bounded","prev","next","boundedSingleton","v","assign","isNaN","setEmpty","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setWhole","open","halfOpenLeft","halfOpenRight","toArray","clone","Interval","i","add","x","y","isNumber","addLo","addHi","sub","subLo","subHi","mul","xl","xh","yl","yh","out","isEmpty","EMPTY","min","mulLo","max","mulHi","div","zeroIn","divZero","divNegative","divPositive","divNonZero","positive","negative","isWhole","Infinity","hasValue","value","hasInterval","intervalsOverlap","divLo","divHi","WHOLE","fmod","yb","ceil","floor","multiplicativeInverse","pow","power","ONE","powLo","powHi","warn","sqrt","nthRoot","yp","yn","exp","expLo","expHi","l","logLo","logHi","ln","log10","log2","hull","badX","badY","intersection","union","Error","difference","width","abs","onlyInfinity","isFinite","_handleNegative","interval","piTwiceLow","cos","cache","pi2","t","cosv","rlo","rhi","PI_TWICE","piHigh","PI","cosLo","cosHi","piLow","sin","PI_HALF","tan","pi","piHalfLow","tanLo","tanHi","asin","piHalfHigh","asinLo","asinHi","acos","acosLo","acosHi","acot","acotLo","acotHi","atan","atanLo","atanHi","sinh","sinhLo","sinhHi","cosh","coshLo","coshHi","tanh","tanhLo","tanhHi","equal","notEqual","lt","gt","leq","geq","piTwiceHigh","identity","_prev","nextafter","_next","toInteger","intLo","intHi","sinLo","sinHi","sqrtLo","sqrtHi","disable","enable","SMALLEST_DENORM","UINT_MAX","NaN","ZERO"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/math/ia.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\nimport JXG from \"../jxg\";\nimport Mat from \"./math\";\nimport Type from \"../utils/type\";\n\nJXG.Math.DoubleBits = function () {\n    var hasTypedArrays = false,\n        DOUBLE_VIEW = new Float64Array(1),\n        UINT_VIEW = new Uint32Array(DOUBLE_VIEW.buffer),\n        doubleBitsLE,\n        toDoubleLE,\n        lowUintLE,\n        highUintLE,\n        doubleBitsBE,\n        toDoubleBE,\n        lowUintBE,\n        highUintBE,\n        doubleBits,\n        toDouble,\n        lowUint,\n        highUint;\n\n    if (Float64Array !== undefined) {\n        DOUBLE_VIEW[0] = 1.0;\n        hasTypedArrays = true;\n        if (UINT_VIEW[1] === 0x3ff00000) {\n            // Use little endian\n            doubleBitsLE = function (n) {\n                DOUBLE_VIEW[0] = n;\n                return [UINT_VIEW[0], UINT_VIEW[1]];\n            };\n            toDoubleLE = function (lo, hi) {\n                UINT_VIEW[0] = lo;\n                UINT_VIEW[1] = hi;\n                return DOUBLE_VIEW[0];\n            };\n\n            lowUintLE = function (n) {\n                DOUBLE_VIEW[0] = n;\n                return UINT_VIEW[0];\n            };\n\n            highUintLE = function (n) {\n                DOUBLE_VIEW[0] = n;\n                return UINT_VIEW[1];\n            };\n\n            this.doubleBits = doubleBitsLE;\n            this.pack = toDoubleLE;\n            this.lo = lowUintLE;\n            this.hi = highUintLE;\n        } else if (UINT_VIEW[0] === 0x3ff00000) {\n            //Use big endian\n            doubleBitsBE = function (n) {\n                DOUBLE_VIEW[0] = n;\n                return [UINT_VIEW[1], UINT_VIEW[0]];\n            };\n\n            toDoubleBE = function (lo, hi) {\n                UINT_VIEW[1] = lo;\n                UINT_VIEW[0] = hi;\n                return DOUBLE_VIEW[0];\n            };\n\n            lowUintBE = function (n) {\n                DOUBLE_VIEW[0] = n;\n                return UINT_VIEW[1];\n            };\n\n            highUintBE = function (n) {\n                DOUBLE_VIEW[0] = n;\n                return UINT_VIEW[0];\n            };\n\n            this.doubleBits = doubleBitsBE;\n            this.pack = toDoubleBE;\n            this.lo = lowUintBE;\n            this.hi = highUintBE;\n        } else {\n            hasTypedArrays = false;\n        }\n    }\n\n    // if (!hasTypedArrays) {\n    //     var buffer = new Buffer(8)\n    //     doubleBits = function(n) {\n    //         buffer.writeDoubleLE(n, 0, true);\n    //         return [buffer.readUInt32LE(0, true), buffer.readUInt32LE(4, true)];\n    //     };\n\n    //     toDouble = function(lo, hi) {\n    //         buffer.writeUInt32LE(lo, 0, true);\n    //         buffer.writeUInt32LE(hi, 4, true);\n    //         return buffer.readDoubleLE(0, true);\n    //     };\n    //     lowUint = function(n) {\n    //         buffer.writeDoubleLE(n, 0, true);\n    //         return buffer.readUInt32LE(0, true);\n    //     };\n\n    //     highUint = function(n) {\n    //         buffer.writeDoubleLE(n, 0, true);\n    //         return buffer.readUInt32LE(4, true);\n    //     };\n\n    //     this.doubleBits = doubleBits;\n    //     this.pack = toDouble;\n    //     this.lo = lowUint;\n    //     this.hi = highUint;\n    // }\n};\n\nJXG.extend(\n    JXG.Math.DoubleBits.prototype,\n    /** @lends JXG.Math.DoubleBits.prototype */ {\n        sign: function (n) {\n            return this.hi(n) >>> 31;\n        },\n\n        exponent: function (n) {\n            var b = this.hi(n);\n            return ((b << 1) >>> 21) - 1023;\n        },\n\n        fraction: function (n) {\n            var lo = this.lo(n),\n                hi = this.hi(n),\n                b = hi & ((1 << 20) - 1);\n\n            if (hi & 0x7ff00000) {\n                b += 1 << 20;\n            }\n            return [lo, b];\n        },\n\n        denormalized: function (n) {\n            var hi = this.hi(n);\n            return !(hi & 0x7ff00000);\n        }\n    }\n);\n\nvar doubleBits = new JXG.Math.DoubleBits(),\n    /**\n     * Interval for interval arithmetics. Consists of the properties\n     * <ul>\n     *  <li>lo\n     *  <li>hi\n     * </ul>\n     * @name JXG.Math.Interval\n     * @type Object\n     */\n    MatInterval = function (lo, hi) {\n        if (lo !== undefined && hi !== undefined) {\n            // possible cases:\n            // - Interval(1, 2)\n            // - Interval(Interval(1, 1), Interval(2, 2))     // singletons are required\n            if (Mat.IntervalArithmetic.isInterval(lo)) {\n                if (!Mat.IntervalArithmetic.isSingleton(lo)) {\n                    throw new TypeError(\n                        \"JXG.Math.IntervalArithmetic: interval `lo` must be a singleton\"\n                    );\n                }\n                this.lo = lo.lo;\n            } else {\n                this.lo = lo;\n            }\n            if (Mat.IntervalArithmetic.isInterval(hi)) {\n                if (!Mat.IntervalArithmetic.isSingleton(hi)) {\n                    throw new TypeError(\n                        \"JXG.Math.IntervalArithmetic: interval `hi` must be a singleton\"\n                    );\n                }\n                this.hi = hi.hi;\n            } else {\n                this.hi = hi;\n            }\n        } else if (lo !== undefined) {\n            // possible cases:\n            // - Interval([1, 2])\n            // - Interval([Interval(1, 1), Interval(2, 2)])\n            if (Array.isArray(lo)) {\n                return new MatInterval(lo[0], lo[1]);\n            }\n            // - Interval(1)\n            return new MatInterval(lo, lo);\n        } else {\n            // This else is necessary even if jslint declares it as redundant\n            // possible cases:\n            // - Interval()\n            this.lo = this.hi = 0;\n        }\n    };\n\nJXG.extend(MatInterval.prototype, {\n    print: function () {\n        console.log(\"[\", this.lo, this.hi, \"]\");\n    },\n\n    set: function (lo, hi) {\n        this.lo = lo;\n        this.hi = hi;\n        return this;\n    },\n\n    bounded: function (lo, hi) {\n        return this.set(Mat.IntervalArithmetic.prev(lo), Mat.IntervalArithmetic.next(hi));\n    },\n\n    boundedSingleton: function (v) {\n        return this.bounded(v, v);\n    },\n\n    assign: function (lo, hi) {\n        if (typeof lo !== \"number\" || typeof hi !== \"number\") {\n            throw new TypeError(\"JXG.Math.Interval#assign: arguments must be numbers\");\n        }\n        if (isNaN(lo) || isNaN(hi) || lo > hi) {\n            return this.setEmpty();\n        }\n        return this.set(lo, hi);\n    },\n\n    setEmpty: function () {\n        return this.set(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    },\n\n    setWhole: function () {\n        return this.set(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n    },\n\n    open: function (lo, hi) {\n        return this.assign(Mat.IntervalArithmetic.next(lo), Mat.IntervalArithmetic.prev(hi));\n    },\n\n    halfOpenLeft: function (lo, hi) {\n        return this.assign(Mat.IntervalArithmetic.next(lo), hi);\n    },\n\n    halfOpenRight: function (lo, hi) {\n        return this.assign(lo, Mat.IntervalArithmetic.prev(hi));\n    },\n\n    toArray: function () {\n        return [this.lo, this.hi];\n    },\n\n    clone: function () {\n        return new MatInterval().set(this.lo, this.hi);\n    }\n});\n\n/**\n * Object for interval arithmetics.\n * @name JXG.Math.IntervalArithmetic\n * @namespace\n */\nJXG.Math.IntervalArithmetic = {\n    Interval: function (lo, hi) {\n        return new MatInterval(lo, hi);\n    },\n\n    isInterval: function (i) {\n        return (\n            i !== null &&\n            typeof i === \"object\" &&\n            typeof i.lo === \"number\" &&\n            typeof i.hi === \"number\"\n        );\n    },\n\n    isSingleton: function (i) {\n        return i.lo === i.hi;\n    },\n\n    /*\n     * Arithmetics\n     */\n\n    /**\n     * Addition\n     *\n     * @param {JXG.Math.Interval|Number} x\n     * @param {JXG.Math.Interval|Number} y\n     * @returns JXG.Math.Interval\n     */\n    add: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        return new MatInterval(this.addLo(x.lo, y.lo), this.addHi(x.hi, y.hi));\n    },\n\n    /**\n     * Subtraction\n     *\n     * @param {JXG.Math.Interval|Number} x\n     * @param {JXG.Math.Interval|Number} y\n     * @returns JXG.Math.Interval\n     */\n    sub: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        return new MatInterval(this.subLo(x.lo, y.hi), this.subHi(x.hi, y.lo));\n    },\n\n    /**\n     * Multiplication\n     *\n     * @param {JXG.Math.Interval|Number} x\n     * @param {JXG.Math.Interval|Number} y\n     * @returns JXG.Math.Interval\n     */\n    mul: function (x, y) {\n        var xl, xh, yl, yh, out;\n\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return this.EMPTY.clone();\n        }\n        xl = x.lo;\n        xh = x.hi;\n        yl = y.lo;\n        yh = y.hi;\n        out = new MatInterval();\n\n        if (xl < 0) {\n            if (xh > 0) {\n                if (yl < 0) {\n                    if (yh > 0) {\n                        // mixed * mixed\n                        out.lo = Math.min(this.mulLo(xl, yh), this.mulLo(xh, yl));\n                        out.hi = Math.max(this.mulHi(xl, yl), this.mulHi(xh, yh));\n                    } else {\n                        // mixed * negative\n                        out.lo = this.mulLo(xh, yl);\n                        out.hi = this.mulHi(xl, yl);\n                    }\n                } else {\n                    if (yh > 0) {\n                        // mixed * positive\n                        out.lo = this.mulLo(xl, yh);\n                        out.hi = this.mulHi(xh, yh);\n                    } else {\n                        // mixed * zero\n                        out.lo = 0;\n                        out.hi = 0;\n                    }\n                }\n            } else {\n                if (yl < 0) {\n                    if (yh > 0) {\n                        // negative * mixed\n                        out.lo = this.mulLo(xl, yh);\n                        out.hi = this.mulHi(xl, yl);\n                    } else {\n                        // negative * negative\n                        out.lo = this.mulLo(xh, yh);\n                        out.hi = this.mulHi(xl, yl);\n                    }\n                } else {\n                    if (yh > 0) {\n                        // negative * positive\n                        out.lo = this.mulLo(xl, yh);\n                        out.hi = this.mulHi(xh, yl);\n                    } else {\n                        // negative * zero\n                        out.lo = 0;\n                        out.hi = 0;\n                    }\n                }\n            }\n        } else {\n            if (xh > 0) {\n                if (yl < 0) {\n                    if (yh > 0) {\n                        // positive * mixed\n                        out.lo = this.mulLo(xh, yl);\n                        out.hi = this.mulHi(xh, yh);\n                    } else {\n                        // positive * negative\n                        out.lo = this.mulLo(xh, yl);\n                        out.hi = this.mulHi(xl, yh);\n                    }\n                } else {\n                    if (yh > 0) {\n                        // positive * positive\n                        out.lo = this.mulLo(xl, yl);\n                        out.hi = this.mulHi(xh, yh);\n                    } else {\n                        // positive * zero\n                        out.lo = 0;\n                        out.hi = 0;\n                    }\n                }\n            } else {\n                // zero * any other value\n                out.lo = 0;\n                out.hi = 0;\n            }\n        }\n        return out;\n    },\n\n    /**\n     * Division\n     *\n     * @param {JXG.Math.Interval|Number} x\n     * @param {JXG.Math.Interval|Number} y\n     * @returns JXG.Math.Interval\n     */\n    div: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return this.EMPTY.clone();\n        }\n        if (this.zeroIn(y)) {\n            if (y.lo !== 0) {\n                if (y.hi !== 0) {\n                    return this.divZero(x);\n                }\n                return this.divNegative(x, y.lo);\n            }\n            if (y.hi !== 0) {\n                return this.divPositive(x, y.hi);\n            }\n            return this.EMPTY.clone();\n        }\n        return this.divNonZero(x, y);\n    },\n\n    /**\n     * Return +x (i.e. identity)\n     *\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    positive: function (x) {\n        return new MatInterval(x.lo, x.hi);\n    },\n\n    /**\n     * Return -x\n     *\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    negative: function (x) {\n        if (Type.isNumber(x)) {\n            return new MatInterval(-x);\n        }\n        return new MatInterval(-x.hi, -x.lo);\n    },\n\n    /*\n     * Utils\n     */\n\n    /**\n     * Test if interval is empty set.\n     * @param {JXG.Math.Interval} i\n     * @returns Boolean\n     */\n    isEmpty: function (i) {\n        return i.lo > i.hi;\n    },\n\n    /**\n     * Test if interval is (-Infinity, Infinity).\n     * @param {JXG.Math.Interval} i\n     * @returns Boolean\n     */\n    isWhole: function (i) {\n        return i.lo === -Infinity && i.hi === Infinity;\n    },\n\n    /**\n     * Test if interval contains 0.\n     * @param {JXG.Math.Interval} i\n     * @returns Boolean\n     */\n    zeroIn: function (i) {\n        return this.hasValue(i, 0);\n    },\n\n    /**\n     * Test if interval contains a specific value.\n     * @param {JXG.Math.Interval} i\n     * @param {Number} value\n     * @returns Boolean\n     */\n    hasValue: function (i, value) {\n        if (this.isEmpty(i)) {\n            return false;\n        }\n        return i.lo <= value && value <= i.hi;\n    },\n\n    /**\n     * Test if interval x contains interval y.\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    hasInterval: function (x, y) {\n        if (this.isEmpty(x)) {\n            return true;\n        }\n        return !this.isEmpty(y) && y.lo <= x.lo && x.hi <= y.hi;\n    },\n\n    /**\n     * Test if intervals x and y have non-zero intersection.\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    intervalsOverlap: function (x, y) {\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return false;\n        }\n        return (x.lo <= y.lo && y.lo <= x.hi) || (y.lo <= x.lo && x.lo <= y.hi);\n    },\n\n    /*\n     * Division\n     */\n    /**\n     * @private\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    divNonZero: function (x, y) {\n        var xl = x.lo,\n            xh = x.hi,\n            yl = y.lo,\n            yh = y.hi,\n            out = new MatInterval();\n\n        if (xh < 0) {\n            if (yh < 0) {\n                out.lo = this.divLo(xh, yl);\n                out.hi = this.divHi(xl, yh);\n            } else {\n                out.lo = this.divLo(xl, yl);\n                out.hi = this.divHi(xh, yh);\n            }\n        } else if (xl < 0) {\n            if (yh < 0) {\n                out.lo = this.divLo(xh, yh);\n                out.hi = this.divHi(xl, yh);\n            } else {\n                out.lo = this.divLo(xl, yl);\n                out.hi = this.divHi(xh, yl);\n            }\n        } else {\n            if (yh < 0) {\n                out.lo = this.divLo(xh, yh);\n                out.hi = this.divHi(xl, yl);\n            } else {\n                out.lo = this.divLo(xl, yh);\n                out.hi = this.divHi(xh, yl);\n            }\n        }\n        return out;\n    },\n\n    /**\n     * @private\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    divPositive: function (x, v) {\n        if (x.lo === 0 && x.hi === 0) {\n            return x;\n        }\n\n        if (this.zeroIn(x)) {\n            // mixed considering zero in both ends\n            return this.WHOLE;\n        }\n\n        if (x.hi < 0) {\n            // negative / v\n            return new MatInterval(Number.NEGATIVE_INFINITY, this.divHi(x.hi, v));\n        }\n        // positive / v\n        return new MatInterval(this.divLo(x.lo, v), Number.POSITIVE_INFINITY);\n    },\n\n    /**\n     * @private\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    divNegative: function (x, v) {\n        if (x.lo === 0 && x.hi === 0) {\n            return x;\n        }\n\n        if (this.zeroIn(x)) {\n            // mixed considering zero in both ends\n            return this.WHOLE;\n        }\n\n        if (x.hi < 0) {\n            // negative / v\n            return new MatInterval(this.divLo(x.hi, v), Number.POSITIVE_INFINITY);\n        }\n        // positive / v\n        return new MatInterval(Number.NEGATIVE_INFINITY, this.divHi(x.lo, v));\n    },\n\n    /**\n     * @private\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    divZero: function (x) {\n        if (x.lo === 0 && x.hi === 0) {\n            return x;\n        }\n        return this.WHOLE;\n    },\n\n    /*\n     * Algebra\n     */\n    /**\n     * x mod y:  x - n * y\n     * @param {JXG.Math.Interval|Number} x\n     * @param {JXG.Math.Interval|Number} y\n     * @returns JXG.Math.Interval\n     */\n    fmod: function (x, y) {\n        var yb, n;\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return this.EMPTY.clone();\n        }\n        yb = x.lo < 0 ? y.lo : y.hi;\n        n = x.lo / yb;\n        if (n < 0) {\n            n = Math.ceil(n);\n        } else {\n            n = Math.floor(n);\n        }\n        // x mod y = x - n * y\n        return this.sub(x, this.mul(y, new MatInterval(n)));\n    },\n\n    /**\n     * 1 / x\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    multiplicativeInverse: function (x) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        if (this.zeroIn(x)) {\n            if (x.lo !== 0) {\n                if (x.hi !== 0) {\n                    // [negative, positive]\n                    return this.WHOLE;\n                }\n                // [negative, zero]\n                return new MatInterval(Number.NEGATIVE_INFINITY, this.divHi(1, x.lo));\n            }\n            if (x.hi !== 0) {\n                // [zero, positive]\n                return new MatInterval(this.divLo(1, x.hi), Number.POSITIVE_INFINITY);\n            }\n            // [zero, zero]\n            return this.EMPTY.clone();\n        }\n        // [positive, positive]\n        return new MatInterval(this.divLo(1, x.hi), this.divHi(1, x.lo));\n    },\n\n    /**\n     * x<sup>power</sup>\n     * @param {JXG.Math.Interval|Number} x\n     * @param {JXG.Math.Interval|Number} power\n     * @returns JXG.Math.Interval\n     */\n    pow: function (x, power) {\n        var yl, yh;\n\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        if (this.isInterval(power)) {\n            if (!this.isSingleton(power)) {\n                return this.EMPTY.clone();\n            }\n            power = power.lo;\n        }\n\n        if (power === 0) {\n            if (x.lo === 0 && x.hi === 0) {\n                // 0^0\n                return this.EMPTY.clone();\n            }\n            // x^0\n            return this.ONE.clone();\n        }\n        if (power < 0) {\n            // compute [1 / x]^-power if power is negative\n            return this.pow(this.multiplicativeInverse(x), -power);\n        }\n\n        // power > 0\n        if (power % 1 === 0) {\n            // isSafeInteger(power) as boolean) {\n            // power is integer\n            if (x.hi < 0) {\n                // [negative, negative]\n                // assume that power is even so the operation will yield a positive interval\n                // if not then just switch the sign and order of the interval bounds\n                yl = this.powLo(-x.hi, power);\n                yh = this.powHi(-x.lo, power);\n                if ((power & 1) === 1) {\n                    // odd power\n                    return new MatInterval(-yh, -yl);\n                }\n                // even power\n                return new MatInterval(yl, yh);\n            }\n            if (x.lo < 0) {\n                // [negative, positive]\n                if ((power & 1) === 1) {\n                    return new MatInterval(-this.powLo(-x.lo, power), this.powHi(x.hi, power));\n                }\n                // even power means that any negative number will be zero (min value = 0)\n                // and the max value will be the max of x.lo^power, x.hi^power\n                return new MatInterval(0, this.powHi(Math.max(-x.lo, x.hi), power));\n            }\n            // [positive, positive]\n            return new MatInterval(this.powLo(x.lo, power), this.powHi(x.hi, power));\n        }\n        console.warn(\n            \"power is not an integer, you should use nth-root instead, returning an empty interval\"\n        );\n        return this.EMPTY.clone();\n    },\n\n    /**\n     * sqrt(x)\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    sqrt: function (x) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        return this.nthRoot(x, 2);\n    },\n\n    /**\n     * x<sup>1/n</sup>\n     * @param {JXG.Math.Interval|Number} x\n     * @param {Number} n\n     * @returns JXG.Math.Interval\n     */\n    nthRoot: function (x, n) {\n        var power, yl, yh, yp, yn;\n\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (this.isEmpty(x) || n < 0) {\n            // compute 1 / x^-power if power is negative\n            return this.EMPTY.clone();\n        }\n\n        // singleton interval check\n        if (this.isInterval(n)) {\n            if (!this.isSingleton(n)) {\n                return this.EMPTY.clone();\n            }\n            n = n.lo;\n        }\n\n        power = 1 / n;\n        if (x.hi < 0) {\n            // [negative, negative]\n            //if ((isSafeInteger(n) as boolean) && (n & 1) === 1) {\n            if (n % 1 === 0 && (n & 1) === 1) {\n                // when n is odd we can always take the nth root\n                yl = this.powHi(-x.lo, power);\n                yh = this.powLo(-x.hi, power);\n                return new MatInterval(-yl, -yh);\n            }\n\n            // n is not odd therefore there's no nth root\n            return this.EMPTY.clone();\n        }\n        if (x.lo < 0) {\n            // [negative, positive]\n            yp = this.powHi(x.hi, power);\n            // if ((isSafeInteger(n) as boolean) && (n & 1) === 1) {\n            if (n % 1 === 0 && (n & 1) === 1) {\n                // nth root of x.lo is possible (n is odd)\n                yn = -this.powHi(-x.lo, power);\n                return new MatInterval(yn, yp);\n            }\n            return new MatInterval(0, yp);\n        }\n        // [positive, positive]\n        return new MatInterval(this.powLo(x.lo, power), this.powHi(x.hi, power));\n    },\n\n    /*\n     * Misc\n     */\n    /**\n     *\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    exp: function (x) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return new MatInterval(this.expLo(x.lo), this.expHi(x.hi));\n    },\n\n    /**\n     * Natural log\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    log: function (x) {\n        var l;\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        l = x.lo <= 0 ? Number.NEGATIVE_INFINITY : this.logLo(x.lo);\n        return new MatInterval(l, this.logHi(x.hi));\n    },\n\n    /**\n     * Natural log, alias for {@link JXG.Math.IntervalArithmetic#log}.\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    ln: function (x) {\n        return this.log(x);\n    },\n\n    // export const LOG_EXP_10 = this.log(new MatInterval(10, 10))\n    // export const LOG_EXP_2 = log(new MatInterval(2, 2))\n    /**\n     * Logarithm to base 10.\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    log10: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return this.div(this.log(x), this.log(new MatInterval(10, 10)));\n    },\n\n    /**\n     * Logarithm to base 2.\n     * @param {JXG.Math.Interval|Number} x\n     * @returns JXG.Math.Interval\n     */\n    log2: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return this.div(this.log(x), this.log(new MatInterval(2, 2)));\n    },\n\n    /**\n     * Hull of intervals x and y\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    hull: function (x, y) {\n        var badX = this.isEmpty(x),\n            badY = this.isEmpty(y);\n        if (badX && badY) {\n            return this.EMPTY.clone();\n        }\n        if (badX) {\n            return y.clone();\n        }\n        if (badY) {\n            return x.clone();\n        }\n        return new MatInterval(Math.min(x.lo, y.lo), Math.max(x.hi, y.hi));\n    },\n\n    /**\n     * Intersection of intervals x and y\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    intersection: function (x, y) {\n        var lo, hi;\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return this.EMPTY.clone();\n        }\n        lo = Math.max(x.lo, y.lo);\n        hi = Math.min(x.hi, y.hi);\n        if (lo <= hi) {\n            return new MatInterval(lo, hi);\n        }\n        return this.EMPTY.clone();\n    },\n\n    /**\n     * Union of overlapping intervals x and y\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    union: function (x, y) {\n        if (!this.intervalsOverlap(x, y)) {\n            throw new Error(\"Interval#unions do not overlap\");\n        }\n        return new MatInterval(Math.min(x.lo, y.lo), Math.max(x.hi, y.hi));\n    },\n\n    /**\n     * Difference of overlapping intervals x and y\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    difference: function (x, y) {\n        if (this.isEmpty(x) || this.isWhole(y)) {\n            return this.EMPTY.clone();\n        }\n        if (this.intervalsOverlap(x, y)) {\n            if (x.lo < y.lo && y.hi < x.hi) {\n                // difference creates multiple subsets\n                throw new Error(\"Interval.difference: difference creates multiple intervals\");\n            }\n\n            // handle corner cases first\n            if ((y.lo <= x.lo && y.hi === Infinity) || (y.hi >= x.hi && y.lo === -Infinity)) {\n                return this.EMPTY.clone();\n            }\n\n            // NOTE: empty interval is handled automatically\n            // e.g.\n            //\n            //    n = difference([0,1], [0,1]) // n = Interval(next(1), 1) = EMPTY\n            //    isEmpty(n) === true\n            //\n            if (y.lo <= x.lo) {\n                return new MatInterval().halfOpenLeft(y.hi, x.hi);\n            }\n\n            // y.hi >= x.hi\n            return new MatInterval().halfOpenRight(x.lo, y.lo);\n        }\n        return x.clone();\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    width: function (x) {\n        if (this.isEmpty(x)) {\n            return 0;\n        }\n        return this.subHi(x.hi, x.lo);\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    abs: function (x) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        if (x.lo >= 0) {\n            return x.clone();\n        }\n        if (x.hi <= 0) {\n            return this.negative(x);\n        }\n        return new MatInterval(0, Math.max(-x.lo, x.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    max: function (x, y) {\n        var badX = this.isEmpty(x),\n            badY = this.isEmpty(y);\n        if (badX && badY) {\n            return this.EMPTY.clone();\n        }\n        if (badX) {\n            return y.clone();\n        }\n        if (badY) {\n            return x.clone();\n        }\n        return new MatInterval(Math.max(x.lo, y.lo), Math.max(x.hi, y.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns JXG.Math.Interval\n     */\n    min: function (x, y) {\n        var badX = this.isEmpty(x),\n            badY = this.isEmpty(y);\n        if (badX && badY) {\n            return this.EMPTY.clone();\n        }\n        if (badX) {\n            return y.clone();\n        }\n        if (badY) {\n            return x.clone();\n        }\n        return new MatInterval(Math.min(x.lo, y.lo), Math.min(x.hi, y.hi));\n    },\n\n    /*\n     * Trigonometric\n     */\n    onlyInfinity: function (x) {\n        return !isFinite(x.lo) && x.lo === x.hi;\n    },\n\n    _handleNegative: function (interval) {\n        var n;\n        if (interval.lo < 0) {\n            if (interval.lo === -Infinity) {\n                interval.lo = 0;\n                interval.hi = Infinity;\n            } else {\n                n = Math.ceil(-interval.lo / this.piTwiceLow);\n                interval.lo += this.piTwiceLow * n;\n                interval.hi += this.piTwiceLow * n;\n            }\n        }\n        return interval;\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    cos: function (x) {\n        var cache, pi2, t, cosv, lo, hi, rlo, rhi;\n\n        if (this.isEmpty(x) || this.onlyInfinity(x)) {\n            return this.EMPTY.clone();\n        }\n\n        // create a clone of `x` because the clone is going to be modified\n        cache = new MatInterval().set(x.lo, x.hi);\n        this._handleNegative(cache);\n\n        pi2 = this.PI_TWICE;\n        t = this.fmod(cache, pi2);\n        if (this.width(t) >= pi2.lo) {\n            return new MatInterval(-1, 1);\n        }\n\n        // when t.lo > pi it's the same as\n        // -cos(t - pi)\n        if (t.lo >= this.piHigh) {\n            cosv = this.cos(this.sub(t, this.PI));\n            return this.negative(cosv);\n        }\n\n        lo = t.lo;\n        hi = t.hi;\n        rlo = this.cosLo(hi);\n        rhi = this.cosHi(lo);\n        // it's ensured that t.lo < pi and that t.lo >= 0\n        if (hi <= this.piLow) {\n            // when t.hi < pi\n            // [cos(t.lo), cos(t.hi)]\n            return new MatInterval(rlo, rhi);\n        }\n        if (hi <= pi2.lo) {\n            // when t.hi < 2pi\n            // [-1, max(cos(t.lo), cos(t.hi))]\n            return new MatInterval(-1, Math.max(rlo, rhi));\n        }\n        // t.lo < pi and t.hi > 2pi\n        return new MatInterval(-1, 1);\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    sin: function (x) {\n        if (this.isEmpty(x) || this.onlyInfinity(x)) {\n            return this.EMPTY.clone();\n        }\n        return this.cos(this.sub(x, this.PI_HALF));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    tan: function (x) {\n        var cache, t, pi;\n        if (this.isEmpty(x) || this.onlyInfinity(x)) {\n            return this.EMPTY.clone();\n        }\n\n        // create a clone of `x` because the clone is going to be modified\n        cache = new MatInterval().set(x.lo, x.hi);\n        this._handleNegative(cache);\n\n        pi = this.PI;\n        t = this.fmod(cache, pi);\n        if (t.lo >= this.piHalfLow) {\n            t = this.sub(t, pi);\n        }\n        if (t.lo <= -this.piHalfLow || t.hi >= this.piHalfLow) {\n            return this.WHOLE.clone();\n        }\n        return new MatInterval(this.tanLo(t.lo), this.tanHi(t.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    asin: function (x) {\n        var lo, hi;\n        if (this.isEmpty(x) || x.hi < -1 || x.lo > 1) {\n            return this.EMPTY.clone();\n        }\n        lo = x.lo <= -1 ? -this.piHalfHigh : this.asinLo(x.lo);\n        hi = x.hi >= 1 ? this.piHalfHigh : this.asinHi(x.hi);\n        return new MatInterval(lo, hi);\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    acos: function (x) {\n        var lo, hi;\n        if (this.isEmpty(x) || x.hi < -1 || x.lo > 1) {\n            return this.EMPTY.clone();\n        }\n        lo = x.hi >= 1 ? 0 : this.acosLo(x.hi);\n        hi = x.lo <= -1 ? this.piHigh : this.acosHi(x.lo);\n        return new MatInterval(lo, hi);\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    acot: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return new MatInterval(this.acotLo(x.lo), this.acotHi(x.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    atan: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return new MatInterval(this.atanLo(x.lo), this.atanHi(x.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    sinh: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return new MatInterval(this.sinhLo(x.lo), this.sinhHi(x.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    cosh: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        if (x.hi < 0) {\n            return new MatInterval(this.coshLo(x.hi), this.coshHi(x.lo));\n        }\n        if (x.lo >= 0) {\n            return new MatInterval(this.coshLo(x.lo), this.coshHi(x.hi));\n        }\n        return new MatInterval(1, this.coshHi(-x.lo > x.hi ? x.lo : x.hi));\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @returns JXG.Math.Interval\n     */\n    tanh: function (x) {\n        if (this.isEmpty(x)) {\n            return this.EMPTY.clone();\n        }\n        return new MatInterval(this.tanhLo(x.lo), this.tanhHi(x.hi));\n    },\n\n    /*\n     * Relational\n     */\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    equal: function (x, y) {\n        if (this.isEmpty(x)) {\n            return this.isEmpty(y);\n        }\n        return !this.isEmpty(y) && x.lo === y.lo && x.hi === y.hi;\n    },\n\n    // almostEqual: function(x, y): void {\n    //     x = Array.isArray(x) ? x : x.toArray();\n    //     y = Array.isArray(y) ? y : y.toArray();\n    //     assertEps(x[0], y[0])\n    //     assertEps(x[1], y[1])\n    // },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    notEqual: function (x, y) {\n        if (this.isEmpty(x)) {\n            return !this.isEmpty(y);\n        }\n        return this.isEmpty(y) || x.hi < y.lo || x.lo > y.hi;\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    lt: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return false;\n        }\n        return x.hi < y.lo;\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    gt: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return false;\n        }\n        return x.lo > y.hi;\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    leq: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return false;\n        }\n        return x.hi <= y.lo;\n    },\n\n    /**\n     * @param {JXG.Math.Interval} x\n     * @param {JXG.Math.Interval} y\n     * @returns Boolean\n     */\n    geq: function (x, y) {\n        if (Type.isNumber(x)) {\n            x = this.Interval(x);\n        }\n        if (Type.isNumber(y)) {\n            y = this.Interval(y);\n        }\n        if (this.isEmpty(x) || this.isEmpty(y)) {\n            return false;\n        }\n        return x.lo >= y.hi;\n    },\n\n    /*\n     * Constants\n     */\n    piLow: (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30),\n    piHigh: (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30),\n    piHalfLow: ((3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30)) * 0.5,\n    piHalfHigh: ((3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30)) * 0.5,\n    piTwiceLow: ((3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30)) * 2,\n    piTwiceHigh: ((3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30)) * 2,\n\n    /*\n     * Round\n     * Rounding functions for numbers\n     */\n    identity: function (v) {\n        return v;\n    },\n\n    _prev: function (v) {\n        if (v === Infinity) {\n            return v;\n        }\n        return this.nextafter(v, -Infinity);\n    },\n\n    _next: function (v) {\n        if (v === -Infinity) {\n            return v;\n        }\n        return this.nextafter(v, Infinity);\n    },\n\n    prev: function (v) {\n        return this._prev(v);\n    },\n\n    next: function (v) {\n        return this._next(v);\n    },\n\n    toInteger: function (x) {\n        return x < 0 ? Math.ceil(x) : Math.floor(x);\n    },\n\n    addLo: function (x, y) {\n        return this.prev(x + y);\n    },\n    addHi: function (x, y) {\n        return this.next(x + y);\n    },\n    subLo: function (x, y) {\n        return this.prev(x - y);\n    },\n    subHi: function (x, y) {\n        return this.next(x - y);\n    },\n    mulLo: function (x, y) {\n        return this.prev(x * y);\n    },\n    mulHi: function (x, y) {\n        return this.next(x * y);\n    },\n    divLo: function (x, y) {\n        return this.prev(x / y);\n    },\n    divHi: function (x, y) {\n        return this.next(x / y);\n    },\n    intLo: function (x) {\n        return this.toInteger(this.prev(x));\n    },\n    intHi: function (x) {\n        return this.toInteger(this.next(x));\n    },\n    logLo: function (x) {\n        return this.prev(Math.log(x));\n    },\n    logHi: function (x) {\n        return this.next(Math.log(x));\n    },\n    expLo: function (x) {\n        return this.prev(Math.exp(x));\n    },\n    expHi: function (x) {\n        return this.next(Math.exp(x));\n    },\n    sinLo: function (x) {\n        return this.prev(Math.sin(x));\n    },\n    sinHi: function (x) {\n        return this.next(Math.sin(x));\n    },\n    cosLo: function (x) {\n        return this.prev(Math.cos(x));\n    },\n    cosHi: function (x) {\n        return this.next(Math.cos(x));\n    },\n    tanLo: function (x) {\n        return this.prev(Math.tan(x));\n    },\n    tanHi: function (x) {\n        return this.next(Math.tan(x));\n    },\n    asinLo: function (x) {\n        return this.prev(Math.asin(x));\n    },\n    asinHi: function (x) {\n        return this.next(Math.asin(x));\n    },\n    acosLo: function (x) {\n        return this.prev(Math.acos(x));\n    },\n    acosHi: function (x) {\n        return this.next(Math.acos(x));\n    },\n    acotLo: function (x) {\n        return this.prev(Mat.acot(x));\n    },\n    acotHi: function (x) {\n        return this.next(Mat.acot(x));\n    },\n    atanLo: function (x) {\n        return this.prev(Math.atan(x));\n    },\n    atanHi: function (x) {\n        return this.next(Math.atan(x));\n    },\n    sinhLo: function (x) {\n        return this.prev(Mat.sinh(x));\n    },\n    sinhHi: function (x) {\n        return this.next(Mat.sinh(x));\n    },\n    coshLo: function (x) {\n        return this.prev(Mat.cosh(x));\n    },\n    coshHi: function (x) {\n        return this.next(Mat.cosh(x));\n    },\n    tanhLo: function (x) {\n        return this.prev(Mat.tanh(x));\n    },\n    tanhHi: function (x) {\n        return this.next(Mat.tanh(x));\n    },\n    sqrtLo: function (x) {\n        return this.prev(Math.sqrt(x));\n    },\n    sqrtHi: function (x) {\n        return this.next(Math.sqrt(x));\n    },\n\n    powLo: function (x, power) {\n        var y;\n        if (power % 1 !== 0) {\n            // power has decimals\n            return this.prev(Math.pow(x, power));\n        }\n\n        y = (power & 1) === 1 ? x : 1;\n        power >>= 1;\n        while (power > 0) {\n            x = this.mulLo(x, x);\n            if ((power & 1) === 1) {\n                y = this.mulLo(x, y);\n            }\n            power >>= 1;\n        }\n        return y;\n    },\n\n    powHi: function (x, power) {\n        var y;\n        if (power % 1 !== 0) {\n            // power has decimals\n            return this.next(Math.pow(x, power));\n        }\n\n        y = (power & 1) === 1 ? x : 1;\n        power >>= 1;\n        while (power > 0) {\n            x = this.mulHi(x, x);\n            if ((power & 1) === 1) {\n                y = this.mulHi(x, y);\n            }\n            power >>= 1;\n        }\n        return y;\n    },\n\n    /**\n     * @ignore\n     * @private\n     */\n    disable: function () {\n        this.next = this.prev = this.identity;\n    },\n\n    /**\n     * @ignore\n     * @private\n     */\n    enable: function () {\n        this.prev = function (v) {\n            return this._prev(v);\n        };\n\n        this.next = function (v) {\n            return this._next(v);\n        };\n    },\n\n    /*\n     * nextafter\n     */\n    SMALLEST_DENORM: Math.pow(2, -1074),\n    UINT_MAX: -1 >>> 0,\n\n    nextafter: function (x, y) {\n        var lo, hi;\n\n        if (isNaN(x) || isNaN(y)) {\n            return NaN;\n        }\n        if (x === y) {\n            return x;\n        }\n        if (x === 0) {\n            if (y < 0) {\n                return -this.SMALLEST_DENORM;\n            }\n            return this.SMALLEST_DENORM;\n        }\n        hi = doubleBits.hi(x);\n        lo = doubleBits.lo(x);\n        if (y > x === x > 0) {\n            if (lo === this.UINT_MAX) {\n                hi += 1;\n                lo = 0;\n            } else {\n                lo += 1;\n            }\n        } else {\n            if (lo === 0) {\n                lo = this.UINT_MAX;\n                hi -= 1;\n            } else {\n                lo -= 1;\n            }\n        }\n        return doubleBits.pack(lo, hi);\n    }\n};\n\nJXG.Math.IntervalArithmetic.PI = new MatInterval(\n    Mat.IntervalArithmetic.piLow,\n    Mat.IntervalArithmetic.piHigh\n);\nJXG.Math.IntervalArithmetic.PI_HALF = new MatInterval(\n    Mat.IntervalArithmetic.piHalfLow,\n    Mat.IntervalArithmetic.piHalfHigh\n);\nJXG.Math.IntervalArithmetic.PI_TWICE = new MatInterval(\n    Mat.IntervalArithmetic.piTwiceLow,\n    Mat.IntervalArithmetic.piTwiceHigh\n);\nJXG.Math.IntervalArithmetic.ZERO = new MatInterval(0);\nJXG.Math.IntervalArithmetic.ONE = new MatInterval(1);\nJXG.Math.IntervalArithmetic.WHOLE = new MatInterval().setWhole();\nJXG.Math.IntervalArithmetic.EMPTY = new MatInterval().setEmpty();\n\nexport default JXG.Math.IntervalArithmetic;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}