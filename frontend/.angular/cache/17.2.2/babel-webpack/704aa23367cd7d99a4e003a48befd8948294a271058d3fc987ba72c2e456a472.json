{"ast":null,"code":"/*\n    Copyright 2018-2023\n        Alfred Wassermann,\n        Tigran Saluev\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview In this file the Comb element is defined.\n */\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\n/**\n * @class A comb to display domains of inequalities.\n * @pseudo\n * @name Comb\n * @augments JXG.Curve\n * @constructor\n * @type JXG.Curve\n * @throws {Error} If the element cannot be constructed with the given parent\n *  objects an exception is thrown.\n * Parameter options:\n * @param {JXG.Point,array,function_JXG.Point,array,function} point1,point2 Parent elements\n * can be two elements either of type {@link JXG.Point} or array of\n * numbers describing the coordinates of a point. In the latter case the point\n * will be constructed automatically as a fixed invisible point.\n * It is possible to provide a function returning an array or a point,\n * instead of providing an array or a point.\n * @example\n * // Create a simple horizontal comb with invisible endpoints\n * var c = board.create('comb', [[1, 0], [3, 0]]);\n *\n * </pre><div class=\"jxgbox\" id=\"JXG951ccb6a-52bc-4dc2-80e9-43db064f0f1b\" style=\"width: 300px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n * (function () {\n *   var board = JXG.JSXGraph.initBoard('JXG951ccb6a-52bc-4dc2-80e9-43db064f0f1b', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright: false, shownavigation: false}),\n *     c = board.create('comb', [[1, 0], [3, 0]]);\n * })();\n * </script><pre>\n *\n * @example\n * var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n * var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n * var c1 = board.create('comb', [p1, p2], {width: 0.2, frequency: 0.1, angle: Math.PI / 4});\n *\n * </pre><div id=\"JXG04186fd2-6340-11e8-9fb9-901b0e1b8723\" class=\"jxgbox\" style=\"width: 300px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG04186fd2-6340-11e8-9fb9-901b0e1b8723',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n *     var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n *     var c1 = board.create('comb', [p1, p2], {width: 0.2, frequency: 0.1, angle: Math.PI / 4});\n *\n *     })();\n *\n * </script><pre>\n *\n * @example\n * var s = board.create('slider', [[1,3], [4,3], [0.1, 0.3, 0.8]]);\n * var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n * var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n * var c1 = board.create('comb', [p1, p2], {\n *     width: function(){ return 4*s.Value(); },\n *     reverse: function(){ return (s.Value()<0.5) ? false : true; },\n *     frequency: function(){ return s.Value(); },\n *     angle: function(){ return s.Value() * Math.PI / 2; },\n *     curve: {\n *         strokeColor: 'red'\n *     }\n * });\n *\n * </pre><div id=\"JXG6eb1bcd1-407e-4f13-8f0c-45ef39a0cfb3\" class=\"jxgbox\" style=\"width: 300px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG6eb1bcd1-407e-4f13-8f0c-45ef39a0cfb3',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     var s = board.create('slider', [[1,3], [4,3], [0.1, 0.3, 0.8]]);\n *     var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n *     var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n *     var c1 = board.create('comb', [p1, p2], {\n *         width: function(){ return 4*s.Value(); },\n *         reverse: function(){ return (s.Value()<0.5) ? false : true; },\n *         frequency: function(){ return s.Value(); },\n *         angle: function(){ return s.Value() * Math.PI / 2; },\n *         curve: {\n *             strokeColor: 'red'\n *         }\n *     });\n *\n *     })();\n *\n * </script><pre>\n *\n */\nJXG.createComb = function (board, parents, attributes) {\n  var p1, p2, c, attr, parent_types;\n  //ds, angle, width, p;\n\n  if (parents.length === 2) {\n    // point 1 given by coordinates\n    if (Type.isArray(parents[0]) && parents[0].length > 1) {\n      attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point1\");\n      p1 = board.create(\"point\", parents[0], attr);\n    } else if (Type.isString(parents[0]) || Type.isPoint(parents[0])) {\n      p1 = board.select(parents[0]);\n    } else if (Type.isFunction(parents[0]) && Type.isPoint(parents[0]())) {\n      p1 = parents[0]();\n    } else if (Type.isFunction(parents[0]) && parents[0]().length && parents[0]().length >= 2) {\n      attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point1\");\n      p1 = JXG.createPoint(board, parents[0](), attr);\n    } else {\n      throw new Error(\"JSXGraph: Can't create comb with parent types '\" + typeof parents[0] + \"' and '\" + typeof parents[1] + \"'.\" + \"\\nPossible parent types: [point,point], [[x1,y1],[x2,y2]]\");\n    }\n\n    // point 2 given by coordinates\n    if (Type.isArray(parents[1]) && parents[1].length > 1) {\n      attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point2\");\n      p2 = board.create(\"point\", parents[1], attr);\n    } else if (Type.isString(parents[1]) || Type.isPoint(parents[1])) {\n      p2 = board.select(parents[1]);\n    } else if (Type.isFunction(parents[1]) && Type.isPoint(parents[1]())) {\n      p2 = parents[1]();\n    } else if (Type.isFunction(parents[1]) && parents[1]().length && parents[1]().length >= 2) {\n      attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point2\");\n      p2 = JXG.createPoint(board, parents[1](), attr);\n    } else {\n      throw new Error(\"JSXGraph: Can't create comb with parent types '\" + typeof parents[0] + \"' and '\" + typeof parents[1] + \"'.\" + \"\\nPossible parent types: [point,point], [[x1,y1],[x2,y2]]\");\n    }\n  } else {\n    parent_types = parents.map(function (parent) {\n      return \"'\" + typeof parent + \"'\";\n    });\n    throw new Error(\"JSXGraph: Can't create comb with parent types \" + parent_types.join(\", \") + \".\" + \"\\nPossible parent types: [point,point], [[x1,y1],[x2,y2]]\");\n  }\n  attr = Type.copyAttributes(attributes, board.options, 'comb');\n  // Type.merge(attr, Type.copyAttributes(attributes, board.options, 'comb', 'curve'));\n  c = board.create('curve', [[0], [0]], attr);\n\n  /**\n   * @class\n   * @ignore\n   */\n  c.updateDataArray = function () {\n    var s = 0,\n      max_s = p1.Dist(p2),\n      cs,\n      sn,\n      dx,\n      dy,\n      x,\n      y,\n      f,\n      p1_inner = p1,\n      p2_inner = p2,\n      ds,\n      angle,\n      width;\n    ds = Type.evaluate(c.visProp.frequency);\n    angle = -Type.evaluate(c.visProp.angle);\n    width = Type.evaluate(c.visProp.width);\n    if (Type.evaluate(c.visProp.reverse)) {\n      p1_inner = p2;\n      p2_inner = p1;\n      angle = -angle;\n    }\n    cs = Math.cos(angle);\n    sn = Math.sin(angle);\n    dx = (p2_inner.X() - p1_inner.X()) / max_s;\n    dy = (p2_inner.Y() - p1_inner.Y()) / max_s;\n\n    // But instead of lifting by sin(angle), we want lifting by width.\n    cs *= width / Math.abs(sn);\n    sn *= width / Math.abs(sn);\n    this.dataX = [];\n    this.dataY = [];\n    // TODO Handle infinite bounds?\n    while (s < max_s) {\n      x = p1_inner.X() + dx * s;\n      y = p1_inner.Y() + dy * s;\n\n      // We may need to cut the last piece of a comb.\n      f = Math.min(cs, max_s - s) / Math.abs(cs);\n      sn *= f;\n      cs *= f;\n      this.dataX.push(x);\n      this.dataY.push(y);\n      this.dataX.push(x + dx * cs + dy * sn);\n      this.dataY.push(y - dx * sn + dy * cs);\n      this.dataX.push(NaN); // Force a jump\n      this.dataY.push(NaN);\n      s += ds;\n    }\n  };\n  return c;\n};\nJXG.registerElement(\"comb\", JXG.createComb);\n\n// export default {\n//     createComb: JXG.createComb\n// };","map":{"version":3,"names":["JXG","Type","createComb","board","parents","attributes","p1","p2","c","attr","parent_types","length","isArray","copyAttributes","options","create","isString","isPoint","select","isFunction","createPoint","Error","map","parent","join","updateDataArray","s","max_s","Dist","cs","sn","dx","dy","x","y","f","p1_inner","p2_inner","ds","angle","width","evaluate","visProp","frequency","reverse","Math","cos","sin","X","Y","abs","dataX","dataY","min","push","NaN","registerElement"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/element/comb.js"],"sourcesContent":["/*\n    Copyright 2018-2023\n        Alfred Wassermann,\n        Tigran Saluev\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview In this file the Comb element is defined.\n */\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\n/**\n * @class A comb to display domains of inequalities.\n * @pseudo\n * @name Comb\n * @augments JXG.Curve\n * @constructor\n * @type JXG.Curve\n * @throws {Error} If the element cannot be constructed with the given parent\n *  objects an exception is thrown.\n * Parameter options:\n * @param {JXG.Point,array,function_JXG.Point,array,function} point1,point2 Parent elements\n * can be two elements either of type {@link JXG.Point} or array of\n * numbers describing the coordinates of a point. In the latter case the point\n * will be constructed automatically as a fixed invisible point.\n * It is possible to provide a function returning an array or a point,\n * instead of providing an array or a point.\n * @example\n * // Create a simple horizontal comb with invisible endpoints\n * var c = board.create('comb', [[1, 0], [3, 0]]);\n *\n * </pre><div class=\"jxgbox\" id=\"JXG951ccb6a-52bc-4dc2-80e9-43db064f0f1b\" style=\"width: 300px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n * (function () {\n *   var board = JXG.JSXGraph.initBoard('JXG951ccb6a-52bc-4dc2-80e9-43db064f0f1b', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright: false, shownavigation: false}),\n *     c = board.create('comb', [[1, 0], [3, 0]]);\n * })();\n * </script><pre>\n *\n * @example\n * var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n * var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n * var c1 = board.create('comb', [p1, p2], {width: 0.2, frequency: 0.1, angle: Math.PI / 4});\n *\n * </pre><div id=\"JXG04186fd2-6340-11e8-9fb9-901b0e1b8723\" class=\"jxgbox\" style=\"width: 300px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG04186fd2-6340-11e8-9fb9-901b0e1b8723',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n *     var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n *     var c1 = board.create('comb', [p1, p2], {width: 0.2, frequency: 0.1, angle: Math.PI / 4});\n *\n *     })();\n *\n * </script><pre>\n *\n * @example\n * var s = board.create('slider', [[1,3], [4,3], [0.1, 0.3, 0.8]]);\n * var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n * var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n * var c1 = board.create('comb', [p1, p2], {\n *     width: function(){ return 4*s.Value(); },\n *     reverse: function(){ return (s.Value()<0.5) ? false : true; },\n *     frequency: function(){ return s.Value(); },\n *     angle: function(){ return s.Value() * Math.PI / 2; },\n *     curve: {\n *         strokeColor: 'red'\n *     }\n * });\n *\n * </pre><div id=\"JXG6eb1bcd1-407e-4f13-8f0c-45ef39a0cfb3\" class=\"jxgbox\" style=\"width: 300px; height: 300px;\"></div>\n * <script type=\"text/javascript\">\n *     (function() {\n *         var board = JXG.JSXGraph.initBoard('JXG6eb1bcd1-407e-4f13-8f0c-45ef39a0cfb3',\n *             {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n *     var s = board.create('slider', [[1,3], [4,3], [0.1, 0.3, 0.8]]);\n *     var p1 = board.create('glider', [-3, 0, board.defaultAxes.x]);\n *     var p2 = board.create('glider', [-1, 0, board.defaultAxes.x]);\n *     var c1 = board.create('comb', [p1, p2], {\n *         width: function(){ return 4*s.Value(); },\n *         reverse: function(){ return (s.Value()<0.5) ? false : true; },\n *         frequency: function(){ return s.Value(); },\n *         angle: function(){ return s.Value() * Math.PI / 2; },\n *         curve: {\n *             strokeColor: 'red'\n *         }\n *     });\n *\n *     })();\n *\n * </script><pre>\n *\n */\nJXG.createComb = function (board, parents, attributes) {\n    var p1, p2, c, attr, parent_types;\n    //ds, angle, width, p;\n\n    if (parents.length === 2) {\n        // point 1 given by coordinates\n        if (Type.isArray(parents[0]) && parents[0].length > 1) {\n            attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point1\");\n            p1 = board.create(\"point\", parents[0], attr);\n        } else if (Type.isString(parents[0]) || Type.isPoint(parents[0])) {\n            p1 = board.select(parents[0]);\n        } else if (Type.isFunction(parents[0]) && Type.isPoint(parents[0]())) {\n            p1 = parents[0]();\n        } else if (\n            Type.isFunction(parents[0]) &&\n            parents[0]().length &&\n            parents[0]().length >= 2\n        ) {\n            attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point1\");\n            p1 = JXG.createPoint(board, parents[0](), attr);\n        } else {\n            throw new Error(\n                \"JSXGraph: Can't create comb with parent types '\" +\n                    typeof parents[0] +\n                    \"' and '\" +\n                    typeof parents[1] +\n                    \"'.\" +\n                    \"\\nPossible parent types: [point,point], [[x1,y1],[x2,y2]]\"\n            );\n        }\n\n        // point 2 given by coordinates\n        if (Type.isArray(parents[1]) && parents[1].length > 1) {\n            attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point2\");\n            p2 = board.create(\"point\", parents[1], attr);\n        } else if (Type.isString(parents[1]) || Type.isPoint(parents[1])) {\n            p2 = board.select(parents[1]);\n        } else if (Type.isFunction(parents[1]) && Type.isPoint(parents[1]())) {\n            p2 = parents[1]();\n        } else if (\n            Type.isFunction(parents[1]) &&\n            parents[1]().length &&\n            parents[1]().length >= 2\n        ) {\n            attr = Type.copyAttributes(attributes, board.options, \"comb\", \"point2\");\n            p2 = JXG.createPoint(board, parents[1](), attr);\n        } else {\n            throw new Error(\n                \"JSXGraph: Can't create comb with parent types '\" +\n                    typeof parents[0] +\n                    \"' and '\" +\n                    typeof parents[1] +\n                    \"'.\" +\n                    \"\\nPossible parent types: [point,point], [[x1,y1],[x2,y2]]\"\n            );\n        }\n    } else {\n        parent_types = parents.map(function (parent) {\n            return \"'\" + typeof parent + \"'\";\n        });\n        throw new Error(\n            \"JSXGraph: Can't create comb with parent types \" +\n                parent_types.join(\", \") +\n                \".\" +\n                \"\\nPossible parent types: [point,point], [[x1,y1],[x2,y2]]\"\n        );\n    }\n\n    attr = Type.copyAttributes(attributes, board.options, 'comb');\n    // Type.merge(attr, Type.copyAttributes(attributes, board.options, 'comb', 'curve'));\n     c = board.create('curve', [[0], [0]], attr);\n\n    /**\n     * @class\n     * @ignore\n     */\n    c.updateDataArray = function () {\n        var s = 0,\n            max_s = p1.Dist(p2),\n            cs, sn, dx, dy, x, y, f,\n            p1_inner = p1,\n            p2_inner = p2,\n            ds, angle, width;\n\n        ds = Type.evaluate(c.visProp.frequency);\n        angle = -Type.evaluate(c.visProp.angle);\n        width = Type.evaluate(c.visProp.width);\n        if (Type.evaluate(c.visProp.reverse)) {\n            p1_inner = p2;\n            p2_inner = p1;\n            angle = -angle;\n        }\n        cs = Math.cos(angle);\n        sn = Math.sin(angle);\n        dx = (p2_inner.X() - p1_inner.X()) / max_s;\n        dy = (p2_inner.Y() - p1_inner.Y()) / max_s;\n\n        // But instead of lifting by sin(angle), we want lifting by width.\n        cs *= width / Math.abs(sn);\n        sn *= width / Math.abs(sn);\n\n        this.dataX = [];\n        this.dataY = [];\n        // TODO Handle infinite bounds?\n        while (s < max_s) {\n            x = p1_inner.X() + dx * s;\n            y = p1_inner.Y() + dy * s;\n\n            // We may need to cut the last piece of a comb.\n            f = Math.min(cs, max_s - s) / Math.abs(cs);\n            sn *= f;\n            cs *= f;\n\n            this.dataX.push(x);\n            this.dataY.push(y);\n\n            this.dataX.push(x + dx * cs + dy * sn);\n            this.dataY.push(y - dx * sn + dy * cs);\n\n            this.dataX.push(NaN); // Force a jump\n            this.dataY.push(NaN);\n            s += ds;\n        }\n    };\n\n    return c;\n};\n\nJXG.registerElement(\"comb\", JXG.createComb);\n\n// export default {\n//     createComb: JXG.createComb\n// };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,OAAOA,GAAG,MAAM,QAAQ;AACxB,OAAOC,IAAI,MAAM,eAAe;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACE,UAAU,GAAG,UAAUC,KAAK,EAAEC,OAAO,EAAEC,UAAU,EAAE;EACnD,IAAIC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAEC,IAAI,EAAEC,YAAY;EACjC;;EAEA,IAAIN,OAAO,CAACO,MAAM,KAAK,CAAC,EAAE;IACtB;IACA,IAAIV,IAAI,CAACW,OAAO,CAACR,OAAO,CAAC,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACO,MAAM,GAAG,CAAC,EAAE;MACnDF,IAAI,GAAGR,IAAI,CAACY,cAAc,CAACR,UAAU,EAAEF,KAAK,CAACW,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC;MACvER,EAAE,GAAGH,KAAK,CAACY,MAAM,CAAC,OAAO,EAAEX,OAAO,CAAC,CAAC,CAAC,EAAEK,IAAI,CAAC;IAChD,CAAC,MAAM,IAAIR,IAAI,CAACe,QAAQ,CAACZ,OAAO,CAAC,CAAC,CAAC,CAAC,IAAIH,IAAI,CAACgB,OAAO,CAACb,OAAO,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}