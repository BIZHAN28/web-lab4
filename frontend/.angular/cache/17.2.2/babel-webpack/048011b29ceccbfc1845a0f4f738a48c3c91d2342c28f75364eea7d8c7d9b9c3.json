{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Carsten Miller,\n        Andreas Walter,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n/*global JXG:true, define: true*/\n\n/**\n * Create axes and rear and front walls of the\n * view3d bounding box bbox3D.\n */\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n// import Mat from \"../math/math\";\n// import Geometry from \"../math/geometry\";\n\nJXG.createAxes3D = function (board, parents, attributes) {\n  var view = parents[0],\n    directions = [\"x\", \"y\", \"z\"],\n    suffixAxis = \"Axis\",\n    sides = [\"Rear\", \"Front\"],\n    rear = [0, 0, 0],\n    // x, y, z\n    front = [0, 0, 0],\n    // x, y, z\n    i,\n    j,\n    k,\n    i1,\n    i2,\n    attr,\n    pos,\n    dir,\n    dir1,\n    from,\n    to,\n    vec1,\n    vec2,\n    range1,\n    range2,\n    na,\n    na_parent,\n    ticks_attr,\n    axes = {};\n  if (Type.exists(view.bbox3D)) {\n    for (i = 0; i < directions.length; i++) {\n      rear[i] = view.bbox3D[i][0];\n      front[i] = view.bbox3D[i][1];\n    }\n  } else {\n    for (i = 0; i < directions.length; i++) {\n      rear[i] = parents[1][i];\n      front[i] = parents[2][1];\n    }\n  }\n\n  // Main 3D axes\n  attr = Type.copyAttributes(attributes, board.options, \"axes3d\");\n  pos = attr.axesposition;\n  for (i = 0; i < directions.length; i++) {\n    // Run through ['x', 'y', 'z']\n    dir = directions[i];\n    na = dir + suffixAxis;\n    if (pos === \"center\") {\n      // Axes centered\n      from = [0, 0, 0];\n      to = [0, 0, 0];\n      to[i] = front[i];\n      axes[na] = view.create(\"axis3d\", [from, to], attr[na.toLowerCase()]);\n    } else {\n      na += \"Border\"; // Axes bordered\n      from = rear.slice();\n      to = front.slice();\n      if (i === 2) {\n        from[1] = front[1];\n        to[0] = rear[0];\n      } else {\n        from[i] = front[i];\n        to[2] = rear[2];\n      }\n      to[i] = front[i];\n      attr[na.toLowerCase()].lastArrow = false;\n      axes[na] = view.create(\"axis3d\", [from, to], attr[na.toLowerCase()]);\n\n      // TODO\n      ticks_attr = {\n        visible: true,\n        // FÃ¼r z-Ticks wird path nicht berechnet\n        minorTicks: 0,\n        tickEndings: [0, 1],\n        drawLabels: false\n      };\n      if (i === 2) {\n        ticks_attr.tickEndings = [1, 0];\n      }\n      axes[na + \"Ticks\"] = view.create(\"ticks\", [axes[na], 1], ticks_attr);\n    }\n  }\n\n  // Origin (2D point)\n  axes.O = view.create(\"intersection\", [axes[directions[0] + suffixAxis], axes[directions[1] + suffixAxis]], {\n    name: \"\",\n    visible: false,\n    withLabel: false\n  });\n\n  // Front and rear planes\n  for (i = 0; i < directions.length; i++) {\n    // Run through ['x', 'y', 'z']\n    i1 = (i + 1) % 3;\n    i2 = (i + 2) % 3;\n    dir = directions[i];\n    for (j = 0; j < sides.length; j++) {\n      // Run through ['Rear', 'Front']\n\n      from = [0, 0, 0];\n      from[i] = j === 0 ? rear[i] : front[i];\n      vec1 = [0, 0, 0];\n      vec2 = [0, 0, 0];\n      vec1[i1] = 1;\n      vec2[i2] = 1;\n      range1 = [rear[i1], front[i1]];\n      range2 = [rear[i2], front[i2]];\n      na = dir + \"Plane\" + sides[j];\n      attr = Type.copyAttributes(attributes, board.options, \"axes3d\", na);\n      axes[na] = view.create(\"plane3d\", [from, vec1, vec2, range1, range2], attr);\n      axes[na].elType = \"axisplane3d\";\n    }\n  }\n\n  // Axes on front and rear planes\n  for (i = 0; i < directions.length; i++) {\n    // Run through ['x', 'y', 'z']\n    dir = directions[i];\n    for (j = 0; j < sides.length; j++) {\n      for (k = 1; k <= 2; k++) {\n        i1 = (i + k) % 3;\n        dir1 = directions[i1];\n        na = dir + \"Plane\" + sides[j] + dir1.toUpperCase() + \"Axis\";\n        na_parent = dir + \"Plane\" + sides[j];\n        from = [0, 0, 0];\n        to = [0, 0, 0];\n        from[i] = to[i] = j === 0 ? rear[i] : front[i];\n        from[i1] = rear[i1];\n        to[i1] = front[i1];\n        attr = Type.copyAttributes(attributes, board.options, \"axes3d\", na);\n        axes[na] = view.create(\"axis3d\", [from, to], attr);\n        axes[na_parent].addChild(axes[na]);\n        axes[na_parent].element2D.inherits.push(axes[na]); // TODO: Access of element2D is not nice\n      }\n    }\n  }\n  return axes;\n};\nJXG.registerElement(\"axes3d\", JXG.createAxes3D);\nJXG.createAxis3D = function (board, parents, attributes) {\n  var view = parents[0],\n    attr,\n    start = parents[1],\n    end = parents[2],\n    el_start,\n    el_end,\n    el;\n\n  // Use 2D points to create axis\n  attr = Type.copyAttributes(attributes.point1, board.options, \"axis3d\", \"point1\");\n  el_start = view.create(\"point\", [function (xx, yy, zz) {\n    return function () {\n      return view.project3DTo2D(xx, yy, zz)[1];\n    };\n  }(start[0], start[1], start[2]), function (xx, yy, zz) {\n    return function () {\n      return view.project3DTo2D(xx, yy, zz)[2];\n    };\n  }(start[0], start[1], start[2])], attr);\n  attr = Type.copyAttributes(attributes.point2, board.options, \"axis3d\", \"point2\");\n  el_end = view.create(\"point\", [function (xx, yy, zz) {\n    return function () {\n      return view.project3DTo2D(xx, yy, zz)[1];\n    };\n  }(end[0], end[1], end[2]), function (xx, yy, zz) {\n    return function () {\n      return view.project3DTo2D(xx, yy, zz)[2];\n    };\n  }(end[0], end[1], end[2])], attr);\n  attr = Type.copyAttributes(attributes, board.options, \"axis3d\");\n  el = view.create(\"arrow\", [el_start, el_end], attr);\n  return el;\n};\nJXG.registerElement(\"axis3d\", JXG.createAxis3D);\nJXG.createMesh3D = function (board, parents, attr) {\n  var view = parents[0],\n    point = parents[1],\n    dir1 = parents[2],\n    range1 = parents[3],\n    dir2 = parents[4],\n    range2 = parents[5],\n    el;\n  el = view.create(\"curve\", [[], []], attr);\n  /**\n   * @ignore\n   */\n  el.updateDataArray = function () {\n    var s1 = range1[0],\n      e1 = range1[1],\n      s2 = range2[0],\n      e2 = range2[1],\n      l1,\n      l2,\n      res,\n      i,\n      sol,\n      v1 = [0, 0, 0],\n      v2 = [0, 0, 0],\n      step = 1,\n      q = [0, 0, 0];\n    this.dataX = [];\n    this.dataY = [];\n    if (Type.isFunction(point)) {\n      q = point().slice(1);\n    } else {\n      for (i = 0; i < 3; i++) {\n        q[i] = Type.evaluate(point[i]);\n      }\n    }\n    for (i = 0; i < 3; i++) {\n      v1[i] = Type.evaluate(dir1[i]);\n      v2[i] = Type.evaluate(dir2[i]);\n    }\n    l1 = JXG.Math.norm(v1, 3);\n    l2 = JXG.Math.norm(v2, 3);\n    for (i = 0; i < 3; i++) {\n      v1[i] /= l1;\n      v2[i] /= l2;\n    }\n\n    // sol = Mat.Geometry.getPlaneBounds(v1, v2, q, s1, e1);\n    // if (sol !== null) {\n    //     s1 = sol[0];\n    //     e1 = sol[1];\n    //     s2 = sol[2];\n    //     e2 = sol[3];\n    // }\n\n    res = view.getMesh([function (u, v) {\n      return q[0] + u * v1[0] + v * v2[0];\n    }, function (u, v) {\n      return q[1] + u * v1[1] + v * v2[1];\n    }, function (u, v) {\n      return q[2] + u * v1[2] + v * v2[2];\n    }], [Math.ceil(s1), Math.floor(e1), (Math.ceil(e1) - Math.floor(s1)) / step], [Math.ceil(s2), Math.floor(e2), (Math.ceil(e2) - Math.floor(s2)) / step]);\n    this.dataX = res[0];\n    this.dataY = res[1];\n  };\n  return el;\n};\nJXG.registerElement(\"mesh3d\", JXG.createMesh3D);","map":{"version":3,"names":["JXG","Type","createAxes3D","board","parents","attributes","view","directions","suffixAxis","sides","rear","front","i","j","k","i1","i2","attr","pos","dir","dir1","from","to","vec1","vec2","range1","range2","na","na_parent","ticks_attr","axes","exists","bbox3D","length","copyAttributes","options","axesposition","create","toLowerCase","slice","lastArrow","visible","minorTicks","tickEndings","drawLabels","O","name","withLabel","elType","toUpperCase","addChild","element2D","inherits","push","registerElement","createAxis3D","start","end","el_start","el_end","el","point1","xx","yy","zz","project3DTo2D","point2","createMesh3D","point","dir2","updateDataArray","s1","e1","s2","e2","l1","l2","res","sol","v1","v2","step","q","dataX","dataY","isFunction","evaluate","Math","norm","getMesh","u","v","ceil","floor"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/3d/box3d.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Carsten Miller,\n        Andreas Walter,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n/*global JXG:true, define: true*/\n\n/**\n * Create axes and rear and front walls of the\n * view3d bounding box bbox3D.\n */\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n// import Mat from \"../math/math\";\n// import Geometry from \"../math/geometry\";\n\nJXG.createAxes3D = function (board, parents, attributes) {\n    var view = parents[0],\n    directions = [\"x\", \"y\", \"z\"],\n    suffixAxis = \"Axis\",\n    sides = [\"Rear\", \"Front\"],\n    rear = [0, 0, 0], // x, y, z\n    front = [0, 0, 0], // x, y, z\n    i, j, k, i1, i2, attr, pos,\n    dir, dir1,\n    from, to, vec1, vec2,\n    range1, range2,\n    na, na_parent,\n    ticks_attr,\n    axes = {};\n\n    if (Type.exists(view.bbox3D)) {\n        for (i = 0; i < directions.length; i++) {\n            rear[i] = view.bbox3D[i][0];\n            front[i] = view.bbox3D[i][1];\n        }\n    } else {\n        for (i = 0; i < directions.length; i++) {\n            rear[i] = parents[1][i];\n            front[i] = parents[2][1];\n        }\n    }\n\n    // Main 3D axes\n    attr = Type.copyAttributes(attributes, board.options, \"axes3d\");\n    pos = attr.axesposition;\n    for (i = 0; i < directions.length; i++) {\n        // Run through ['x', 'y', 'z']\n        dir = directions[i];\n        na = dir + suffixAxis;\n\n        if (pos === \"center\") {\n            // Axes centered\n            from = [0, 0, 0];\n            to = [0, 0, 0];\n            to[i] = front[i];\n            axes[na] = view.create(\"axis3d\", [from, to], attr[na.toLowerCase()]);\n        } else {\n            na += \"Border\"; // Axes bordered\n            from = rear.slice();\n            to = front.slice();\n            if (i === 2) {\n                from[1] = front[1];\n                to[0] = rear[0];\n            } else {\n                from[i] = front[i];\n                to[2] = rear[2];\n            }\n            to[i] = front[i];\n            attr[na.toLowerCase()].lastArrow = false;\n            axes[na] = view.create(\"axis3d\", [from, to], attr[na.toLowerCase()]);\n\n            // TODO\n            ticks_attr = {\n                visible: true, // FÃ¼r z-Ticks wird path nicht berechnet\n                minorTicks: 0,\n                tickEndings: [0, 1],\n                drawLabels: false\n            };\n            if (i === 2) {\n                ticks_attr.tickEndings = [1, 0];\n            }\n            axes[na + \"Ticks\"] = view.create(\"ticks\", [axes[na], 1], ticks_attr);\n        }\n    }\n\n    // Origin (2D point)\n    axes.O = view.create(\n        \"intersection\",\n        [axes[directions[0] + suffixAxis], axes[directions[1] + suffixAxis]],\n        {\n            name: \"\",\n            visible: false,\n            withLabel: false\n        }\n    );\n\n    // Front and rear planes\n    for (i = 0; i < directions.length; i++) {\n        // Run through ['x', 'y', 'z']\n        i1 = (i + 1) % 3;\n        i2 = (i + 2) % 3;\n\n        dir = directions[i];\n        for (j = 0; j < sides.length; j++) {\n            // Run through ['Rear', 'Front']\n\n            from = [0, 0, 0];\n            from[i] = j === 0 ? rear[i] : front[i];\n            vec1 = [0, 0, 0];\n            vec2 = [0, 0, 0];\n            vec1[i1] = 1;\n            vec2[i2] = 1;\n            range1 = [rear[i1], front[i1]];\n            range2 = [rear[i2], front[i2]];\n            na = dir + \"Plane\" + sides[j];\n\n            attr = Type.copyAttributes(attributes, board.options, \"axes3d\", na);\n            axes[na] = view.create(\"plane3d\", [from, vec1, vec2, range1, range2], attr);\n            axes[na].elType = \"axisplane3d\";\n        }\n    }\n\n    // Axes on front and rear planes\n    for (i = 0; i < directions.length; i++) {\n        // Run through ['x', 'y', 'z']\n        dir = directions[i];\n        for (j = 0; j < sides.length; j++) {\n            for (k = 1; k <= 2; k++) {\n                i1 = (i + k) % 3;\n                dir1 = directions[i1];\n                na = dir + \"Plane\" + sides[j] + dir1.toUpperCase() + \"Axis\";\n                na_parent = dir + \"Plane\" + sides[j];\n\n                from = [0, 0, 0];\n                to = [0, 0, 0];\n                from[i] = to[i] = j === 0 ? rear[i] : front[i];\n\n                from[i1] = rear[i1];\n                to[i1] = front[i1];\n\n                attr = Type.copyAttributes(attributes, board.options, \"axes3d\", na);\n                axes[na] = view.create(\"axis3d\", [from, to], attr);\n                axes[na_parent].addChild(axes[na]);\n                axes[na_parent].element2D.inherits.push(axes[na]); // TODO: Access of element2D is not nice\n            }\n        }\n    }\n\n    return axes;\n};\nJXG.registerElement(\"axes3d\", JXG.createAxes3D);\n\nJXG.createAxis3D = function (board, parents, attributes) {\n    var view = parents[0],\n        attr,\n        start = parents[1],\n        end = parents[2],\n        el_start,\n        el_end,\n        el;\n\n    // Use 2D points to create axis\n    attr = Type.copyAttributes(attributes.point1, board.options, \"axis3d\", \"point1\");\n    el_start = view.create(\n        \"point\",\n        [\n            (function (xx, yy, zz) {\n                return function () {\n                    return view.project3DTo2D(xx, yy, zz)[1];\n                };\n            })(start[0], start[1], start[2]),\n            (function (xx, yy, zz) {\n                return function () {\n                    return view.project3DTo2D(xx, yy, zz)[2];\n                };\n            })(start[0], start[1], start[2])\n        ],\n        attr\n    );\n\n    attr = Type.copyAttributes(attributes.point2, board.options, \"axis3d\", \"point2\");\n    el_end = view.create(\n        \"point\",\n        [\n            (function (xx, yy, zz) {\n                return function () {\n                    return view.project3DTo2D(xx, yy, zz)[1];\n                };\n            })(end[0], end[1], end[2]),\n            (function (xx, yy, zz) {\n                return function () {\n                    return view.project3DTo2D(xx, yy, zz)[2];\n                };\n            })(end[0], end[1], end[2])\n        ],\n        attr\n    );\n\n    attr = Type.copyAttributes(attributes, board.options, \"axis3d\");\n    el = view.create(\"arrow\", [el_start, el_end], attr);\n\n    return el;\n};\nJXG.registerElement(\"axis3d\", JXG.createAxis3D);\n\nJXG.createMesh3D = function (board, parents, attr) {\n    var view = parents[0],\n        point = parents[1],\n        dir1 = parents[2],\n        range1 = parents[3],\n        dir2 = parents[4],\n        range2 = parents[5],\n        el;\n\n    el = view.create(\"curve\", [[], []], attr);\n    /**\n     * @ignore\n     */\n    el.updateDataArray = function () {\n        var s1 = range1[0],\n            e1 = range1[1],\n            s2 = range2[0],\n            e2 = range2[1],\n            l1, l2, res, i,\n            sol,\n            v1 = [0, 0, 0],\n            v2 = [0, 0, 0],\n            step = 1,\n            q = [0, 0, 0];\n\n        this.dataX = [];\n        this.dataY = [];\n\n        if (Type.isFunction(point)) {\n            q = point().slice(1);\n        } else {\n            for (i = 0; i < 3; i++) {\n                q[i] = Type.evaluate(point[i]);\n            }\n        }\n        for (i = 0; i < 3; i++) {\n            v1[i] = Type.evaluate(dir1[i]);\n            v2[i] = Type.evaluate(dir2[i]);\n        }\n        l1 = JXG.Math.norm(v1, 3);\n        l2 = JXG.Math.norm(v2, 3);\n        for (i = 0; i < 3; i++) {\n            v1[i] /= l1;\n            v2[i] /= l2;\n        }\n\n        // sol = Mat.Geometry.getPlaneBounds(v1, v2, q, s1, e1);\n        // if (sol !== null) {\n        //     s1 = sol[0];\n        //     e1 = sol[1];\n        //     s2 = sol[2];\n        //     e2 = sol[3];\n        // }\n\n        res = view.getMesh(\n            [\n                function (u, v) {\n                    return q[0] + u * v1[0] + v * v2[0];\n                },\n                function (u, v) {\n                    return q[1] + u * v1[1] + v * v2[1];\n                },\n                function (u, v) {\n                    return q[2] + u * v1[2] + v * v2[2];\n                }\n            ],\n            [Math.ceil(s1), Math.floor(e1), (Math.ceil(e1) - Math.floor(s1)) / step],\n            [Math.ceil(s2), Math.floor(e2), (Math.ceil(e2) - Math.floor(s2)) / step]\n        );\n        this.dataX = res[0];\n        this.dataY = res[1];\n    };\n    return el;\n};\nJXG.registerElement(\"mesh3d\", JXG.createMesh3D);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}