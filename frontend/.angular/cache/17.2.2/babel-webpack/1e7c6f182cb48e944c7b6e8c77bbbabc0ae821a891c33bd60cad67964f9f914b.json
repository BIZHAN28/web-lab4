{"ast":null,"code":"/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, document: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview The JXG.DataSource is a helper class for data organization. Currently supported data sources are\n * javascript arrays and HTML tables.\n */\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\nJXG.DataSource = function () {\n  this.data = [];\n  this.columnHeaders = [];\n  this.rowHeaders = [];\n  return this;\n};\nJXG.extend(JXG.DataSource.prototype, /** @lends JXG.DataSource.prototype */{\n  loadFromArray: function (table, columnHeader, rowHeader) {\n    var i, j, cell;\n    if (Type.isArray(columnHeader)) {\n      this.columnHeaders = columnHeader;\n      columnHeader = false;\n    }\n    if (Type.isArray(rowHeader)) {\n      this.rowHeaders = rowHeader;\n      rowHeader = false;\n    }\n    this.data = [];\n    if (columnHeader) {\n      this.columnHeaders = [];\n    }\n    if (rowHeader) {\n      this.rowHeaders = [];\n    }\n    if (Type.exists(table)) {\n      // extract the data\n      this.data = [];\n      for (i = 0; i < table.length; i++) {\n        this.data[i] = [];\n        for (j = 0; j < table[i].length; j++) {\n          cell = table[i][j];\n          if (parseFloat(cell).toString() === cell) {\n            this.data[i][j] = parseFloat(cell);\n          } else if (cell !== \"-\") {\n            this.data[i][j] = cell;\n          } else {\n            this.data[i][j] = NaN;\n          }\n        }\n      }\n      if (columnHeader) {\n        this.columnHeaders = this.data[0].slice(1);\n        this.data = this.data.slice(1);\n      }\n      if (rowHeader) {\n        this.rowHeaders = [];\n        for (i = 0; i < this.data.length; i++) {\n          this.rowHeaders.push(this.data[i][0]);\n          this.data[i] = this.data[i].slice(1);\n        }\n      }\n    }\n    return this;\n  },\n  loadFromTable: function (table, columnHeader, rowHeader) {\n    var row, i, j, col, cell;\n    if (Type.isArray(columnHeader)) {\n      this.columnHeaders = columnHeader;\n      columnHeader = false;\n    }\n    if (Type.isArray(rowHeader)) {\n      this.rowHeaders = rowHeader;\n      rowHeader = false;\n    }\n    this.data = [];\n    if (columnHeader) {\n      this.columnHeaders = [];\n    }\n    if (rowHeader) {\n      this.rowHeaders = [];\n    }\n\n    // to adjust: examples in examples folder & wiki\n    table = document.getElementById(table);\n    if (Type.exists(table)) {\n      // extract the data\n      row = table.getElementsByTagName(\"tr\");\n      this.data = [];\n      for (i = 0; i < row.length; i++) {\n        col = row[i].getElementsByTagName(\"td\");\n        this.data[i] = [];\n        for (j = 0; j < col.length; j++) {\n          cell = col[j].innerHTML;\n          if (parseFloat(cell).toString() === cell) {\n            this.data[i][j] = parseFloat(cell);\n          } else if (cell !== \"-\") {\n            this.data[i][j] = cell;\n          } else {\n            this.data[i][j] = NaN;\n          }\n        }\n      }\n      if (columnHeader) {\n        this.columnHeaders = this.data[0].slice(1);\n        this.data = this.data.slice(1);\n      }\n      if (rowHeader) {\n        this.rowHeaders = [];\n        for (i = 0; i < this.data.length; i++) {\n          this.rowHeaders.push(this.data[i][0]);\n          this.data[i] = this.data[i].slice(1);\n        }\n      }\n    }\n    return this;\n  },\n  addColumn: function (name, pos, data) {\n    throw new Error(\"not implemented\");\n  },\n  addRow: function (name, pos, data) {\n    throw new Error(\"not implemented\");\n  },\n  getColumn: function (col) {\n    var i,\n      result = [];\n\n    // get column index if column is given as column header title\n    if (Type.isString(col)) {\n      for (i = 0; i < this.columnHeaders.length; i++) {\n        if (col === this.columnHeaders[i]) {\n          col = i;\n          break;\n        }\n      }\n    }\n\n    // build column array\n    for (i = 0; i < this.data.length; i++) {\n      if (this.data[i].length > col) {\n        result[i] = parseFloat(this.data[i][col]);\n      }\n    }\n    return result;\n  },\n  getRow: function (row) {\n    var result, i;\n\n    // get column index if column is given as column header title\n    if (Type.isString(row)) {\n      for (i = 0; i < this.rowHeaders.length; i++) {\n        if (row === this.rowHeaders[i]) {\n          row = i;\n          break;\n        }\n      }\n    }\n\n    // allocate memory for result array\n    result = [];\n\n    // build column array. result = this.data[row] is a flat copy and will\n    // destroy our local data copy, that's why we're copying it element wise.\n    for (i = 0; i < this.data[row].length; i++) {\n      result[i] = this.data[row][i];\n    }\n    return result;\n  }\n});\nexport default JXG.DataSource;","map":{"version":3,"names":["JXG","Type","DataSource","data","columnHeaders","rowHeaders","extend","prototype","loadFromArray","table","columnHeader","rowHeader","i","j","cell","isArray","exists","length","parseFloat","toString","NaN","slice","push","loadFromTable","row","col","document","getElementById","getElementsByTagName","innerHTML","addColumn","name","pos","Error","addRow","getColumn","result","isString","getRow"],"sources":["D:/study things/web/weblab4-main/node_modules/jsxgraph/src/parser/datasource.js"],"sourcesContent":["/*\n    Copyright 2008-2023\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, document: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview The JXG.DataSource is a helper class for data organization. Currently supported data sources are\n * javascript arrays and HTML tables.\n */\n\nimport JXG from \"../jxg\";\nimport Type from \"../utils/type\";\n\nJXG.DataSource = function () {\n    this.data = [];\n    this.columnHeaders = [];\n    this.rowHeaders = [];\n\n    return this;\n};\n\nJXG.extend(\n    JXG.DataSource.prototype,\n    /** @lends JXG.DataSource.prototype */ {\n        loadFromArray: function (table, columnHeader, rowHeader) {\n            var i, j, cell;\n\n            if (Type.isArray(columnHeader)) {\n                this.columnHeaders = columnHeader;\n                columnHeader = false;\n            }\n\n            if (Type.isArray(rowHeader)) {\n                this.rowHeaders = rowHeader;\n                rowHeader = false;\n            }\n\n            this.data = [];\n\n            if (columnHeader) {\n                this.columnHeaders = [];\n            }\n\n            if (rowHeader) {\n                this.rowHeaders = [];\n            }\n\n            if (Type.exists(table)) {\n                // extract the data\n                this.data = [];\n\n                for (i = 0; i < table.length; i++) {\n                    this.data[i] = [];\n\n                    for (j = 0; j < table[i].length; j++) {\n                        cell = table[i][j];\n                        if (parseFloat(cell).toString() === cell) {\n                            this.data[i][j] = parseFloat(cell);\n                        } else if (cell !== \"-\") {\n                            this.data[i][j] = cell;\n                        } else {\n                            this.data[i][j] = NaN;\n                        }\n                    }\n                }\n\n                if (columnHeader) {\n                    this.columnHeaders = this.data[0].slice(1);\n                    this.data = this.data.slice(1);\n                }\n\n                if (rowHeader) {\n                    this.rowHeaders = [];\n                    for (i = 0; i < this.data.length; i++) {\n                        this.rowHeaders.push(this.data[i][0]);\n                        this.data[i] = this.data[i].slice(1);\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        loadFromTable: function (table, columnHeader, rowHeader) {\n            var row, i, j, col, cell;\n\n            if (Type.isArray(columnHeader)) {\n                this.columnHeaders = columnHeader;\n                columnHeader = false;\n            }\n\n            if (Type.isArray(rowHeader)) {\n                this.rowHeaders = rowHeader;\n                rowHeader = false;\n            }\n\n            this.data = [];\n\n            if (columnHeader) {\n                this.columnHeaders = [];\n            }\n\n            if (rowHeader) {\n                this.rowHeaders = [];\n            }\n\n            // to adjust: examples in examples folder & wiki\n            table = document.getElementById(table);\n\n            if (Type.exists(table)) {\n                // extract the data\n                row = table.getElementsByTagName(\"tr\");\n                this.data = [];\n\n                for (i = 0; i < row.length; i++) {\n                    col = row[i].getElementsByTagName(\"td\");\n                    this.data[i] = [];\n\n                    for (j = 0; j < col.length; j++) {\n                        cell = col[j].innerHTML;\n\n                        if (parseFloat(cell).toString() === cell) {\n                            this.data[i][j] = parseFloat(cell);\n                        } else if (cell !== \"-\") {\n                            this.data[i][j] = cell;\n                        } else {\n                            this.data[i][j] = NaN;\n                        }\n                    }\n                }\n\n                if (columnHeader) {\n                    this.columnHeaders = this.data[0].slice(1);\n                    this.data = this.data.slice(1);\n                }\n\n                if (rowHeader) {\n                    this.rowHeaders = [];\n                    for (i = 0; i < this.data.length; i++) {\n                        this.rowHeaders.push(this.data[i][0]);\n                        this.data[i] = this.data[i].slice(1);\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        addColumn: function (name, pos, data) {\n            throw new Error(\"not implemented\");\n        },\n\n        addRow: function (name, pos, data) {\n            throw new Error(\"not implemented\");\n        },\n\n        getColumn: function (col) {\n            var i,\n                result = [];\n\n            // get column index if column is given as column header title\n            if (Type.isString(col)) {\n                for (i = 0; i < this.columnHeaders.length; i++) {\n                    if (col === this.columnHeaders[i]) {\n                        col = i;\n                        break;\n                    }\n                }\n            }\n\n            // build column array\n            for (i = 0; i < this.data.length; i++) {\n                if (this.data[i].length > col) {\n                    result[i] = parseFloat(this.data[i][col]);\n                }\n            }\n\n            return result;\n        },\n\n        getRow: function (row) {\n            var result, i;\n\n            // get column index if column is given as column header title\n            if (Type.isString(row)) {\n                for (i = 0; i < this.rowHeaders.length; i++) {\n                    if (row === this.rowHeaders[i]) {\n                        row = i;\n                        break;\n                    }\n                }\n            }\n\n            // allocate memory for result array\n            result = [];\n\n            // build column array. result = this.data[row] is a flat copy and will\n            // destroy our local data copy, that's why we're copying it element wise.\n            for (i = 0; i < this.data[row].length; i++) {\n                result[i] = this.data[row][i];\n            }\n\n            return result;\n        }\n    }\n);\n\nexport default JXG.DataSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}